package com.nspl.app.repository;

import java.math.BigInteger;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.nspl.app.domain.DataViewsColumns;

/**
 * Spring Data JPA repository for the DataViewsColumns entity.
 */
@SuppressWarnings("unused")
public interface DataViewsColumnsRepository extends JpaRepository<DataViewsColumns,Long> {

	List<DataViewsColumns> findByDataViewId(Long dataViewId);
	
	List<DataViewsColumns> findByDataViewIdIn(List<Long> dataViewIds);
	
	@Query(value="select distinct ref_dv_name from t_data_views_columns where data_view_id = :dataViewId", nativeQuery=true)
	List<String> fetchDistinctTemplateId(@Param("dataViewId") Long dataViewId);
	
	List<DataViewsColumns> findByRefDvNameAndDataViewId(String refDvName, Long dataViewId);
	
	@Query(value="select distinct column_name from t_data_views_columns where data_view_id = :dataViewId", nativeQuery=true)
	List<String> fetchDistinctColName(@Param("dataViewId") Long dataViewId);
	
	List<DataViewsColumns> findByDataViewIdAndRefDvType(Long dataViewId,String type);

	
	@Query(value="SELECT * FROM t_data_views_columns where data_view_id in (SELECT id FROM t_data_views where tenant_id =:tenantId)", nativeQuery=true)
	List<DataViewsColumns> fetchDataViewColumnsByDataViewIds(@Param("tenantId") Long tenantId);//fetchDataViewColumnByDataViewsIds
	
	
	DataViewsColumns findByDataViewIdAndQualifier(Long dataViewId, String qualifier);
	
	@Query(value="select ref_dv_column from t_data_views_columns where data_view_id = :dataViewId", nativeQuery=true)
	List<String> fetchFileTemplateLineIds(@Param("dataViewId") Long dataViewId);
	
	DataViewsColumns findByDataViewIdAndColumnName(Long dataViewId, String columnName);
	
	DataViewsColumns findByDataViewIdAndRefDvColumn(Long dataViewId, String refDvCol);
	
	@Query(value="select id from t_data_views_columns where data_view_id = :dataViewId", nativeQuery=true)
	List<BigInteger> fetchIdsByDataViewId(@Param("dataViewId") Long dataViewId);
	
	
	@Query(value="select ref_dv_column from t_data_views_columns where id in(:ids)", nativeQuery=true)
	List<String> fetchFileTemplateLineIdsByIds(@Param("ids") List<BigInteger> ids);
	
	List<DataViewsColumns> findByDataViewIdAndGroupByIsTrue(Long viewId);
	
	List<DataViewsColumns> findByDataViewIdAndColDataType(Long viewId, String dataType);

	
	@Query(value="select distinct data_view_id from t_data_views_columns where ref_dv_type=:dvType and ref_dv_name=:tempId", nativeQuery=true)
	List<BigInteger> findDistinctDataViewIdByRefDvTypeAndRefDvColumn(@Param("dvType") String dvType,@Param("tempId")
			String tempId);
	
	
}
