package com.nspl.app.repository;

import java.math.BigInteger;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.nspl.app.domain.AccountedSummary;

/**
 * Spring Data JPA repository for the AccountedSummary entity.
 */
@SuppressWarnings("unused")
public interface AccountedSummaryRepository extends JpaRepository<AccountedSummary,Long> {
	// With job
	// by rules, days
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'ACCOUNTED' and rule_id in(:ruleIds) and job_reference = :jobReference",nativeQuery=true)
	List<BigInteger> fetchAccountedRowIdsByOriginalRowIdsWithJob(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleIds") List<BigInteger> ruleIds, @Param("jobReference") String jobReference);
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'INPROCESS' and rule_id in(:ruleIds) and job_reference = :jobReference",nativeQuery=true)
	List<BigInteger> fetchInProcessRowIdsByOriginalRowIdsWithJob(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleIds") List<BigInteger> ruleIds, @Param("jobReference") String jobReference);
	
	//Without job
	// by rules, days
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'ACCOUNTED' and rule_id in(:ruleIds) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchAccountedRowIdsByOriginalRowIdsWithoutJob(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleIds") List<BigInteger> ruleIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'INPROCESS' and rule_id in(:ruleIds) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchInProcessRowIdsByOriginalRowIdsWithoutJob(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleIds") List<BigInteger> ruleIds,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	// by batches
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'ACCOUNTED' and job_reference in (:jobReferences) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchAccountedRowIdsByOriginalRowIdsForbatch(@Param("rowIds") List<BigInteger> rowIds, @Param("jobReferences") List<String> jobReferences,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'INPROCESS' and job_reference in (:jobReferences) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchInProcessRowIdsByOriginalRowIdsForbatch(@Param("rowIds") List<BigInteger> rowIds, @Param("jobReferences") List<String> jobReferences, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);

	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'ACCOUNTED' and job_reference in (:manualBatchs) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchAccountedRowIdsByOriginalRowIdsForManualbatch(@Param("rowIds") List<BigInteger> rowIds, @Param("manualBatchs") List<String> manualBatchs,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'INPROCESS' and job_reference in (:manualBatchs) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchInProcessRowIdsByOriginalRowIdsForManualbatch(@Param("rowIds") List<BigInteger> rowIds, @Param("manualBatchs") List<String> manualBatchs, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);

	
	//Global 
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'ACCOUNTED' and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchAccountedRowIdsByOriginalRowIds(@Param("rowIds") List<BigInteger> rowIds,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchAllAccountedRowIdsByOriginalRowIds(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchAllAccountedRowIdsByManualBatchOriginalRowIds(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and status = 'INPROCESS' and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchInProcessRowIdsByOriginalRowIds(@Param("rowIds") List<BigInteger> rowIds,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT * FROM t_accounted_summary where row_id =:rowId and rule_id in(:ruleIds) and rule_group_id = :ruleGroupId",nativeQuery=true)
	AccountedSummary findByRowIdRuleIds(@Param("rowId") BigInteger rowId, @Param("ruleIds") List<BigInteger> ruleIds, @Param("ruleGroupId") Long ruleGroupId);

	AccountedSummary findByRowIdAndRuleGroupIdAndViewId(Long rowId, Long ruleGroupId, Long viewId);
	
	@Query(value =  "SELECT job_reference FROM t_accounted_summary where view_id = :viewId and rule_group_id = :groupId and job_reference like '%MANUAL%'",nativeQuery=true)
	List<String> fetchManualJobReferences(@Param("groupId") Long groupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchIdsByRowIdsAndGroupIdAndViewId(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT * FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<AccountedSummary> fetchRecordsByRowIdsAndGroupIdAndViewId(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT * FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and rule_id = :ruleId",nativeQuery=true)
	List<AccountedSummary> fetchRecordsByRowIdsAndGroupIdAndViewIdNRuleId(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId, @Param("ruleId") Long ruleId);
	
	@Query(value =  "SELECT id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and rule_id in(:ruleIds)",nativeQuery=true)
	List<BigInteger> fetchIdsByTotalIdsRulesAndGroupId(@Param("rowIds") List<BigInteger> rowIds,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId, @Param("ruleIds") List<Long> ruleIds);

	@Query(value =  "SELECT * FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and rule_id = :ruleId",nativeQuery=true)
	List<AccountedSummary> fetchIdsByTotalIdsRuleIdAndGroupId(@Param("rowIds") List<BigInteger> rowIds,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId, @Param("ruleId") Long ruleId);
	
	@Query(value =  "SELECT id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and job_reference in(:jobReferences)",nativeQuery=true)
	List<BigInteger> fetchIdsByTotalIdsAndRulesNGroupIdNBatches(@Param("rowIds") List<BigInteger> rowIds,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId, @Param("jobReferences") List<String> jobReferences);
	
	@Query(value =  "SELECT * FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and job_reference in(:jobReferences) and rule_id = :ruleId",nativeQuery=true)
	List<AccountedSummary> fetchRecordsByTotalIdsAndRulesNGroupIdNBatches(@Param("rowIds") List<BigInteger> rowIds,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId, @Param("jobReferences") List<String> jobReferences, @Param("ruleId") Long ruleId);

	
	@Query(value =  "SELECT id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchIdsByTotalIdsAndRulesNGroupId(@Param("rowIds") List<BigInteger> rowIds,@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT * FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and status = 'ACCOUNTED'",nativeQuery=true)
	List<AccountedSummary> fetchIdsByRowIdsAndGroupIdAndViewIdAcctedStatus(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT distinct(rule_id) FROM t_accounted_summary where view_id = :viewId and rule_group_id = :groupId and row_id in(:rowIds) and job_reference in (:jobReferences)",nativeQuery=true)
	List<BigInteger> fetchRuleIdsByRowIdsNBatches(@Param("rowIds") List<BigInteger> rowIds, @Param("groupId") Long groupId, @Param("viewId") Long viewId, @Param("jobReferences") List<String> jobReferences);
	
	//Ravali
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
	List<BigInteger> fetchAllAccountedRowIdsBySrcIds(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	//Ravali
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and journal_status='ENTERED'",nativeQuery=true)
	List<Long> findRowIdsByRuleGroupIAndStatus(@Param("rowIds") List<Long> rowIds, @Param("ruleGroupId") Long ruleGroupId);
	
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and (journal_status='' or journal_status is null) and status='ACCOUNTED'",nativeQuery=true)
	List<Long> findRowIdsByRuleGroupIAndStatusNull(@Param("rowIds") List<Long> rowIds, @Param("ruleGroupId") Long ruleGroupId);
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and status='ACCOUNTED'",nativeQuery=true)
	List<Long> findRowIdsByRuleGroupIAndStatusAccounted(@Param("rowIds") List<Long> rowIds, @Param("ruleGroupId") Long ruleGroupId);
	
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and journal_status='ENTERED' and status='ACCOUNTED'",nativeQuery=true)
	List<BigInteger> findRowIdsByRuleGroupIAndViewIdAndStatus(@Param("rowIds") List<Long> rowIds, @Param("ruleGroupId") Long ruleGroupId,@Param("viewId") Long viewId);
	
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and status='ACCOUNTED'",nativeQuery=true)
	List<BigInteger> findRowIdsByRuleGroupIAndViewIdAndStatusAccounted(@Param("rowIds") List<Long> rowIds, @Param("ruleGroupId") Long ruleGroupId,@Param("viewId") Long viewId);
	
	
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and status ='ACCOUNTED' and (journal_status is null or journal_status='')",nativeQuery=true)
	List<BigInteger> findUnPostedRowIdsByRuleGroupIAndViewIdAndStatus(@Param("rowIds") List<Long> rowIds, @Param("ruleGroupId") Long ruleGroupId,@Param("viewId") Long viewId);
	
	
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where rule_group_id = :ruleGroupId and view_id = :viewId and status='ACCOUNTED'",nativeQuery=true)
	List<BigInteger> fetchAccountedRowIdsByRuleGrpIdAndViewId( @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	
//	@Query(value =  "SELECT row_id FROM t_accounted_summary where rule_group_id = :ruleGroupId and view_id = :viewId and status!='ACCOUNTED'",nativeQuery=true)
//	List<BigInteger> fetchAllAccountedRowIdsByRuleGrpIdAndViewId( @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where rule_group_id = :ruleGroupId and view_id = :viewId and status ='ACCOUNTED' and (journal_status is null or journal_status='')",nativeQuery=true)
	List<BigInteger> fetchUnPostedRowIdsByRuleGrpIdAndViewId( @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	@Query(value =  "SELECT row_id FROM t_accounted_summary where rule_group_id = :ruleGroupId and view_id = :viewId and status!='ACCOUNTED'",nativeQuery=true)
	List<BigInteger> fetchAccountingInProcRowIdsByRuleGrpIdAndViewId( @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
	
	
	//journal status filter
		@Query(value =  "SELECT row_id FROM t_accounted_summary where row_id in(:rowIds) and rule_group_id = :ruleGroupId and view_id = :viewId and journal_status ='ENTERED'",nativeQuery=true)
		List<BigInteger> fetchAllAccountedRowIdsBySrcIdsAndJournalStatus(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
		
		//account
		@Query(value =  "SELECT"+
		        " DATEDIFF( a.created_date,`v`.`file_date`) as `rule_age`, count(`v`.`id`), concat((DATEDIFF( a.created_date,`v`.`file_date`)-1),'-' ,DATEDIFF( a.created_date,`v`.`file_date`)) as "+
		        "period, coalesce (sum(a.approval_status = 'APPROVED'),0) as Approved, coalesce (sum(a.journal_status = 'ENTERED'),0) as Journals FROM"+

		" (SELECT * FROM t_accounted_summary  where rule_group_id = :groupId and view_id =:viewId and row_id in (select id from t_data_master where tenant_id =:tenantId and file_date between :fmDate and :toDate))a"+
						" JOIN t_data_master `v`"+
		                " where ( `a`.`row_id` = `v`.`id` )   group by rule_age, period",nativeQuery=true)
				List<Object[]> fetchAgeAnalysisForAccounting(@Param("groupId") Long groupId, @Param("viewId") Long viewId, @Param("tenantId") Long tenantId,@Param("fmDate") String fmDate,@Param("toDate") String toDate);

		List<AccountedSummary> findByRowIdInAndRuleGroupIdAndViewId(
				List<Long> rowIdsList, Long groupId, Long viewId);

		List<AccountedSummary> findByRowIdInAndCurrentRecordFlag(
				List<Long> originalRowIds, boolean b);

		List<AccountedSummary> findByRowIdInAndJobReferenceNotIn(
				List<Long> originalRowIds, String jobRef);

		@Query(value = "SELECT distinct(rule_id) FROM t_accounted_summary where view_id = :viewId and rule_group_id = :ruleGroupId and row_id in(:rowIds)",nativeQuery=true)
		List<BigInteger> fetchDistinctRuleIdsByRowIds(@Param("rowIds") List<BigInteger> rowIds, @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
		
		@Query(value =  "SELECT * FROM t_accounted_summary where row_id in(:rowIds) and job_reference = :jobReference",nativeQuery=true)
		List<AccountedSummary> fetchByRowIdsAndJobReference(@Param("rowIds") List<BigInteger> rowIds, @Param("jobReference") String jobReference);
		
		@Query(value = "SELECT distinct(status) FROM t_accounted_summary where rule_group_id = :ruleGroupId and view_id = :viewId",nativeQuery=true)
		List<String> fetchDistinctStatusByGroupIdNViewId(@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);
		
		@Query(value = "SELECT row_id FROM t_accounted_summary where rule_group_id = :ruleGroupId and view_id = :viewId and status = :status and current_record_flag is true",nativeQuery=true)
		List<BigInteger> fetchAccountingIdsByStatusNGroupIdNViewId(@Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId, @Param("status") String status);

		
		
		@Query(value = "SELECT row_id FROM t_accounted_summary where rule_group_id = :ruleGroupId and view_id = :viewId and status ='Accounted' and (approval_status is null or approval_status='')",nativeQuery=true)
		List<BigInteger> fetchDistinctApprovedRowIds(@Param("ruleGroupId") Long ruleGroupId,@Param("viewId") Long viewId);
		
		@Query(value =  "SELECT row_id FROM t_accounted_summary where rule_group_id = :ruleGroupId and view_id = :viewId and status ='ACCOUNTED' and (journal_status is not null and journal_status='ENTERED')",nativeQuery=true)
		List<BigInteger> fetchPostedRowIdsByRuleGrpIdAndViewId( @Param("ruleGroupId") Long ruleGroupId, @Param("viewId") Long viewId);

		
		@Query(value =  "SELECT * FROM t_accounted_summary where row_id in(:rowIds) and journal_status = 'ENTERED'",nativeQuery=true)
		List<AccountedSummary> findByRowIdIn(@Param("rowIds") List<BigInteger> rowIds);
		
		
		@Query(value =  "SELECT count(*) FROM t_accounted_summary where rule_group_id = :ruleGroupId and view_id = :viewId and rule_id = :ruleId ",nativeQuery=true)
		Object fetchRecordCountByGroupIdAndRuleIdAndAccountingViewId( @Param("ruleGroupId") Long ruleGroupId, @Param("ruleId") Long ruleId, @Param("viewId") Long viewId);
	

}
