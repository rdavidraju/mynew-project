package com.nspl.app.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.DataMaster;
import com.nspl.app.domain.DataStaging;
import com.nspl.app.repository.DataMasterRepository;
import com.nspl.app.repository.DataStagingRepository;
import com.nspl.app.repository.search.DataMasterSearchRepository;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;

import io.swagger.annotations.ApiParam;
import io.github.jhipster.web.util.ResponseUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import javax.inject.Inject;

import static org.elasticsearch.index.query.QueryBuilders.*;

/**
 * REST controller for managing DataMaster.
 */
@RestController
@RequestMapping("/api")
public class DataMasterResource {

    private final Logger log = LoggerFactory.getLogger(DataMasterResource.class);

    private static final String ENTITY_NAME = "dataMaster";
        
    private final DataMasterRepository dataMasterRepository;

    private final DataMasterSearchRepository dataMasterSearchRepository;
    
    @Inject
    DataStagingRepository dataStagingRepository;

    public DataMasterResource(DataMasterRepository dataMasterRepository, DataMasterSearchRepository dataMasterSearchRepository) {
        this.dataMasterRepository = dataMasterRepository;
        this.dataMasterSearchRepository = dataMasterSearchRepository;
    }

    /**
     * POST  /data-masters : Create a new dataMaster.
     *
     * @param dataMaster the dataMaster to create
     * @return the ResponseEntity with status 201 (Created) and with body the new dataMaster, or with status 400 (Bad Request) if the dataMaster has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/data-masters")
    @Timed
    public ResponseEntity<DataMaster> createDataMaster(@RequestBody DataMaster dataMaster) throws URISyntaxException {
        log.debug("REST request to save DataMaster : {}", dataMaster);
        if (dataMaster.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new dataMaster cannot already have an ID")).body(null);
        }
        DataMaster result = dataMasterRepository.save(dataMaster);
        dataMasterSearchRepository.save(result);
        return ResponseEntity.created(new URI("/api/data-masters/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /data-masters : Updates an existing dataMaster.
     *
     * @param dataMaster the dataMaster to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated dataMaster,
     * or with status 400 (Bad Request) if the dataMaster is not valid,
     * or with status 500 (Internal Server Error) if the dataMaster couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/data-masters")
    @Timed
    public ResponseEntity<DataMaster> updateDataMaster(@RequestBody DataMaster dataMaster) throws URISyntaxException {
        log.debug("REST request to update DataMaster : {}", dataMaster);
        if (dataMaster.getId() == null) {
            return createDataMaster(dataMaster);
        }
        DataMaster result = dataMasterRepository.save(dataMaster);
        dataMasterSearchRepository.save(result);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, dataMaster.getId().toString()))
            .body(result);
    }

    /**
     * GET  /data-masters : get all the dataMasters.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of dataMasters in body
     */
    @GetMapping("/data-masters")
    @Timed
    public ResponseEntity<List<DataMaster>> getAllDataMasters(@ApiParam Pageable pageable) {
        log.debug("REST request to get a page of DataMasters");
        Page<DataMaster> page = dataMasterRepository.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/data-masters");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /data-masters/:id : get the "id" dataMaster.
     *
     * @param id the id of the dataMaster to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the dataMaster, or with status 404 (Not Found)
     */
    @GetMapping("/data-masters/{id}")
    @Timed
    public ResponseEntity<DataMaster> getDataMaster(@PathVariable Long id) {
        log.debug("REST request to get DataMaster : {}", id);
        DataMaster dataMaster = dataMasterRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(dataMaster));
    }

    /**
     * DELETE  /data-masters/:id : delete the "id" dataMaster.
     *
     * @param id the id of the dataMaster to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/data-masters/{id}")
    @Timed
    public ResponseEntity<Void> deleteDataMaster(@PathVariable Long id) {
        log.debug("REST request to delete DataMaster : {}", id);
        dataMasterRepository.delete(id);
        dataMasterSearchRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

    /**
     * SEARCH  /_search/data-masters?query=:query : search for the dataMaster corresponding
     * to the query.
     *
     * @param query the query of the dataMaster search 
     * @param pageable the pagination information
     * @return the result of the search
     */
    @GetMapping("/_search/data-masters")
    @Timed
    public ResponseEntity<List<DataMaster>> searchDataMasters(@RequestParam String query, @ApiParam Pageable pageable) {
        log.debug("REST request to search for a page of DataMasters for query {}", query);
        Page<DataMaster> page = dataMasterSearchRepository.search(queryStringQuery(query), pageable);
        HttpHeaders headers = PaginationUtil.generateSearchPaginationHttpHeaders(query, page, "/api/_search/data-masters");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    
    
    
    /**
     * author:ravali
     * @param tenantId
     * @param userId
     * Desc: moving data from staging table to master table
     */
    
    @GetMapping("/movingDataFromStagingToMaster")
    @Timed
    public void moveData(@RequestParam Long tenantId,@RequestParam Long userId)
    {
    	log.info("Rest request to move data fron staging table to master data of tenantId:"+tenantId);
    	List<DataStaging> dataStatingList=dataStagingRepository.findByTenantId(tenantId);
    	List<DataMaster> dataMasterlist=new ArrayList<DataMaster>();
    	for(DataStaging dataStating:dataStatingList)
    	{
    		DataMaster master=new DataMaster();
    		master.setTenantId(tenantId);
    		if(dataStating.getProfileId()!=null)
    		master.setProfileId(dataStating.getProfileId());
    		if(dataStating.getTemplateId()!=null)
    		master.setTemplateId(dataStating.getTemplateId());
    		if(dataStating.getFileName()!=null && !dataStating.getFileName().isEmpty())
    		master.setFileName(dataStating.getFileName());
    		if(dataStating.getFileDate()!=null)
    		master.setFileDate(dataStating.getFileDate());
    		if(dataStating.getLineContent()!=null &&dataStating.getLineContent().isEmpty())
    		master.lineContent(dataStating.getLineContent());
    		//master.setReconFlag();
    		//master.setReconciledDate();
    		//master.setAccountedFlag();
    		master.setCreatedBy(userId);
    		master.setCreatedDate(ZonedDateTime.now());
    		master.setLastUpdatedBy(userId);
    		master.setLastUpdatedDate(ZonedDateTime.now());
    		if(dataStating.getField01()!=null && !dataStating.getField01().isEmpty())
    		master.setField01(dataStating.getField01()); 
    		if(dataStating.getField02()!=null && !dataStating.getField02().isEmpty())
    		master.setField02(dataStating.getField02()); 
    		if(dataStating.getField03()!=null && !dataStating.getField03().isEmpty())
    		master.setField03(dataStating.getField03()); 
    		if(dataStating.getField04()!=null && !dataStating.getField04().isEmpty())
    		master.setField04(dataStating.getField04()); 
    		if(dataStating.getField05()!=null && !dataStating.getField05().isEmpty())
    		master.setField05(dataStating.getField05()); 
    		if(dataStating.getField06()!=null && !dataStating.getField06().isEmpty())
    		master.setField06(dataStating.getField06()); 
    		if(dataStating.getField07()!=null && !dataStating.getField07().isEmpty())
    		master.setField07(dataStating.getField07()); 
    		if(dataStating.getField08()!=null && !dataStating.getField08().isEmpty())
    		master.setField08(dataStating.getField08()); 
    		if(dataStating.getField09()!=null && !dataStating.getField09().isEmpty())
    		master.setField09(dataStating.getField09()); 
    		if(dataStating.getField10()!=null && !dataStating.getField10().isEmpty())
    		master.setField10(dataStating.getField10()); 
    		if(dataStating.getField11()!=null && !dataStating.getField11().isEmpty())
    		master.setField11(dataStating.getField11()); 
    		if(dataStating.getField12()!=null && !dataStating.getField12().isEmpty())
    		master.setField12(dataStating.getField12()); 
    		if(dataStating.getField13()!=null && !dataStating.getField13().isEmpty())
    		master.setField13(dataStating.getField13()); 
    		if(dataStating.getField14()!=null && !dataStating.getField14().isEmpty())
    		master.setField14(dataStating.getField14()); 
    		if(dataStating.getField15()!=null && !dataStating.getField15().isEmpty())
    		master.setField15(dataStating.getField15()); 
    		if(dataStating.getField16()!=null && !dataStating.getField16().isEmpty())
    		master.setField16(dataStating.getField16()); 
    		if(dataStating.getField17()!=null && !dataStating.getField17().isEmpty())
    		master.setField17(dataStating.getField17()); 
    		if(dataStating.getField18()!=null && !dataStating.getField18().isEmpty())
    		master.setField18(dataStating.getField18()); 
    		if(dataStating.getField19()!=null && !dataStating.getField19().isEmpty())
    		master.setField19(dataStating.getField19()); 
    		if(dataStating.getField20()!=null && !dataStating.getField20().isEmpty())
    		master.setField20(dataStating.getField20());
    		if(dataStating.getField21()!=null && !dataStating.getField21().isEmpty())
    		master.setField21(dataStating.getField21()); 
    		if(dataStating.getField22()!=null && !dataStating.getField22().isEmpty())
    		master.setField22(dataStating.getField22()); 
    		if(dataStating.getField23()!=null && !dataStating.getField23().isEmpty())
    		master.setField23(dataStating.getField23()); 
    		if(dataStating.getField24()!=null && !dataStating.getField24().isEmpty())
    		master.setField24(dataStating.getField24()); 
    		if(dataStating.getField25()!=null && !dataStating.getField25().isEmpty())
    		master.setField25(dataStating.getField25()); 
    		if(dataStating.getField26()!=null && !dataStating.getField26().isEmpty())
    		master.setField26(dataStating.getField26()); 
    		if(dataStating.getField27()!=null && !dataStating.getField27().isEmpty())
    		master.setField27(dataStating.getField27()); 
    		if(dataStating.getField28()!=null && !dataStating.getField28().isEmpty())
    		master.setField28(dataStating.getField28()); 
    		if(dataStating.getField29()!=null && !dataStating.getField29().isEmpty())
    		master.setField29(dataStating.getField29()); 
    		if(dataStating.getField30()!=null && !dataStating.getField30().isEmpty())
    		master.setField30(dataStating.getField30()); 
    		if(dataStating.getField31()!=null && !dataStating.getField31().isEmpty())
    		master.setField31(dataStating.getField31()); 
    		if(dataStating.getField32()!=null && !dataStating.getField32().isEmpty())
    		master.setField32(dataStating.getField32()); 
    		if(dataStating.getField33()!=null && !dataStating.getField33().isEmpty())
    		master.setField33(dataStating.getField33()); 
    		if(dataStating.getField34()!=null && !dataStating.getField34().isEmpty())
    		master.setField34(dataStating.getField34()); 
    		if(dataStating.getField35()!=null && !dataStating.getField35().isEmpty())
    		master.setField35(dataStating.getField35()); 
    		if(dataStating.getField36()!=null && !dataStating.getField36().isEmpty())
    		master.setField36(dataStating.getField36()); 
    		if(dataStating.getField37()!=null && !dataStating.getField37().isEmpty())
    		master.setField37(dataStating.getField37());
    		if(dataStating.getField38()!=null && !dataStating.getField38().isEmpty())
    		master.setField38(dataStating.getField38()); 
    		if(dataStating.getField39()!=null && !dataStating.getField39().isEmpty())
    		master.setField39(dataStating.getField39()); 
    		if(dataStating.getField40()!=null && !dataStating.getField40().isEmpty())
    		master.setField40(dataStating.getField40()); 
    		if(dataStating.getField41()!=null && !dataStating.getField41().isEmpty())
    		master.setField41(dataStating.getField41()); 
    		if(dataStating.getField42()!=null && !dataStating.getField42().isEmpty())
    		master.setField42(dataStating.getField42());
    		if(dataStating.getField43()!=null && !dataStating.getField43().isEmpty())
    		master.setField43(dataStating.getField43()); 
    		if(dataStating.getField44()!=null && !dataStating.getField44().isEmpty())
    		master.setField44(dataStating.getField44()); 
    		if(dataStating.getField45()!=null && !dataStating.getField45().isEmpty())
    		master.setField45(dataStating.getField45()); 
    		if(dataStating.getField46()!=null && !dataStating.getField46().isEmpty())
    		master.setField46(dataStating.getField46()); 
    		if(dataStating.getField47()!=null && !dataStating.getField47().isEmpty())
    		master.setField47(dataStating.getField47()); 
    		if(dataStating.getField48()!=null && !dataStating.getField48().isEmpty())
    		master.setField48(dataStating.getField48()); 
    		if(dataStating.getField49()!=null && !dataStating.getField49().isEmpty())
    		master.setField49(dataStating.getField49()); 
    		if(dataStating.getField50()!=null && !dataStating.getField50().isEmpty())
    		master.setField50(dataStating.getField50()); 
    		if(dataStating.getField51()!=null && !dataStating.getField51().isEmpty())
    		master.setField51(dataStating.getField51()); 
    		if(dataStating.getField52()!=null && !dataStating.getField52().isEmpty())
    		master.setField52(dataStating.getField52());
    		if(dataStating.getField53()!=null && !dataStating.getField53().isEmpty())
    		master.setField53(dataStating.getField53());
    		if(dataStating.getField54()!=null && !dataStating.getField54().isEmpty())
    		master.setField54(dataStating.getField54()); 
    		if(dataStating.getField55()!=null && !dataStating.getField55().isEmpty())
    		master.setField55(dataStating.getField55()); 
    		if(dataStating.getField56()!=null && !dataStating.getField56().isEmpty())
    		master.setField56(dataStating.getField56()); 
    		if(dataStating.getField57()!=null && !dataStating.getField57().isEmpty())
    		master.setField57(dataStating.getField57()); 
    		if(dataStating.getField58()!=null && !dataStating.getField58().isEmpty())
    		master.setField58(dataStating.getField58());
    		if(dataStating.getField59()!=null && !dataStating.getField59().isEmpty())
    		master.setField59(dataStating.getField59()); 
    		if(dataStating.getField60()!=null && !dataStating.getField60().isEmpty())
    		master.setField60(dataStating.getField60()); 
    		if(dataStating.getField61()!=null && !dataStating.getField61().isEmpty())
    		master.setField61(dataStating.getField61()); 
    		if(dataStating.getField62()!=null && !dataStating.getField62().isEmpty())
    		master.setField62(dataStating.getField62()); 
    		if(dataStating.getField63()!=null && !dataStating.getField63().isEmpty())
    		master.setField63(dataStating.getField63()); 
    		if(dataStating.getField64()!=null && !dataStating.getField64().isEmpty())
    		master.setField64(dataStating.getField64()); 
    		if(dataStating.getField65()!=null && !dataStating.getField65().isEmpty())
    		master.setField65(dataStating.getField65()); 
    		if(dataStating.getField66()!=null && !dataStating.getField66().isEmpty())
    		master.setField66(dataStating.getField66()); 
    		if(dataStating.getField67()!=null && !dataStating.getField67().isEmpty())
    		master.setField67(dataStating.getField67());
    		if(dataStating.getField68()!=null && !dataStating.getField68().isEmpty())
    		master.setField68(dataStating.getField68()); 
    		if(dataStating.getField69()!=null && !dataStating.getField69().isEmpty())
    		master.setField69(dataStating.getField69()); 
    		if(dataStating.getField70()!=null && !dataStating.getField70().isEmpty())
    		master.setField70(dataStating.getField70()); 
    		if(dataStating.getField71()!=null && !dataStating.getField71().isEmpty())
    		master.setField71(dataStating.getField71()); 
    		if(dataStating.getField72()!=null && !dataStating.getField72().isEmpty())
    		master.setField72(dataStating.getField72());
    		if(dataStating.getField73()!=null && !dataStating.getField73().isEmpty())
    		master.setField73(dataStating.getField73());
    		if(dataStating.getField74()!=null && !dataStating.getField74().isEmpty())
    		master.setField74(dataStating.getField74()); 
    		if(dataStating.getField75()!=null && !dataStating.getField75().isEmpty())
    		master.setField75(dataStating.getField75()); 
    		if(dataStating.getField76()!=null && !dataStating.getField76().isEmpty())
    		master.setField76(dataStating.getField76()); 
    		if(dataStating.getField77()!=null && !dataStating.getField77().isEmpty())
    		master.setField77(dataStating.getField77());
    		if(dataStating.getField78()!=null && !dataStating.getField78().isEmpty())
    		master.setField78(dataStating.getField78()); 
    		if(dataStating.getField79()!=null && !dataStating.getField79().isEmpty())
    		master.setField79(dataStating.getField79()); 
    		if(dataStating.getField80()!=null && !dataStating.getField80().isEmpty())
    		master.setField80(dataStating.getField80()); 
    		if(dataStating.getField81()!=null && !dataStating.getField81().isEmpty())
    		master.setField81(dataStating.getField81()); 
    		if(dataStating.getField82()!=null && !dataStating.getField82().isEmpty())
    		master.setField82(dataStating.getField82()); 
    		if(dataStating.getField83()!=null && !dataStating.getField83().isEmpty())
    		master.setField83(dataStating.getField83()); 
    		if(dataStating.getField84()!=null && !dataStating.getField84().isEmpty())
    		master.setField84(dataStating.getField84()); 
    		if(dataStating.getField85()!=null && !dataStating.getField85().isEmpty())
    		master.setField85(dataStating.getField85()); 
    		if(dataStating.getField86()!=null && !dataStating.getField84().isEmpty())
    		master.setField86(dataStating.getField86()); 
    		if(dataStating.getField87()!=null && !dataStating.getField87().isEmpty())
    		master.setField87(dataStating.getField87()); 
    		if(dataStating.getField88()!=null && !dataStating.getField88().isEmpty())
    		master.setField88(dataStating.getField88()); 
    		if(dataStating.getField89()!=null && !dataStating.getField89().isEmpty())
    		master.setField89(dataStating.getField89()); 
    		if(dataStating.getField90()!=null && !dataStating.getField90().isEmpty())
    		master.setField90(dataStating.getField90()); 
    		if(dataStating.getField91()!=null && !dataStating.getField91().isEmpty())
    		master.setField91(dataStating.getField91()); 
    		if(dataStating.getField92()!=null && !dataStating.getField92().isEmpty())
    		master.setField92(dataStating.getField92()); 
    		if(dataStating.getField93()!=null && !dataStating.getField93().isEmpty())
    		master.setField93(dataStating.getField93()); 
    		if(dataStating.getField94()!=null && !dataStating.getField94().isEmpty())
    		master.setField94(dataStating.getField94()); 
    		if(dataStating.getField95()!=null && !dataStating.getField95().isEmpty())
    		master.setField95(dataStating.getField95()); 
    		if(dataStating.getField96()!=null && !dataStating.getField96().isEmpty())
    		master.setField96(dataStating.getField96());
    		if(dataStating.getField97()!=null && !dataStating.getField97().isEmpty())
    		master.setField97(dataStating.getField97()); 
    		if(dataStating.getField98()!=null && !dataStating.getField98().isEmpty())
    		master.setField98(dataStating.getField98()); 
    		if(dataStating.getField99()!=null && !dataStating.getField99().isEmpty())
    		master.setField99(dataStating.getField99()); 
    		if(dataStating.getField100()!=null && !dataStating.getField100().isEmpty())
    		master.setField100(dataStating.getField100());
    		if(master!=null)
    			dataMasterlist.add(master);
    		//dataMasterRepository.save(master);
    	}
    	List<DataMaster> dtMaster=dataMasterRepository.save(dataMasterlist);
    	if(dataStatingList.size()==dtMaster.size())
    	{
    		dataStagingRepository.delete(dataStatingList);
    	}
    }
    
    

}
