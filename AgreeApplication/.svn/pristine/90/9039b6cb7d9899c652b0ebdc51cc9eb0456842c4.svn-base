<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd
                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <property name="now" value="now()" dbms="h2"/>

    <property name="now" value="now()" dbms="mysql"/>
    <property name="autoIncrement" value="true"/>

    <property name="floatType" value="float4" dbms="postgresql, h2"/>
    <property name="floatType" value="float" dbms="mysql, oracle, mssql"/>

    <!--
        Added the entity RuleGroupDetails.
    -->
    <changeSet id="20170628150614-1t" author="jhipster">
        <createTable tableName="t_rule_group_details">
            <column name="id" type="bigint" autoIncrement="${autoIncrement}">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="rule_group_id" type="bigint">
                <constraints nullable="true" />
            </column>

            <column name="rule_id" type="bigint">
                <constraints nullable="true" />
            </column>

            <column name="priority" type="integer">
                <constraints nullable="true" />
            </column>

            <column name="created_by" type="bigint">
                <constraints nullable="true" />
            </column>

            <column name="last_updated_by" type="bigint">
                <constraints nullable="true" />
            </column>

            <column name="creation_date" type="timestamp">
                <constraints nullable="true" />
            </column>

            <column name="last_updated_date" type="timestamp">
                <constraints nullable="true" />
            </column>

            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here, do not remove-->
        </createTable>
        <dropDefaultValue tableName="t_rule_group_details" columnName="creation_date" columnDataType="datetime"/>
        <dropDefaultValue tableName="t_rule_group_details" columnName="last_updated_date" columnDataType="datetime"/>
        
    </changeSet>
    
    
    <changeSet id="addingTenantIdColumn" author="ravali">
		<addColumn tableName="t_rule_group_details">
			<column name="tenant_id" type="bigint" />
		</addColumn>
		</changeSet>
		
		<changeSet id="addingEnableFlagColumn" author="ravali">
		<addColumn tableName="t_rule_group_details">
			<column name="enabled_flag" type="bit" />
		</addColumn>
		</changeSet>
		
		
		<!-- <changeSet author="Swetha" id="reconRuleGroupsView-1">
    <createView
            replaceIfExists="true"
            viewName="v_rec_rule_groups">select id, tenant_id, name, start_date, end_date, enabled_flag, created_by, last_updated_by, creation_date, last_updated_date, rule_purpose from t_rule_group where rule_purpose='RECONCILIATION' order by id </createView>
</changeSet>
			
			
			<changeSet author="Swetha" id="accRuleGroupsView-1">
    <createView
            replaceIfExists="true"
            viewName="v_acc_rule_groups">select id, tenant_id, name, start_date, end_date, enabled_flag, created_by, last_updated_by, creation_date, last_updated_date, rule_purpose from t_rule_group where rule_purpose='ACCOUNTING' order by id </createView>
</changeSet>
		<changeSet author="ravali" id="appRuleGroupsView-1">
    <createView
            replaceIfExists="true"
            viewName="v_app_rule_groups">select id, tenant_id, name, start_date, end_date, enabled_flag, created_by, last_updated_by, creation_date, last_updated_date, rule_purpose from t_rule_group where rule_purpose='APPROVALS' order by id </createView>
</changeSet>


	<changeSet author="ravali" id="recRulegroupsDetails">
    <createView
            replaceIfExists="true"
            viewName="v_rec_rule_group_details">SELECT 
        rg.id AS id,
        rg.rule_group_id AS rule_group_id,
        rg.rule_id AS rule_id,
        rg.priority AS priority,
        rg.created_by AS created_by,
        rg.last_updated_by AS last_updated_by,
        rg.creation_date AS creation_date,
        rg.last_updated_date AS last_updated_date,
        rg.tenant_id AS tenant_id,
        rg.enabled_flag AS enabled_flag,
        g.name AS rule_group_name,
        r.rule_code AS rule_name,
        g.rule_purpose AS rule_purpose,
        r.start_date AS start_date,
        r.end_date AS end_date
    FROM
        ((t_rules r
        JOIN t_rule_group g)
        JOIN t_rule_group_details rg)
    WHERE
        ((r.id = rg.rule_id)
            AND (g.id = rg.rule_group_id)
            AND (g.rule_purpose = 'RECONCILIATION'))
             ORDER BY rg.rule_id
    </createView>
</changeSet>




	
			<changeSet author="ravali" id="accRuleGroupsDetailsView">
    <createView
            replaceIfExists="true"
            viewName="v_acc_rule_group_details">SELECT 
        rg.id AS id,
        rg.rule_group_id AS rule_group_id,
        rg.rule_id AS rule_id,
        rg.priority AS priority,
        rg.created_by AS created_by,
        rg.last_updated_by AS last_updated_by,
        rg.creation_date AS creation_date,
        rg.last_updated_date AS last_updated_date,
        rg.tenant_id AS tenant_id,
        rg.enabled_flag AS enabled_flag,
        g.name AS rule_group_name,
        r.rule_code AS rule_name,
        g.rule_purpose AS rule_purpose
    FROM
        ((t_rules r
        JOIN t_rule_group g)
        JOIN t_rule_group_details rg)
    WHERE
        ((r.id = rg.rule_id)
            AND (g.id = rg.rule_group_id)
            AND (g.rule_purpose = 'ACCOUNTING'))
    ORDER BY rg.rule_id</createView>
</changeSet>

			
			<changeSet author="ravali" id="v_app_rule_group_details-1">
    <createView
            replaceIfExists="true"
            viewName="v_app_rule_group_details">SELECT 
        rg.id AS id,
        rg.rule_group_id AS rule_group_id,
        rg.rule_id AS rule_id,
        rg.priority AS priority,
        rg.created_by AS created_by,
        rg.last_updated_by AS last_updated_by,
        rg.creation_date AS creation_date,
        rg.last_updated_date AS last_updated_date,
        rg.tenant_id AS tenant_id,
        rg.enabled_flag AS enabled_flag,
        g.name AS rule_group_name,
        r.rule_code AS rule_name,
        g.rule_purpose AS rule_purpose
    FROM
        ((t_rules r
        JOIN t_rule_group g)
        JOIN t_rule_group_details rg)
    WHERE
        ((r.id = rg.rule_id)
            AND (g.id = rg.rule_group_id)
            AND (g.rule_purpose = 'APPROVALS'))
    ORDER BY rg.rule_id</createView>
</changeSet>



<changeSet author="ravali" id="ruleGrpDetails">
    <createView
            replaceIfExists="true"
            viewName="v_rule_group_details">SELECT 
        rg.id AS id,
        rg.rule_group_id AS rule_group_id,
        rg.rule_id AS rule_id,
        rg.priority AS priority,
        rg.created_by AS created_by,
        rg.last_updated_by AS last_updated_by,
        rg.creation_date AS creation_date,
        rg.last_updated_date AS last_updated_date,
        rg.tenant_id AS tenant_id,
        rg.enabled_flag AS enabled_flag,
        g.name AS rule_group_name,
        r.rule_code AS rule_name,
        g.rule_purpose AS rule_purpose
    FROM
        ((t_rules r
        JOIN t_rule_group g)
        JOIN t_rule_group_details rg)
    WHERE
        ((r.id = rg.rule_id)
            AND (g.id = rg.rule_group_id))
    ORDER BY rg.rule_id
    </createView>
</changeSet>

<changeSet author="ravali" id="ruleToDV">
    <createView
            replaceIfExists="true"
            viewName="v_rec_rule_to_dataviews"> SELECT 
        `r`.`id` AS `rule_id`,
        `r`.`tenant_id` AS `tenant_id`,
        `r`.`rule_code` AS `rule_code`,
        `r`.`start_date` AS `start_date`,
        `r`.`end_date` AS `end_date`,
        `r`.`enabled_flag` AS `enabled_flag`,
        `r`.`created_by` AS `created_by`,
        `r`.`last_updated_by` AS `last_updated_by`,
        `r`.`creation_date` AS `creation_date`,
        `r`.`last_updated_date` AS `last_updated_date`,
        `v`.`data_view_disp_name` AS `data_view_disp_name`,
        `v`.`id` AS `data_view_id`
    FROM
        (`t_rules` `r`
        JOIN `t_data_views` `v`)
    WHERE
        ((`r`.`source_data_view_id` = `v`.`id`)
            OR (`r`.`target_data_view_id` = `v`.`id`))
    ORDER BY `r`.`creation_date`
    </createView>
</changeSet>


<changeSet author="ravali" id="dvToColumns">
    <createView
            replaceIfExists="true"
            viewName="v_rec_dataview_to_columns"> SELECT 
        `v`.`id` AS `data_view_id`,
        `v`.`tenant_id` AS `tenant_id`,
        `v`.`data_view_disp_name` AS `data_view_disp_name`,
        `v`.`start_date` AS `start_date`,
        `v`.`end_date` AS `end_date`,
        `v`.`enabled_flag` AS `enabled_flag`,
        `v`.`created_by` AS `created_by`,
        `v`.`last_updated_by` AS `last_updated_by`,
        `v`.`creation_date` AS `creation_date`,
        `v`.`last_updated_date` AS `last_updated_date`,
        `vc`.`column_name` AS `column_name`,
        `vc`.`id` AS `view_col_id`,
        `vc`.`ref_dv_column` AS `ref_dv_column`
    FROM
        (`t_data_views` `v`
        JOIN `t_data_views_columns` `vc`)
    WHERE
        (`v`.`id` = `vc`.`id`)
    ORDER BY `vc`.`creation_date`
    </createView>
</changeSet>




<changeSet author="ravali" id="ViewsFroApprovalgrpsAndJobReferences">
    <createView
            replaceIfExists="true"
            viewName="v_acc_app_rule_groups">  SELECT 
        `ap`.`id` AS `ap_id`,
        `ap`.`name` AS `ap_name`,
        `rec`.`id` AS `rec_id`,
        `rec`.`name` AS `rec_name`,
        `ap`.`tenant_id` AS `tenant_id`,
        `ap`.`enabled_flag` AS `enabled_flag`,
        `ap`.`start_date` AS `start_date`,
        `ap`.`end_date` AS `end_date`
    FROM
        (((SELECT 
            *
        FROM
            `t_rule_group`
        WHERE
            (`t_rule_group`.`rule_purpose` = 'ACCOUNTING'))) `rec`
        LEFT JOIN (SELECT 
           *
        FROM
           `t_rule_group`
        WHERE
            (`t_rule_group`.`rule_purpose` = 'APPROVALS')) `ap` ON ((`ap`.`id` = `rec`.`appr_rule_grp_id`)))
    WHERE
        (`ap`.`name` IS NOT NULL)
    </createView>





    <createView
            replaceIfExists="true"
            viewName="v_recon_app_rule_groups"> SELECT 
        `ap`.`id` AS `ap_id`,
        `ap`.`name` AS `ap_name`,
        `rec`.`id` AS `rec_id`,
        `rec`.`name` AS `rec_name`,
        `ap`.`tenant_id` AS `tenant_id`,
        `ap`.`enabled_flag` AS `enabled_flag`,
        `ap`.`start_date` AS `start_date`,
        `ap`.`end_date` AS `end_date`
    FROM
        (((SELECT 
     *
        FROM
            `t_rule_group`
        WHERE
            (`t_rule_group`.`rule_purpose` = 'RECONCILIATION'))) `rec`
        LEFT JOIN (SELECT 
            *
        FROM
            `t_rule_group`
        WHERE
            (`t_rule_group`.`rule_purpose` = 'APPROVALS')) `ap` ON ((`ap`.`id` = `rec`.`appr_rule_grp_id`)))
    WHERE
        (`ap`.`name` IS NOT NULL)
    </createView>
    
    
    
        <createView
            replaceIfExists="true"
            viewName="v_recon_job_refereces">  
    (SELECT DISTINCT
        `r`.`recon_job_reference` AS `recon_job_reference`,
        `app`.`ap_id` AS `ap_id`,
        `app`.`ap_name` AS `ap_name`,
        `app`.`rec_id` AS `rec_id`,
        `app`.`rec_name` AS `rec_name`,
        `app`.`enabled_flag` AS `enabled_flag`,
        `app`.`start_date` AS `start_date`,
        `app`.`end_date` AS `end_date`,
        `app`.`tenant_id` AS `tenant_id`
    FROM
        (((SELECT 
            `ap`.`id` AS `ap_id`,
                `ap`.`name` AS `ap_name`,
                `rec`.`id` AS `rec_id`,
                `rec`.`name` AS `rec_name`,
                `ap`.`enabled_flag` AS `enabled_flag`,
                `ap`.`start_date` AS `start_date`,
                `ap`.`end_date` AS `end_date`,
                `ap`.`tenant_id` AS `tenant_id`
        FROM
            (((SELECT 
           *
        FROM
            `t_rule_group`
        WHERE
            (`t_rule_group`.`rule_purpose` = 'RECONCILIATION'))) `rec`
        LEFT JOIN (SELECT 
           *
        FROM
            `t_rule_group`
        WHERE
            (`t_rule_group`.`rule_purpose` = 'APPROVALS')) `ap` ON ((`ap`.`id` = `rec`.`appr_rule_grp_id`)))
        WHERE
            (`ap`.`name` IS NOT NULL))) `app`
        JOIN `t_reconciliation_result` `r`)
    WHERE
        (`app`.`rec_id` = `r`.`reconciliation_rule_group_id`))
    </createView>
    
    
    
    
    
       <createView
            replaceIfExists="true"
            viewName="v_acc_job_refereces">    (SELECT DISTINCT
        `asum`.`job_reference` AS `job_reference`,
        `app`.`ap_id` AS `ap_id`,
        `app`.`ap_name` AS `ap_name`,
        `app`.`acc_id` AS `acc_id`,
        `app`.`acc_name` AS `acc_name`,
        `app`.`enabled_flag` AS `enabled_flag`,
        `app`.`start_date` AS `start_date`,
        `app`.`end_date` AS `end_date`,
        `app`.`tenant_id` AS `tenant_id`
    FROM
        (((SELECT 
            `ap`.`id` AS `ap_id`,
                `ap`.`name` AS `ap_name`,
                `acc`.`id` AS `acc_id`,
                `acc`.`name` AS `acc_name`,
                `ap`.`enabled_flag` AS `enabled_flag`,
                `ap`.`start_date` AS `start_date`,
                `ap`.`end_date` AS `end_date`,
                `ap`.`tenant_id` AS `tenant_id`
        FROM
            (((SELECT 
           *
        FROM
           `t_rule_group`
        WHERE
            (`t_rule_group`.`rule_purpose` = 'ACCOUNTING'))) `acc`
        LEFT JOIN (SELECT 
           *
        FROM
            `t_rule_group`
        WHERE
            (`t_rule_group`.`rule_purpose` = 'APPROVALS')) `ap` ON ((`ap`.`id` = `acc`.`appr_rule_grp_id`)))
        WHERE
            (`ap`.`name` IS NOT NULL))) `app`
        JOIN `t_accounting_data` `asum`)
    WHERE
        (`app`.`acc_id` = `asum`.`acct_group_id`))
    </createView>
    
    
</changeSet> -->
    
</databaseChangeLog>
