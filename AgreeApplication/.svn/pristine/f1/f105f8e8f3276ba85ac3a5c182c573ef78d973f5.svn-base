package com.nspl.app.service;

import io.github.jhipster.config.JHipsterProperties;
import io.jsonwebtoken.Header;
import io.jsonwebtoken.Jwts;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;

import com.nspl.app.web.rest.ApprovalGroupMembersResource;

@Service
public class UserJdbcService {
	  private final Logger log = LoggerFactory.getLogger(UserJdbcService.class);
	
	@Inject
	private Environment env;
	
	@Inject
    JHipsterProperties jHipsterProperties;
	
	public HashMap jdbcConnc(Long userId) throws SQLException, ClassNotFoundException {
		String dbUrl=env.getProperty("spring.datasource.url");
		String[] parts=dbUrl.split("[\\s@&?$+-]+");
		//	String host = parts[0].split("/")[2].split(":")[0];
		//	String schemaName="agree_gateway_2909";
		String schemaName= env.getProperty("spring.datasource.gatewayschema");
		String userName = env.getProperty("spring.datasource.username");
		String password = env.getProperty("spring.datasource.password");
		String jdbcDriver = env.getProperty("spring.datasource.jdbcdriver");
		HashMap map=new HashMap();
		Connection conn = null;
		Statement stmt = null;
		ResultSet result2=null;
		try{ 
			Class.forName(jdbcDriver);
			conn = DriverManager.getConnection(dbUrl, userName, password);
			log.info("Connected database successfully...");
			stmt = conn.createStatement();
			result2=stmt.executeQuery("select * from "+schemaName+".jhi_user where id="+userId);

			String loginName="";
			String assigneeName="";

			while(result2.next())
			{
				if(result2.getString("login")!=null)
					loginName=result2.getString("login");
				if(result2.getString("first_name")!=null)
					assigneeName=assigneeName+result2.getString("first_name");
				if(result2.getString("last_name")!=null)
					assigneeName=assigneeName+" "+result2.getString("last_name");
				if(result2.getString("business_title")!=null)
					map.put("businessTitle", result2.getString("business_title"));
				if(result2.getString("image")!=null)
					map.put("imgUrl", result2.getString("image"));

			}
			map.put("loginName", loginName);
			map.put("assigneeName", assigneeName);
		}
		catch(SQLException se){

		} 
		finally{
			if(conn!=null)
				conn.close();
			if(stmt!=null)
				stmt.close();
			if(result2!=null)
				result2.close();

		}
		return map;
	}
	
	/**
	 * Author: Swetha
	 * Function to retrieve UserId and TenantId from jwt token
	 * @param request
	 * @return
	 */
	public HashMap getuserInfoFromToken(HttpServletRequest request){
		
		HashMap userInfo=new HashMap();
		
		Map<String, String> reqHdrInfo = new HashMap<String, String>();
        Enumeration headerNames = request.getHeaderNames();
        while (headerNames.hasMoreElements()) {
            String key = (String) headerNames.nextElement();
            String value = request.getHeader(key);
            reqHdrInfo.put(key, value);
        }
        
        //log.info("reqHdrInfo: "+reqHdrInfo);
        
        String authVal=reqHdrInfo.get("Authorization");
        //log.info("authVal: "+authVal);
        
        String authToken=authVal.replaceFirst("Bearer ", "");
        //log.info("authToken: "+authToken);
       
        String secretKey=jHipsterProperties.getSecurity().getAuthentication().getJwt().getSecret();
        Header headerMap=Jwts.parser().setSigningKey(secretKey).parseClaimsJws(authToken).getHeader();
        //System.out.println("headerMap from validateToken: "+headerMap.toString());
        String tenantId=Jwts.parser().setSigningKey(secretKey).parseClaimsJws(authToken).getHeader().get("TenantId").toString();
        String userId=Jwts.parser().setSigningKey(secretKey).parseClaimsJws(authToken).getHeader().get("userId").toString();
        //System.out.print("tenantId from validateToken: "+tenantId);
        
        userInfo.put("tenantId", tenantId);
        userInfo.put("userId", userId);
		
		return userInfo;
		
		
	}
	
	public HashMap getUserInfo(Long userId) throws SQLException, ClassNotFoundException {
		String dbUrl=env.getProperty("spring.datasource.gatewayUrl");
		String[] parts=dbUrl.split("[\\s@&?$+-]+");
		String schemaName= env.getProperty("spring.datasource.gatewayschema");
		//log.info("schemaName: "+schemaName);
		String userName = env.getProperty("spring.datasource.username");
		String password = env.getProperty("spring.datasource.password");
		String jdbcDriver = env.getProperty("spring.datasource.jdbcdriver");
		HashMap map=new HashMap();
		Connection conn = null;
		Statement stmt = null;
		ResultSet result2=null;
		try{ 
			Class.forName(jdbcDriver);
			conn = DriverManager.getConnection(dbUrl, userName, password);
			log.info("Connected database successfully...");
			stmt = conn.createStatement();
			result2=stmt.executeQuery("select * from "+schemaName+".jhi_user where id="+userId);

			String loginName="";
			String assigneeName="";

			while(result2.next())
			{
				if(result2.getString("login")!=null)
					loginName=result2.getString("login");
				if(result2.getString("first_name")!=null)
					assigneeName=assigneeName+result2.getString("first_name");
				if(result2.getString("last_name")!=null)
					assigneeName=assigneeName+" "+result2.getString("last_name");
				if(result2.getString("business_title")!=null)
					map.put("businessTitle", result2.getString("business_title"));
				if(result2.getString("image")!=null)
					map.put("imgUrl", result2.getString("image"));

			}
			map.put("loginName", loginName);
			map.put("assigneeName", assigneeName);
			//log.info("map: "+map);
		}
		catch(SQLException se){

		} 
		finally{
			if(conn!=null)
				conn.close();
			if(stmt!=null)
				stmt.close();
			if(result2!=null)
				result2.close();

		}
		return map;
	}
}
