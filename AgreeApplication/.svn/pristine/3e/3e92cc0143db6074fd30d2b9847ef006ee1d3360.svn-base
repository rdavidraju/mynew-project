package com.nspl.app.web.rest;

import com.nspl.app.AgreeApplicationApp;

import com.nspl.app.domain.ProgParametersSets;
import com.nspl.app.repository.ProgParametersSetsRepository;
import com.nspl.app.web.rest.errors.ExceptionTranslator;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDate;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.time.ZoneOffset;
import java.time.ZoneId;
import java.util.List;

import static com.nspl.app.web.rest.TestUtil.sameInstant;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the ProgParametersSetsResource REST controller.
 *
 * @see ProgParametersSetsResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = AgreeApplicationApp.class)
public class ProgParametersSetsResourceIntTest {

    private static final Long DEFAULT_PROGRAM_ID = 1L;
    private static final Long UPDATED_PROGRAM_ID = 2L;

    private static final String DEFAULT_PARAMETER_NAME = "AAAAAAAAAA";
    private static final String UPDATED_PARAMETER_NAME = "BBBBBBBBBB";

    private static final String DEFAULT_STATUS = "AAAAAAAAAA";
    private static final String UPDATED_STATUS = "BBBBBBBBBB";

    private static final LocalDate DEFAULT_START_DATE = LocalDate.ofEpochDay(0L);
    private static final LocalDate UPDATED_START_DATE = LocalDate.now(ZoneId.systemDefault());

    private static final LocalDate DEFAULT_END_DATE = LocalDate.ofEpochDay(0L);
    private static final LocalDate UPDATED_END_DATE = LocalDate.now(ZoneId.systemDefault());

    private static final Long DEFAULT_CREATED_BY = 1L;
    private static final Long UPDATED_CREATED_BY = 2L;

    private static final Long DEFAULT_LAST_UPDATED_BY = 1L;
    private static final Long UPDATED_LAST_UPDATED_BY = 2L;

    private static final ZonedDateTime DEFAULT_CREATION_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_CREATION_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    private static final ZonedDateTime DEFAULT_LAST_UPDATION_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_LAST_UPDATION_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    @Autowired
    private ProgParametersSetsRepository progParametersSetsRepository;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restProgParametersSetsMockMvc;

    private ProgParametersSets progParametersSets;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        ProgParametersSetsResource progParametersSetsResource = new ProgParametersSetsResource(progParametersSetsRepository);
        this.restProgParametersSetsMockMvc = MockMvcBuilders.standaloneSetup(progParametersSetsResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static ProgParametersSets createEntity(EntityManager em) {
        ProgParametersSets progParametersSets = new ProgParametersSets()
            .programId(DEFAULT_PROGRAM_ID)
            .parameterName(DEFAULT_PARAMETER_NAME)
            .status(DEFAULT_STATUS)
            .startDate(DEFAULT_START_DATE)
            .endDate(DEFAULT_END_DATE)
            .createdBy(DEFAULT_CREATED_BY)
            .lastUpdatedBy(DEFAULT_LAST_UPDATED_BY)
            .creationDate(DEFAULT_CREATION_DATE)
            .lastUpdationDate(DEFAULT_LAST_UPDATION_DATE);
        return progParametersSets;
    }

    @Before
    public void initTest() {
        progParametersSets = createEntity(em);
    }

    @Test
    @Transactional
    public void createProgParametersSets() throws Exception {
        int databaseSizeBeforeCreate = progParametersSetsRepository.findAll().size();

        // Create the ProgParametersSets
        restProgParametersSetsMockMvc.perform(post("/api/prog-parameters-sets")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(progParametersSets)))
            .andExpect(status().isCreated());

        // Validate the ProgParametersSets in the database
        List<ProgParametersSets> progParametersSetsList = progParametersSetsRepository.findAll();
        assertThat(progParametersSetsList).hasSize(databaseSizeBeforeCreate + 1);
        ProgParametersSets testProgParametersSets = progParametersSetsList.get(progParametersSetsList.size() - 1);
        assertThat(testProgParametersSets.getProgramId()).isEqualTo(DEFAULT_PROGRAM_ID);
        assertThat(testProgParametersSets.getParameterName()).isEqualTo(DEFAULT_PARAMETER_NAME);
        assertThat(testProgParametersSets.getStatus()).isEqualTo(DEFAULT_STATUS);
        assertThat(testProgParametersSets.getStartDate()).isEqualTo(DEFAULT_START_DATE);
        assertThat(testProgParametersSets.getEndDate()).isEqualTo(DEFAULT_END_DATE);
        assertThat(testProgParametersSets.getCreatedBy()).isEqualTo(DEFAULT_CREATED_BY);
        assertThat(testProgParametersSets.getLastUpdatedBy()).isEqualTo(DEFAULT_LAST_UPDATED_BY);
        assertThat(testProgParametersSets.getCreationDate()).isEqualTo(DEFAULT_CREATION_DATE);
        assertThat(testProgParametersSets.getLastUpdationDate()).isEqualTo(DEFAULT_LAST_UPDATION_DATE);
    }

    @Test
    @Transactional
    public void createProgParametersSetsWithExistingId() throws Exception {
        int databaseSizeBeforeCreate = progParametersSetsRepository.findAll().size();

        // Create the ProgParametersSets with an existing ID
        progParametersSets.setId(1L);

        // An entity with an existing ID cannot be created, so this API call must fail
        restProgParametersSetsMockMvc.perform(post("/api/prog-parameters-sets")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(progParametersSets)))
            .andExpect(status().isBadRequest());

        // Validate the Alice in the database
        List<ProgParametersSets> progParametersSetsList = progParametersSetsRepository.findAll();
        assertThat(progParametersSetsList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    public void getAllProgParametersSets() throws Exception {
        // Initialize the database
        progParametersSetsRepository.saveAndFlush(progParametersSets);

        // Get all the progParametersSetsList
        restProgParametersSetsMockMvc.perform(get("/api/prog-parameters-sets?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(progParametersSets.getId().intValue())))
            .andExpect(jsonPath("$.[*].programId").value(hasItem(DEFAULT_PROGRAM_ID.intValue())))
            .andExpect(jsonPath("$.[*].parameterName").value(hasItem(DEFAULT_PARAMETER_NAME.toString())))
            .andExpect(jsonPath("$.[*].status").value(hasItem(DEFAULT_STATUS.toString())))
            .andExpect(jsonPath("$.[*].startDate").value(hasItem(DEFAULT_START_DATE.toString())))
            .andExpect(jsonPath("$.[*].endDate").value(hasItem(DEFAULT_END_DATE.toString())))
            .andExpect(jsonPath("$.[*].createdBy").value(hasItem(DEFAULT_CREATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].lastUpdatedBy").value(hasItem(DEFAULT_LAST_UPDATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].creationDate").value(hasItem(sameInstant(DEFAULT_CREATION_DATE))))
            .andExpect(jsonPath("$.[*].lastUpdationDate").value(hasItem(sameInstant(DEFAULT_LAST_UPDATION_DATE))));
    }

    @Test
    @Transactional
    public void getProgParametersSets() throws Exception {
        // Initialize the database
        progParametersSetsRepository.saveAndFlush(progParametersSets);

        // Get the progParametersSets
        restProgParametersSetsMockMvc.perform(get("/api/prog-parameters-sets/{id}", progParametersSets.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.id").value(progParametersSets.getId().intValue()))
            .andExpect(jsonPath("$.programId").value(DEFAULT_PROGRAM_ID.intValue()))
            .andExpect(jsonPath("$.parameterName").value(DEFAULT_PARAMETER_NAME.toString()))
            .andExpect(jsonPath("$.status").value(DEFAULT_STATUS.toString()))
            .andExpect(jsonPath("$.startDate").value(DEFAULT_START_DATE.toString()))
            .andExpect(jsonPath("$.endDate").value(DEFAULT_END_DATE.toString()))
            .andExpect(jsonPath("$.createdBy").value(DEFAULT_CREATED_BY.intValue()))
            .andExpect(jsonPath("$.lastUpdatedBy").value(DEFAULT_LAST_UPDATED_BY.intValue()))
            .andExpect(jsonPath("$.creationDate").value(sameInstant(DEFAULT_CREATION_DATE)))
            .andExpect(jsonPath("$.lastUpdationDate").value(sameInstant(DEFAULT_LAST_UPDATION_DATE)));
    }

    @Test
    @Transactional
    public void getNonExistingProgParametersSets() throws Exception {
        // Get the progParametersSets
        restProgParametersSetsMockMvc.perform(get("/api/prog-parameters-sets/{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateProgParametersSets() throws Exception {
        // Initialize the database
        progParametersSetsRepository.saveAndFlush(progParametersSets);
        int databaseSizeBeforeUpdate = progParametersSetsRepository.findAll().size();

        // Update the progParametersSets
        ProgParametersSets updatedProgParametersSets = progParametersSetsRepository.findOne(progParametersSets.getId());
        updatedProgParametersSets
            .programId(UPDATED_PROGRAM_ID)
            .parameterName(UPDATED_PARAMETER_NAME)
            .status(UPDATED_STATUS)
            .startDate(UPDATED_START_DATE)
            .endDate(UPDATED_END_DATE)
            .createdBy(UPDATED_CREATED_BY)
            .lastUpdatedBy(UPDATED_LAST_UPDATED_BY)
            .creationDate(UPDATED_CREATION_DATE)
            .lastUpdationDate(UPDATED_LAST_UPDATION_DATE);

        restProgParametersSetsMockMvc.perform(put("/api/prog-parameters-sets")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(updatedProgParametersSets)))
            .andExpect(status().isOk());

        // Validate the ProgParametersSets in the database
        List<ProgParametersSets> progParametersSetsList = progParametersSetsRepository.findAll();
        assertThat(progParametersSetsList).hasSize(databaseSizeBeforeUpdate);
        ProgParametersSets testProgParametersSets = progParametersSetsList.get(progParametersSetsList.size() - 1);
        assertThat(testProgParametersSets.getProgramId()).isEqualTo(UPDATED_PROGRAM_ID);
        assertThat(testProgParametersSets.getParameterName()).isEqualTo(UPDATED_PARAMETER_NAME);
        assertThat(testProgParametersSets.getStatus()).isEqualTo(UPDATED_STATUS);
        assertThat(testProgParametersSets.getStartDate()).isEqualTo(UPDATED_START_DATE);
        assertThat(testProgParametersSets.getEndDate()).isEqualTo(UPDATED_END_DATE);
        assertThat(testProgParametersSets.getCreatedBy()).isEqualTo(UPDATED_CREATED_BY);
        assertThat(testProgParametersSets.getLastUpdatedBy()).isEqualTo(UPDATED_LAST_UPDATED_BY);
        assertThat(testProgParametersSets.getCreationDate()).isEqualTo(UPDATED_CREATION_DATE);
        assertThat(testProgParametersSets.getLastUpdationDate()).isEqualTo(UPDATED_LAST_UPDATION_DATE);
    }

    @Test
    @Transactional
    public void updateNonExistingProgParametersSets() throws Exception {
        int databaseSizeBeforeUpdate = progParametersSetsRepository.findAll().size();

        // Create the ProgParametersSets

        // If the entity doesn't have an ID, it will be created instead of just being updated
        restProgParametersSetsMockMvc.perform(put("/api/prog-parameters-sets")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(progParametersSets)))
            .andExpect(status().isCreated());

        // Validate the ProgParametersSets in the database
        List<ProgParametersSets> progParametersSetsList = progParametersSetsRepository.findAll();
        assertThat(progParametersSetsList).hasSize(databaseSizeBeforeUpdate + 1);
    }

    @Test
    @Transactional
    public void deleteProgParametersSets() throws Exception {
        // Initialize the database
        progParametersSetsRepository.saveAndFlush(progParametersSets);
        int databaseSizeBeforeDelete = progParametersSetsRepository.findAll().size();

        // Get the progParametersSets
        restProgParametersSetsMockMvc.perform(delete("/api/prog-parameters-sets/{id}", progParametersSets.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate the database is empty
        List<ProgParametersSets> progParametersSetsList = progParametersSetsRepository.findAll();
        assertThat(progParametersSetsList).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(ProgParametersSets.class);
    }
}
