package com.nspl.app.service;

import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.nspl.app.domain.RuleGroup;
import com.nspl.app.repository.RuleGroupRepository;
import com.nspl.app.web.rest.dto.ErrorReport;
import com.nspl.app.web.rest.dto.RuleGroupDTO;
import com.nspl.app.web.rest.dto.RulesDTO;

@Service
public class RuleGroupService {
	private final Logger log = LoggerFactory.getLogger(FileService.class);
	
	
	@Inject
	RuleGroupRepository ruleGroupRepository;
	
	@Inject
	RuleService ruleService;
	
	 @Inject
		OozieService oozieService;
	
	public List<ErrorReport> postRulegroup(RuleGroupDTO ruleGroupDTO)
	{
		Long tenantId = 0L;
    	Long userId = 0L;
    	List<ErrorReport> errorReport=new ArrayList<ErrorReport>();
		RuleGroup ruleGroup=new RuleGroup();
    	if(ruleGroupDTO.getId() != null)
    	{
    		log.info("group already exists so edit");
    		ruleGroup.setId(ruleGroupDTO.getId());
    	}
    	else
    	{

    	}
    	if(ruleGroupDTO.getName()!=null && !ruleGroupDTO.getName().isEmpty())
    		ruleGroup.setName(ruleGroupDTO.getName());
    	if(ruleGroupDTO.getRulePurpose() != null && !ruleGroupDTO.getRulePurpose().isEmpty())
    		ruleGroup.setRulePurpose(ruleGroupDTO.getRulePurpose());
    	if(ruleGroupDTO.getStartDate()!=null)
    		ruleGroup.setStartDate(ruleGroupDTO.getStartDate().plusDays(1));
    	if(ruleGroupDTO.getEndDate()!=null)
    		ruleGroup.setEndDate(ruleGroupDTO.getEndDate().plusDays(1));
    	ruleGroup.setEnabledFlag(true);
    	if(ruleGroupDTO != null && ruleGroupDTO.getTenantId() != null)
    	{
    		tenantId = ruleGroupDTO.getTenantId();
    	}
    	if(ruleGroupDTO != null && ruleGroupDTO.getCreatedBy() != null)
    	{
    		userId = ruleGroupDTO.getCreatedBy();
    	}
    	if(ruleGroupDTO.getId() == null || ruleGroupDTO.getId() == 0 || ruleGroupDTO.getId().equals(""))
    	{
    		ruleGroup.setCreatedBy(ruleGroupDTO.getCreatedBy());
    		ruleGroup.setCreationDate(ZonedDateTime.now());
    	}
    	ruleGroup.setLastUpdatedBy(ruleGroupDTO.getCreatedBy());
    	ruleGroup.setLastUpdatedDate(ZonedDateTime.now());
    	ruleGroup.setTenantId(tenantId);

    	RuleGroup newGrp=new RuleGroup();
    	if(ruleGroupDTO.getName()!=null)
    	{
    		newGrp=ruleGroupRepository.save(ruleGroup);
    	}
    	
    	if(newGrp!=null && newGrp.getId()!=null)
    	{
    		errorReport=ruleService.postRules(ruleGroupDTO.getRules(), newGrp);
			//As adhoc rule will be only one 
			//check if the got rule list has adhoc rule
			//if yes=> call next process after creation
			for(int i =0;i<ruleGroupDTO.getRules().size();i++)
			{
				RulesDTO ruleDTO = new RulesDTO();
				ruleDTO = ruleGroupDTO.getRules().get(i);
				if(ruleDTO.getRule() != null && ruleDTO.getRule().getRuleType() != null && ruleDTO.getRule().getRuleType().contains("ADHOC"))
				{
					//fetch error report of adhoc rule for id
					Long ruleId = 0L; 
					if(errorReport.get(0).getTaskName().contains("Rule Group Save"))
					{
						if(errorReport.get(0).getSubTasksList().size() > 0)
						{
							if(errorReport.get(0).getSubTasksList().get(0).getTaskName().contains("Save Rule"))
							{
								ruleId =Long.valueOf( errorReport.get(0).getSubTasksList().get(errorReport.get(0).getSubTasksList().size()-1).getDetails());
								log.info("got rule id with"+ruleId);
								//call next process
								HashMap parameterSet = new HashMap<>();
								parameterSet.put("param1",ruleGroupDTO.getId());
								parameterSet.put("param2",ruleId);
								log.info("ruleGroupDTO.getLastUpdatedby() :"+ruleGroupDTO.getLastUpdatedBy());
								ResponseEntity response= oozieService.jobIntiateForAcctAndRec(ruleGroupDTO.getTenantId(), ruleGroupDTO.getLastUpdatedBy(), "Reconcilation", parameterSet);
								ErrorReport jobInitiation=new ErrorReport();
								jobInitiation.setTaskName("Job Initiation");
												
								log.info("response.getBody() :"+response.getBody());
								String status=response.getBody().toString().substring(8).replaceAll("\\}", "");
								log.info("status :"+status);
								log.info("response.getstatusValue :"+response.getStatusCodeValue());
								
								
								jobInitiation.setTaskStatus(status);
								errorReport.add(jobInitiation);
								
							}
							else
							{
								log.info("Save Rule doesnt exist");
							}
						}
						else
						{
							log.info("getSubTasksList is empty");
						}
					}
					else
					{
						log.info("Rule Group Save doesnt exist");
					}
					 
				}
				else
				{
					log.info("no adhoc rule");
				}
			}
		
    		
    	}
		return errorReport;
    	
    	

	}
	
	
	
	

}
