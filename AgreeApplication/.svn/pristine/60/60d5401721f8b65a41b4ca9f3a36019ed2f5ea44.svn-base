package com.nspl.app.jbpm.web.rest;

//import io.gatling.core.json.JSON;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;

import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.IteratorUtils;
import org.joda.time.DateTime;
import org.kie.api.runtime.KieSession;
import org.kie.api.runtime.manager.RuntimeEngine;
import org.kie.api.runtime.manager.RuntimeManager;
import org.kie.api.task.TaskService;
import org.kie.api.task.model.Task;
import org.kie.api.task.model.TaskSummary;
import org.kie.internal.task.api.InternalTaskService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.UriComponentsBuilder;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.ApprovalRuleAssignment;
import com.nspl.app.domain.DataViews;
import com.nspl.app.domain.NotificationBatch;
import com.nspl.app.domain.Notifications;
import com.nspl.app.domain.ReconciliationResult;
import com.nspl.app.domain.Rules;
import com.nspl.app.jbpm.service.ApprovalTaskService;
import com.nspl.app.jbpm.util.EmailNotification;
import com.nspl.app.repository.ApprovalRuleAssignmentRepository;
import com.nspl.app.repository.DataViewsRepository;
import com.nspl.app.repository.NotificationBatchRepository;
import com.nspl.app.repository.NotificationsRepository;
import com.nspl.app.repository.ReconciliationResultRepository;
import com.nspl.app.repository.RulesRepository;
import com.nspl.app.security.jwt.JWTConfigurer;
import com.nspl.app.security.jwt.TokenProvider;
import com.nspl.app.service.ApproveService;
import com.nspl.app.service.UserJdbcService;
import com.nspl.app.web.rest.dto.ErrorReport;
import com.nspl.app.web.rest.dto.StatusStringDTO;


@RestController
@RequestMapping("/api")
public class ApprovalTaskResource {

	@Inject
	TaskService taskService;

	@Autowired
	RuntimeManager manager;

	@Inject
    private Environment env;
	
	@Inject
	NotificationBatchRepository notificationBatchRepository;
	
	@Inject
	ReconciliationResultRepository reconciliationResultRepository;
	
	@Inject
	ApprovalRuleAssignmentRepository approvalRuleAssignmentRepository;
	
	@Inject
	NotificationsRepository notificationsRepository;
	
	@Inject
	RulesRepository rulesRepository;
	
	@Inject
	DataViewsRepository dataViewsRepository;
	
	@Inject
	ApprovalTaskService approvalTaskService;

	@Inject
	ApproveService approveService;
	
	
	@Inject
	UserJdbcService userJdbcService;
	
	@Inject
	TokenProvider tokenProvider;

	@Inject
	AuthenticationManager authenticationManager;

	
	
	
	private final Logger log = LoggerFactory
			.getLogger(ApprovalTaskResource.class);

	
	
	/**
	 * Author: ravali
	 * Api to Multiple Approve Task
	 * @param batchId
	 * @param userId
	 * @param tenantId
	 * @param recRefList/Notification Batch Ids
	 * @throws SQLException
	 * @throws ClassNotFoundException 
	 */
	
			@PostMapping(value = "/approveTask")
			 @Timed
			public HashMap approve( @RequestParam Long userId, @RequestParam Long tenantId,@RequestParam(required=false) Long batchId,@RequestParam String type,
					@RequestBody List<String> ids) throws SQLException, ClassNotFoundException {
				log.info("in approveTask with parameters: typr: "+type+" batchId: "+batchId+" tenantId: "+tenantId+" userId: "+userId+" ids: "+ids);
				HashMap map=new HashMap();
				List<ErrorReport> finalErrorReport=new ArrayList<ErrorReport>();
				if(type.equalsIgnoreCase("Record"))
				{

					Long taskId = null;
					NotificationBatch notBatch=notificationBatchRepository.findOne(batchId);
					try {
						taskId=approvalTaskService.getTasksByProcessId(notBatch.getProcessInstanceId(),notBatch.getCurrentApprover());
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					log.info("taskId :"+taskId);
					ErrorReport report=new ErrorReport();
					if(taskId!=null)
						report=approveService.approveTask(taskId,batchId,userId,tenantId,ids,null);
					else
					{
						report.setTaskName("Approve Task");
						report.setTaskStatus("Failed");
						report.setDetails(batchId.toString());
						log.info("taskId is null");
					}
					if(report!=null)
						finalErrorReport.add(report);
				}
				else
				{
					for(int i=0;i<ids.size();i++)
					{
						Long taskId = null;
						NotificationBatch notBatch=notificationBatchRepository.findOne(Long.parseLong(ids.get(i)));
						try {
							taskId=approvalTaskService.getTasksByProcessId(notBatch.getProcessInstanceId(),notBatch.getCurrentApprover());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						List<String> recRefList=new ArrayList<String>();
						log.info("taskId :"+taskId);
						ErrorReport report=new ErrorReport();
						if(taskId!=null)
							report=approveService.approveTask(taskId,notBatch.getId(),userId,tenantId,recRefList,null);
						else
						{
							log.info("taskId is null");
							report.setTaskName("Approve Task");
							report.setTaskStatus("Failed");
							report.setDetails(batchId.toString());

						}
						if(report!=null)
							finalErrorReport.add(report);
					}

				}
				List<String> status=new ArrayList<String>();
				for(int i=0;i<finalErrorReport.size();i++)
				{
					status.add(finalErrorReport.get(i).getTaskStatus());
				}
				int Count=0;
				for(int s=0;s<status.size();s++)
				{
					if(status.equals("Failed"))
						Count++;
				}
				if(Count==0)
					Count=status.size();
				
				if(Count==status.size())
				map.put("status", "Success");
				else
					map.put("status", "Failed");
				map.put("count", Count+" out of "+status.size()+" Approved");
				map.put("errorReport", finalErrorReport);
				
				log.info("End of Approval Task");
				return map;

			}
			
			/**
			 * Author: ravali
			 * Api to Reject Task for multiple batch
			 * @param batchId
			 * @param userId
			 * @param tenantId
			 * @param recRefList
			 * @throws SQLException
			 * @throws ClassNotFoundException 
			 */
			@PostMapping(value = "/rejectTask")
			 @Timed
			public HashMap multipleReject( @RequestParam Long userId, @RequestParam Long tenantId,@RequestParam(required=false) Long batchId,@RequestParam String type,
					@RequestBody List<String> ids) throws SQLException, ClassNotFoundException {

				log.info("batchIds :"+ids);
				log.info("userId :"+userId);
				HashMap map=new HashMap();
				List<ErrorReport> finalErrorReport=new ArrayList<ErrorReport>();
				if(type.equalsIgnoreCase("Record"))
				{

					Long taskId = null;
					NotificationBatch notBatch=notificationBatchRepository.findOne(batchId);
					try {
						taskId=approvalTaskService.getTasksByProcessId(notBatch.getProcessInstanceId(),notBatch.getCurrentApprover());
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					log.info("taskId :"+taskId);
					ErrorReport report=new ErrorReport();
					if(taskId!=null)
						report=approveService.rejectTask(taskId,batchId,userId,tenantId,ids,null);
					else
					{
						report.setTaskName("Approve Task");
						report.setTaskStatus("Failed");
						report.setDetails(batchId.toString());
						log.info("taskId is null");
					}
					if(report!=null)
						finalErrorReport.add(report);
				}
				else
				{
					for(int i=0;i<ids.size();i++)
					{
						Long taskId = null;
						NotificationBatch notBatch=notificationBatchRepository.findOne(Long.parseLong(ids.get(i)));
						try {
							taskId=approvalTaskService.getTasksByProcessId(notBatch.getProcessInstanceId(),notBatch.getCurrentApprover());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						List<String> recRefList=new ArrayList<String>();
						log.info("taskId :"+taskId);
						ErrorReport report=new ErrorReport();
						if(taskId!=null)
							report=approveService.rejectTask(taskId,notBatch.getId(),userId,tenantId,recRefList,null);
						else
						{
							log.info("taskId is null");
							report.setTaskName("Approve Task");
							report.setTaskStatus("Failed");
							report.setDetails(batchId.toString());

						}
						if(report!=null)
							finalErrorReport.add(report);
					}

				}
				List<String> status=new ArrayList<String>();
				for(int i=0;i<finalErrorReport.size();i++)
				{
					status.add(finalErrorReport.get(i).getTaskStatus());
				}
				int Count=0;
				for(int s=0;s<status.size();s++)
				{
					if(status.equals("Failed"))
						Count++;
				}
				if(Count==0)
					Count=status.size();
				
				if(Count==status.size())
				map.put("status", "Success");
				else
					map.put("status", "Failed");
				map.put("count", Count+" out of "+status.size()+" Rejected");
				map.put("errorReport", finalErrorReport);
				
				return map;

			}
			
			/**
			 * Author: Ravali
			 * Api to perform approval actions approve and reject through email
			 * @param userId
			 * @param tenantId
			 * @param batchId
			 * @param action
			 * @throws SQLException
			 * @throws ClassNotFoundException
			 */
			@GetMapping(value = "/approveRejectTaskByEmail")
			 @Timed
			public void approveRejectByemail( @RequestParam Long userId, @RequestParam Long tenantId,@RequestParam Long batchId,@RequestParam String action) throws SQLException, ClassNotFoundException {
				log.info("Rest Request to approve or reject task through email");
			Long taskId=null;
				NotificationBatch notBatch=notificationBatchRepository.findOne(batchId);
				try {
					taskId=approvalTaskService.getTasksByProcessId(notBatch.getProcessInstanceId(),notBatch.getCurrentApprover());
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				List<String> recRefList=new ArrayList<String>();
				log.info("taskId :"+taskId);
				ErrorReport report=new ErrorReport();
				if(taskId!=null && action.equalsIgnoreCase("Approve"))
					report=approveService.approveTask(taskId,notBatch.getId(),userId,tenantId,recRefList,null);
				else if(taskId!=null && action.equalsIgnoreCase("Reject"))
					report=approveService.rejectTask(taskId,notBatch.getId(),userId,tenantId,recRefList,null);
				
				else
				{
					log.info("taskId is null");
					report.setTaskName("Approve Task");
					report.setTaskStatus("Failed");
					report.setDetails(batchId.toString());

				}
				
			}
		
			/**
			 * Author: Ravali
			 * Api to Generate token and perfom approval action through email notifications
			 * @param userId
			 * @param tenantId
			 * @param batchId
			 * @param action
			 * @return
			 * @throws ClassNotFoundException
			 * @throws SQLException
			 */
			@GetMapping(value = "/tokenGenerationForEmailAprovalTask")
			 @Timed
			 public ModelAndView callAPIWithJWTTOken(@RequestParam String userId, @RequestParam String tenantId,@RequestParam String batchId,@RequestParam String action) throws ClassNotFoundException, SQLException
			{
				log.info("Rest api for calling rest api with JWT Token");

				HashMap map=userJdbcService.jdbcConnc(Long.parseLong(userId));
				log.info("loginName :"+map.get("loginName"));
				log.info("password :"+map.get("password"));
				String jwt = "";
				try {
					Authentication authentication = new UsernamePasswordAuthenticationToken(map.get("loginName"), null,
							AuthorityUtils.createAuthorityList("ROLE_USER"));
					SecurityContextHolder.getContext().setAuthentication(authentication);
					jwt = tokenProvider.createToken(authentication,true);

					log.info("jwt :"+jwt);
				} catch (AuthenticationException ae) {
					log.info("Authentication exception trace: {}", ae);

				}
				if(jwt!=null && !jwt.isEmpty())
				{
					
				//	env.getProperty("spring.datasource.serverName")
				//	String theUrl = "http://192.168.0.56:"+env.getProperty("server.port")+"/api/approveRejectTaskByEmail";
					log.info("applicationHost: "+env.getProperty("spring.datasource.applicationHost"));
					log.info("port"+env.getProperty("server.port"));
					String theUrl = "http://"+env.getProperty("spring.datasource.applicationHost")+":"+env.getProperty("server.port")+"/api/approveRejectTaskByEmail";
					RestTemplate restTemplate = new RestTemplate();
					try {
						HttpHeaders headers = new HttpHeaders();
						headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
						headers.add("Authorization", "Bearer "+jwt);
						log.info("theUrl: "+theUrl);
						log.info("userId: "+userId+" tenantId: "+tenantId+" batchId: "+batchId+" action: "+action);
						UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(theUrl)
								.queryParam("userId", userId)
								.queryParam("tenantId", tenantId)
								.queryParam("batchId", batchId)
								.queryParam("action",action);

						HttpEntity<?> entity = new HttpEntity<>(headers);
						ResponseEntity<String> responses = restTemplate.exchange(builder.build().encode().toUri(), HttpMethod.GET, entity, String.class);
						System.out.println("Result - status ("+ responses.getStatusCode() + ") has body: " + responses.hasBody());
					}
					catch (Exception eek) {
						System.out.println("** Exception: "+ eek.getMessage());
					}
				}
				if(action.equalsIgnoreCase("approve"))
					return new ModelAndView("redirect:http://"+env.getProperty("spring.datasource.applicationHost")+":"+env.getProperty("spring.datasource.gatewayPort")+"/#/approved");
				else
					return new ModelAndView("redirect:http://"+env.getProperty("spring.datasource.applicationHost")+":"+env.getProperty("spring.datasource.gatewayPort")+"/#/rejected");
				
				
			}
				
			/**
			 * Author: Swetha
			 * @param userId
			 * @param tenantId
			 * @param batchId
			 * @param type
			 * @param ids
			 * @param assignTo
			 * @return
			 * @throws SQLException
			 */
			@SuppressWarnings("unused")
			@RequestMapping(value = "/reassignTask", method = RequestMethod.POST)
			public HashMap reassignTaskByRole(@RequestParam Long userId, @RequestParam Long tenantId,@RequestParam(required=false) Long batchId,@RequestParam String type,
					@RequestBody List<String> ids, @RequestParam Long assignTo) throws SQLException {
				log.info("reassignTask with userId: "+userId+" tenantId: "+tenantId+" batchId: "+batchId+" type: "+type);
				HashMap map=new HashMap();
				List<ErrorReport> finalErrorReport=new ArrayList<ErrorReport>();
				if(type.equalsIgnoreCase("Record"))
				{

					Long taskId = null;
					NotificationBatch notBatch=notificationBatchRepository.findOne(batchId);
					try {
						taskId=approvalTaskService.getTasksByProcessId(notBatch.getProcessInstanceId(),notBatch.getCurrentApprover());
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					log.info("taskId :"+taskId);
					ErrorReport report=new ErrorReport();
					if(taskId!=null)
						report=approveService.reAssignTask(taskId,batchId,userId,tenantId,ids,assignTo);
					else
					{
						report.setTaskName("ReAssign Task");
						report.setTaskStatus("Failed");
						report.setDetails(batchId.toString());
						log.info("taskId is null");
					}
					if(report!=null)
						finalErrorReport.add(report);
				}
				else
				{
					for(int i=0;i<ids.size();i++)
					{
						Long taskId = null;
						NotificationBatch notBatch=notificationBatchRepository.findOne(Long.parseLong(ids.get(i)));
						try {
							taskId=approvalTaskService.getTasksByProcessId(notBatch.getProcessInstanceId(),notBatch.getCurrentApprover());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						List<String> recRefList=new ArrayList<String>();
						log.info("taskId :"+taskId);
						ErrorReport report=new ErrorReport();
						if(taskId!=null)
							report=approveService.reAssignTask(taskId,notBatch.getId(),userId,tenantId,recRefList,assignTo);
						else
						{
							log.info("taskId is null");
							report.setTaskName("ReAssign Task");
							report.setTaskStatus("Failed");
							report.setDetails(batchId.toString());

						}
						if(report!=null)
							finalErrorReport.add(report);
					}

				}
				List<String> status=new ArrayList<String>();
				for(int i=0;i<finalErrorReport.size();i++)
				{
					status.add(finalErrorReport.get(i).getTaskStatus());
				}
				int Count=0;
				for(int s=0;s<status.size();s++)
				{
					if(status.equals("Failed"))
						Count++;
				}
				if(Count==0)
					Count=status.size();
				
				if(Count==status.size())
				map.put("status", "Success");
				else
					map.put("status", "Failed");
				map.put("count", Count+" out of "+status.size()+" ReAssigned");
				map.put("errorReport", finalErrorReport);
				
				log.info("End of ReAssign Task");
				return map;

			}
			
			
			/**
			 * Author: Swetha
			 * Api for Immediate approval action approve
			 * @param userId
			 * @param tenantId
			 * @param batchId
			 * @param type
			 * @param ids
			 * @return
			 * @throws SQLException
			 * @throws ClassNotFoundException
			 */
			@PostMapping(value = "/immediateApproveTask")
			 @Timed
			public HashMap adminApproveTask( @RequestParam Long userId, @RequestParam Long tenantId,@RequestParam(required=false) Long batchId,@RequestParam String type,
					@RequestBody List<String> ids) throws SQLException, ClassNotFoundException {
				log.info("in approveTask with parameters: typr: "+type+" batchId: "+batchId+" tenantId: "+tenantId+" userId: "+userId+" ids: "+ids);
				HashMap map=new HashMap();
				List<ErrorReport> finalErrorReport=new ArrayList<ErrorReport>();
				if(type.equalsIgnoreCase("Record"))
				{

					Long taskId = null;
					NotificationBatch notBatch=notificationBatchRepository.findOne(batchId);
					try {
						taskId=approvalTaskService.getTasksByProcessId(notBatch.getProcessInstanceId(),notBatch.getCurrentApprover());
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					log.info("taskId :"+taskId);
					ErrorReport report=new ErrorReport();
					if(taskId!=null)
						report=approveService.approveTask(taskId,batchId,userId,tenantId,ids,"ImmediateApprovals");
					else
					{
						report.setTaskName("Approve Task");
						report.setTaskStatus("Failed");
						report.setDetails(batchId.toString());
						log.info("taskId is null");
					}
					if(report!=null)
						finalErrorReport.add(report);
				}
				else
				{
					for(int i=0;i<ids.size();i++)
					{
						Long taskId = null;
						NotificationBatch notBatch=notificationBatchRepository.findOne(Long.parseLong(ids.get(i)));
						try {
							taskId=approvalTaskService.getTasksByProcessId(notBatch.getProcessInstanceId(),notBatch.getCurrentApprover());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						List<String> recRefList=new ArrayList<String>();
						log.info("taskId :"+taskId);
						ErrorReport report=new ErrorReport();
						if(taskId!=null)
							report=approveService.approveTask(taskId,notBatch.getId(),userId,tenantId,recRefList,null);
						else
						{
							log.info("taskId is null");
							report.setTaskName("Approve Task");
							report.setTaskStatus("Failed");
							report.setDetails(batchId.toString());

						}
						if(report!=null)
							finalErrorReport.add(report);
					}

				}
				List<String> status=new ArrayList<String>();
				for(int i=0;i<finalErrorReport.size();i++)
				{
					status.add(finalErrorReport.get(i).getTaskStatus());
				}
				int Count=0;
				for(int s=0;s<status.size();s++)
				{
					if(status.equals("Failed"))
						Count++;
				}
				if(Count==0)
					Count=status.size();
				
				if(Count==status.size())
				map.put("status", "Success");
				else
					map.put("status", "Failed");
				map.put("count", Count+" out of "+status.size()+" Approved");
				map.put("errorReport", finalErrorReport);
				
				log.info("End of Approval Task");
				return map;

			}
}
			
