package com.nspl.app.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.JournalsHeaderData;

import com.nspl.app.repository.JournalsHeaderDataRepository;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;
import io.swagger.annotations.ApiParam;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing JournalsHeaderData.
 */
@RestController
@RequestMapping("/api")
public class JournalsHeaderDataResource {

    private final Logger log = LoggerFactory.getLogger(JournalsHeaderDataResource.class);

    private static final String ENTITY_NAME = "journalsHeaderData";
        
    private final JournalsHeaderDataRepository journalsHeaderDataRepository;

    public JournalsHeaderDataResource(JournalsHeaderDataRepository journalsHeaderDataRepository) {
        this.journalsHeaderDataRepository = journalsHeaderDataRepository;
    }

    /**
     * POST  /journals-header-data : Create a new journalsHeaderData.
     *
     * @param journalsHeaderData the journalsHeaderData to create
     * @return the ResponseEntity with status 201 (Created) and with body the new journalsHeaderData, or with status 400 (Bad Request) if the journalsHeaderData has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/journals-header-data")
    @Timed
    public ResponseEntity<JournalsHeaderData> createJournalsHeaderData(@RequestBody JournalsHeaderData journalsHeaderData) throws URISyntaxException {
        log.debug("REST request to save JournalsHeaderData : {}", journalsHeaderData);
        if (journalsHeaderData.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new journalsHeaderData cannot already have an ID")).body(null);
        }
        JournalsHeaderData result = journalsHeaderDataRepository.save(journalsHeaderData);
        return ResponseEntity.created(new URI("/api/journals-header-data/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /journals-header-data : Updates an existing journalsHeaderData.
     *
     * @param journalsHeaderData the journalsHeaderData to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated journalsHeaderData,
     * or with status 400 (Bad Request) if the journalsHeaderData is not valid,
     * or with status 500 (Internal Server Error) if the journalsHeaderData couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/journals-header-data")
    @Timed
    public ResponseEntity<JournalsHeaderData> updateJournalsHeaderData(@RequestBody JournalsHeaderData journalsHeaderData) throws URISyntaxException {
        log.debug("REST request to update JournalsHeaderData : {}", journalsHeaderData);
        if (journalsHeaderData.getId() == null) {
            return createJournalsHeaderData(journalsHeaderData);
        }
        JournalsHeaderData result = journalsHeaderDataRepository.save(journalsHeaderData);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, journalsHeaderData.getId().toString()))
            .body(result);
    }

    /**
     * GET  /journals-header-data : get all the journalsHeaderData.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of journalsHeaderData in body
     */
    @GetMapping("/journals-header-data")
    @Timed
    public ResponseEntity<List<JournalsHeaderData>> getAllJournalsHeaderData(@ApiParam Pageable pageable) {
        log.debug("REST request to get a page of JournalsHeaderData");
        Page<JournalsHeaderData> page = journalsHeaderDataRepository.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/journals-header-data");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /journals-header-data/:id : get the "id" journalsHeaderData.
     *
     * @param id the id of the journalsHeaderData to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the journalsHeaderData, or with status 404 (Not Found)
     */
    @GetMapping("/journals-header-data/{id}")
    @Timed
    public ResponseEntity<JournalsHeaderData> getJournalsHeaderData(@PathVariable Long id) {
        log.debug("REST request to get JournalsHeaderData : {}", id);
        JournalsHeaderData journalsHeaderData = journalsHeaderDataRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(journalsHeaderData));
    }

    /**
     * DELETE  /journals-header-data/:id : delete the "id" journalsHeaderData.
     *
     * @param id the id of the journalsHeaderData to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/journals-header-data/{id}")
    @Timed
    public ResponseEntity<Void> deleteJournalsHeaderData(@PathVariable Long id) {
        log.debug("REST request to delete JournalsHeaderData : {}", id);
        journalsHeaderDataRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
