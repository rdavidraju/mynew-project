package com.nspl.app.web.rest;


import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.AccountingLineTypes;
import com.nspl.app.domain.AcctRuleConditions;
import com.nspl.app.domain.AcctRuleDerivations;
import com.nspl.app.domain.AppRuleConditions;
import com.nspl.app.domain.ApprovalGroups;
import com.nspl.app.domain.ApprovalRuleAssignment;
import com.nspl.app.domain.DataViews;
import com.nspl.app.domain.DataViewsColumns;
import com.nspl.app.domain.FileTemplates;
import com.nspl.app.domain.LookUpCode;
import com.nspl.app.domain.MappingSet;
import com.nspl.app.domain.RuleConditions;
import com.nspl.app.domain.RuleGroup;
import com.nspl.app.domain.RuleGroupDetails;
import com.nspl.app.domain.Rules;
import com.nspl.app.repository.AccountingLineTypesRepository;
import com.nspl.app.repository.AcctRuleConditionsRepository;
import com.nspl.app.repository.AcctRuleDerivationsRepository;
import com.nspl.app.repository.AppRuleConditionsRepository;
import com.nspl.app.repository.ApprovalGroupsRepository;
import com.nspl.app.repository.ApprovalRuleAssignmentRepository;
import com.nspl.app.repository.DataViewsColumnsRepository;
import com.nspl.app.repository.DataViewsRepository;
import com.nspl.app.repository.LookUpCodeRepository;
import com.nspl.app.repository.MappingSetRepository;
import com.nspl.app.repository.RuleConditionsRepository;
import com.nspl.app.repository.RuleGroupDetailsRepository;
import com.nspl.app.repository.RuleGroupRepository;
import com.nspl.app.repository.RulesRepository;
import com.nspl.app.repository.search.RuleGroupSearchRepository;
import com.nspl.app.service.DataViewsService;
import com.nspl.app.service.OozieService;
import com.nspl.app.service.RuleGroupService;
import com.nspl.app.service.RuleService;
import com.nspl.app.service.UserJdbcService;
import com.nspl.app.web.rest.dto.AccountingRuleDTO;
import com.nspl.app.web.rest.dto.AcctRuleCondDTO;
import com.nspl.app.web.rest.dto.AcctRuleDerivationDTO;
import com.nspl.app.web.rest.dto.AppRuleCondAndActDto;
import com.nspl.app.web.rest.dto.ApprRuleAssgnDto;
import com.nspl.app.web.rest.dto.ApprovalActionDto;
import com.nspl.app.web.rest.dto.ApprovalRuleDto;
import com.nspl.app.web.rest.dto.DataViewColmnDTO;
import com.nspl.app.web.rest.dto.ErrorReport;
import com.nspl.app.web.rest.dto.LineItems;
import com.nspl.app.web.rest.dto.RuleConditionsDTO;
import com.nspl.app.web.rest.dto.RuleDTO;
import com.nspl.app.web.rest.dto.RuleGroupDTO;
import com.nspl.app.web.rest.dto.RulesAndLineItems;
import com.nspl.app.web.rest.dto.RulesDTO;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;

import io.github.jhipster.web.util.ResponseUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.env.Environment;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.math.BigInteger;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import static org.elasticsearch.index.query.QueryBuilders.*;

/**
 * REST controller for managing RuleGroup.
 */
@RestController
@RequestMapping("/api")
public class RuleGroupResource {

    private final Logger log = LoggerFactory.getLogger(RuleGroupResource.class);

    private static final String ENTITY_NAME = "ruleGroup";
        
    private final RuleGroupRepository ruleGroupRepository;

    private final RuleGroupSearchRepository ruleGroupSearchRepository;
    
    @Inject
    RuleConditionsRepository ruleConditionsRepository;
    
    @Inject
    RuleGroupDetailsRepository ruleGroupDetailsRepository; 
    
    @Inject
    RulesRepository rulesRepository;
    
    @Inject
    DataViewsRepository dataViewsRepository;
    
    @Inject
    DataViewsColumnsRepository dataViewsColumnsRepository;
    
    @Inject
    AccountingLineTypesRepository accountingLineTypesRepository;
    
    @Inject
    AcctRuleConditionsRepository acctRuleConditionsRepository;
    
    @Inject
    AcctRuleDerivationsRepository acctRuleDerivationsRepository;
    
    @Inject
    MappingSetRepository mappingSetRepository;
    
    @Inject
    LookUpCodeRepository lookUpCodeRepository;
    
    @Inject
    DataViewsService dataViewsService;
    
    @Inject
    RuleService ruleService;
    
    @Inject
    RuleGroupService ruleGroupService;
    
    @Inject
    AppRuleConditionsRepository appRuleConditionsRepository;
    
    @Inject
    ApprovalRuleAssignmentRepository approvalRuleAssignmentRepository;
    
    @Inject
    ApprovalGroupsRepository approvalGroupsRepository;
    
    @Inject
    private Environment env;
    
    @Inject
    UserJdbcService userJdbcService;
    
    @Inject
    OozieService oozieService;
    
    
    @PersistenceContext(unitName="default")
	private EntityManager em;

    public RuleGroupResource(RuleGroupRepository ruleGroupRepository, RuleGroupSearchRepository ruleGroupSearchRepository) {
        this.ruleGroupRepository = ruleGroupRepository;
        this.ruleGroupSearchRepository = ruleGroupSearchRepository;
    }

    /**
     * POST  /rule-groups : Create a new ruleGroup.
     *
     * @param ruleGroup the ruleGroup to create
     * @return the ResponseEntity with status 201 (Created) and with body the new ruleGroup, or with status 400 (Bad Request) if the ruleGroup has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/rule-groups")
    @Timed
    public ResponseEntity<RuleGroup> createRuleGroup(@RequestBody RuleGroup ruleGroup) throws URISyntaxException {
        log.debug("REST request to save RuleGroup : {}", ruleGroup);
        if (ruleGroup.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new ruleGroup cannot already have an ID")).body(null);
        }
        RuleGroup result = ruleGroupRepository.save(ruleGroup);
        ruleGroupSearchRepository.save(result);
        return ResponseEntity.created(new URI("/api/rule-groups/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /rule-groups : Updates an existing ruleGroup.
     *
     * @param ruleGroup the ruleGroup to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated ruleGroup,
     * or with status 400 (Bad Request) if the ruleGroup is not valid,
     * or with status 500 (Internal Server Error) if the ruleGroup couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/rule-groups")
    @Timed
    public ResponseEntity<RuleGroup> updateRuleGroup(@RequestBody RuleGroup ruleGroup) throws URISyntaxException {
        log.debug("REST request to update RuleGroup : {}", ruleGroup);
        if (ruleGroup.getId() == null) {
            return createRuleGroup(ruleGroup);
        }
        RuleGroup result = ruleGroupRepository.save(ruleGroup);
        ruleGroupSearchRepository.save(result);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, ruleGroup.getId().toString()))
            .body(result);
    }

    /**
     * GET  /rule-groups : get all the ruleGroups.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of ruleGroups in body
     */
    @GetMapping("/rule-groups")
    @Timed
    public List<RuleGroup> getAllRuleGroups() {
        log.debug("REST request to get all RuleGroups");
        List<RuleGroup> ruleGroups = ruleGroupRepository.findAll();
        return ruleGroups;
    }
    /**
     * Author : Shobha
     * @param offset
     * @param limit
     * @param tenantId
     * @return
     * @throws URISyntaxException
     */
    @GetMapping("/ruleGroupsByTenantId")
	@Timed
	public ResponseEntity<List<RuleGroup>> getRuleGroupsByTenantId(@RequestParam(value = "page" , required = false) Integer offset,
			@RequestParam(value = "per_page", required = false) Integer limit,@RequestParam Long tenantId) throws URISyntaxException {
		log.debug("REST request to get a page of Rule groups");
		List<RuleGroup> ruleGroupList = new ArrayList<RuleGroup>();
		PaginationUtil paginationUtil=new PaginationUtil();
		
		int maxlmt=paginationUtil.MAX_LIMIT;
		int minlmt=paginationUtil.MIN_OFFSET;
		log.info("maxlmt: "+maxlmt);
		Page<RuleGroup> page = null;
		HttpHeaders headers = null;
		
		if(limit==null || limit<minlmt){
			ruleGroupList = ruleGroupRepository.findByTenantIdOrderByIdDesc(tenantId);
			limit = ruleGroupList.size();
		}
		if(limit == 0 )
    	{
    		limit = paginationUtil.DEFAULT_LIMIT;
    	}
    	if(offset == null || offset == 0)
    	{
    		offset = paginationUtil.DEFAULT_OFFSET;
    	}
    	if(limit>maxlmt)
		{
			log.info("input limit exceeds maxlimit");
			 page = ruleGroupRepository.findByTenantIdOrderByIdDesc(tenantId,PaginationUtil.generatePageRequest2(offset, limit));
			headers = PaginationUtil.generatePaginationHttpHeaders2(page, "/api/ruleGroupsByTenantId",offset, limit);
		}
		else{
			log.info("input limit is within maxlimit");
			page = ruleGroupRepository.findByTenantIdOrderByIdDesc(tenantId,PaginationUtil.generatePageRequest(offset, limit));
			headers = PaginationUtil.generatePaginationHttpHeaderss(page, "/api/ruleGroupsByTenantId", offset, limit);
		}
		return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /rule-groups/:id : get the "id" ruleGroup.
     *
     * @param id the id of the ruleGroup to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the ruleGroup, or with status 404 (Not Found)
     */
    @GetMapping("/rule-groups/{id}")
    @Timed
    public ResponseEntity<RuleGroup> getRuleGroup(@PathVariable Long id) {
        log.debug("REST request to get RuleGroup : {}", id);
        RuleGroup ruleGroup = ruleGroupRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(ruleGroup));
    }

    /**
     * DELETE  /rule-groups/:id : delete the "id" ruleGroup.
     *
     * @param id the id of the ruleGroup to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/rule-groups/{id}")
    @Timed
    public ResponseEntity<Void> deleteRuleGroup(@PathVariable Long id) {
        log.debug("REST request to delete RuleGroup : {}", id);
        ruleGroupRepository.delete(id);
        ruleGroupSearchRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

    /**
     * SEARCH  /_search/rule-groups?query=:query : search for the ruleGroup corresponding
     * to the query.
     *
     * @param query the query of the ruleGroup search 
     * @return the result of the search
     */
    @GetMapping("/_search/rule-groups")
    @Timed
    public List<RuleGroup> searchRuleGroups(@RequestParam String query) {
        log.debug("REST request to search RuleGroups for query {}", query);
        return StreamSupport
            .stream(ruleGroupSearchRepository.search(queryStringQuery(query)).spliterator(), false)
            .collect(Collectors.toList());
    }

    
    
    /*@PostMapping("/postingRuleGrpAndRulesAndRuleConditions")
    @Timed
    public List<ErrorReport> postRulesHierarchy(@RequestBody RuleGroupDTO ruleGroupDTO)
    {
    	log.info("Rest Request to post rule group, rules and ruleConditions");
    	*//** not integrated delete function for conditions**//*
    	Long tenantId = 0L;
    	Long userId = 0L;
    	List<ErrorReport> errorReport=new ArrayList<ErrorReport>();
    	RuleGroup ruleGroup=new RuleGroup();
    	if(ruleGroupDTO.getId() != null)
    	{
    		log.info("group already exists so edit");
    		ruleGroup.setId(ruleGroupDTO.getId());
    	}
    	else
    	{

    	}
    	if(ruleGroupDTO.getName()!=null && !ruleGroupDTO.getName().isEmpty())
    		ruleGroup.setName(ruleGroupDTO.getName());
    	if(ruleGroupDTO.getRulePurpose() != null && !ruleGroupDTO.getRulePurpose().isEmpty())
    		ruleGroup.setRulePurpose(ruleGroupDTO.getRulePurpose());
    	if(ruleGroupDTO.getStartDate()!=null)
    		ruleGroup.setStartDate(ruleGroupDTO.getStartDate());
    	if(ruleGroupDTO.getEndDate()!=null)
    		ruleGroup.setEndDate(ruleGroupDTO.getEndDate());
    	ruleGroup.setEnabledFlag(true);
    	if(ruleGroupDTO != null && ruleGroupDTO.getTenantId() != null)
    	{
    		tenantId = ruleGroupDTO.getTenantId();
    	}
    	if(ruleGroupDTO != null && ruleGroupDTO.getCreatedBy() != null)
    	{
    		userId = ruleGroupDTO.getCreatedBy();
    	}
    	if(ruleGroupDTO.getId() == null || ruleGroupDTO.getId().equals(""))
    	{
    		ruleGroup.setCreatedBy(ruleGroupDTO.getCreatedBy());
    		ruleGroup.setCreationDate(ZonedDateTime.now());
    	}
    	ruleGroup.setLastUpdatedBy(ruleGroupDTO.getCreatedBy());
    	ruleGroup.setLastUpdatedDate(ZonedDateTime.now());
    	ruleGroup.setTenantId(tenantId);

    	RuleGroup newGrp=new RuleGroup();
    	if(ruleGroupDTO.getName()!=null)
    	{
    		newGrp=ruleGroupRepository.save(ruleGroup);
    	}

    	if(newGrp!=null && newGrp.getId()!=null)
    	{

    		ErrorReport ruleGroupSave=new ErrorReport();
    		ruleGroupSave.setTaskName("Rule Group Save");
    		ruleGroupSave.setTaskStatus("Success");
    		ruleGroupSave.setDetails(newGrp.getId()+"");
    		errorReport.add(ruleGroupSave);

    		List<BigInteger> ruleIdsList=ruleGroupDetailsRepository.fetchRuleIdsByGroupAndTenantId(newGrp.getId(),newGrp.getTenantId());
			log.info("ruleIdsList before:"+ruleIdsList);
    		
    		List<RulesDTO> ruleDTO = new ArrayList<RulesDTO>();
    		log.info("ruleGroupDTO.getRules()"+ruleGroupDTO.getRules().size());
    		ruleDTO = ruleGroupDTO.getRules();
    		for(int i=0;i<ruleDTO.size();i++)
    		{
    			Long ruleId = 0L;
    			Rules newRule=new Rules();
    			Rules rule=new Rules();
    			
    			if(ruleDTO.get(i).getRule().getId() != null && ruleDTO.get(i).getRule().getId()!=0)
    			{
    				//rule.setId(ruleDTO.get(i).getRule().getId());
    			
    				if(ruleIdsList.size()>0)
    				{
    					for(int id=0;id<ruleIdsList.size();id++)
    					{
    						log.info("ruleIdsList.get(id) :"+ruleIdsList.get(id));
    						log.info("ruleDTO.get(i).getRule().getId() :"+ruleDTO.get(i).getRule().getId());
    						if(ruleIdsList.get(id).longValue()==ruleDTO.get(i).getRule().getId())
    						{
    							log.info("same");
    							ruleIdsList.remove(ruleIdsList.get(id));
    						}
    					}
    				}
    				log.info("ruleIdsList after:"+ruleIdsList);
    			
    				
    			}
    			else
    			{
    				
    			//}
    				for(int j=0;j<ruleIdsList.size();j++)
    				{
    					log.info("ruleIdsList.get(j).longValue() :"+ruleIdsList.get(j).longValue());
    					log.info("newGrp.getId() :"+newGrp.getId());
    					RuleGroupDetails ruleGrpId=ruleGroupDetailsRepository.findByRuleGroupIdAndRuleId(newGrp.getId(),ruleIdsList.get(j).longValue());
    					log.info("ruleGrpId :"+ruleGrpId);
    					log.info("");
    					if(ruleGrpId!=null)
    					ruleGroupDetailsRepository.delete(ruleGrpId);
    				}
    			log.info("ruleDTO.get(i).getRule() :"+ruleDTO.get(i).getRule());
    				log.info("rule id is null please save");
    				
    				//	rule.setId(ruleDTO.get(i).getId());
    				if(ruleDTO.get(i).getRule().getRuleCode()!=null && !ruleDTO.get(i).getRule().getRuleCode().isEmpty())
    					rule.setRuleCode(ruleDTO.get(i).getRule().getRuleCode());
    				//if(ruleDTO.get(i).getRule().getRuleName()!=null && !ruleDTO.get(i).getRule().getRuleName().isEmpty())
    				//	rule.setRuleName(ruleDTO.get(i).getRule().getRuleName());
    				if(ruleDTO.get(i).getRule().getStartDate()!=null)
    					rule.setStartDate(ruleDTO.get(i).getRule().getStartDate());
    				if(ruleDTO.get(i).getRule().getEndDate()!=null)
    					rule.setEndDate(ruleDTO.get(i).getRule().getEndDate());
    				rule.setEnabledFlag(true);;
    				if(ruleDTO.get(i).getRule().getRuleType()!=null && !ruleDTO.get(i).getRule().getRuleType().isEmpty())
    					rule.setRuleType(ruleDTO.get(i).getRule().getRuleType());
    				//if(ruleDTO.get(i).getRule().getRulePurpose()!=null && !ruleDTO.get(i).getRule().getRulePurpose().isEmpty())
    				//	rule.setRulePurpose(ruleDTO.get(i).getRule().getRulePurpose());
    				rule.setSourceDataViewId(ruleDTO.get(i).getRule().getSourceDataViewId());
    				rule.setTargetDataViewId(ruleDTO.get(i).getRule().getTargetDataViewId());
    				rule.setCreatedBy(userId);
    				rule.setCreationDate(ZonedDateTime.now());
    				rule.setLastUpdatedBy(userId);
    				rule.setLastUpdatedDate(ZonedDateTime.now());

    				//if(ruleDTO.get(i).getRule().getRuleName()!=null && ruleDTO.get(i).getRule().getRuleType()!=null && ruleDTO.get(i).getRule().getRulePurpose()!=null)
    				rule.setCreatedBy(userId);
    				rule.setCreationDate(ZonedDateTime.now());
    				rule.setLastUpdatedBy(userId);
    				rule.setLastUpdatedDate(ZonedDateTime.now());
    				rule.setTenantId(newGrp.getTenantId());
    				newRule=rulesRepository.save(rule);
    		
    			
    			//else
    			//{
    				//ruleId = ruleDTO.get(i).getRule().getId();

    			//}

    			if( newRule.getId()!=null)
    			{
    				ruleId = newRule.getId();
    			}
    			if(ruleId !=null && ruleId !=0 )
    			{
    				log.info("newGrp.getId() :"+newGrp.getId());
    				log.info("ruleId :"+ruleId);
    				//RuleGroupDetails ruleGrpDet=ruleGroupDetailsRepository.findByRuleGroupIdAndRuleId(newGrp.getId(),ruleId);
    				
    				
    				//log.info("ruleGrpDet :"+ruleGrpDet);
    				RuleGroupDetails ruleGrpDetails=new RuleGroupDetails();
    				RuleGroupDetails rulegroupDet=new RuleGroupDetails();
    				rulegroupDet.setRuleGroupId(newGrp.getId());
					rulegroupDet.setRuleId(ruleId);
					rulegroupDet.setPriority(ruleDTO.get(i).getRule().getPriority());
					rulegroupDet.setCreatedBy(userId);
					rulegroupDet.setLastUpdatedBy(userId);
					rulegroupDet.setCreationDate(ZonedDateTime.now());
					rulegroupDet.setLastUpdatedDate(ZonedDateTime.now());
					rulegroupDet.setTenantId(newGrp.getTenantId());
					ruleGrpDetails= ruleGroupDetailsRepository.save(rulegroupDet);
    				//
    				List<RuleConditionsDTO> ruleCondList=ruleDTO.get(i).getRuleConditions();
    						log.info("ruleDTO.get(i).getRuleConditions()"+ruleDTO.get(i).getRuleConditions().size());
    				for(RuleConditionsDTO ruleCond : ruleCondList)
    				{
    					RuleConditions ruleCondition = new RuleConditions();
    					//ruleCondition.setAggregationMethod(ruleCond.getAggregationMethod());
    					if(ruleCond.getId()!= null && ruleCond.getId() != 0)
    					{
    						//ruleCondition.setId(ruleCond.getId());
    					}
    					else if( ruleCond.getId() == 0)
    					{
    						
    					//}
    					if(ruleCond.getCloseBracket()!=null && !ruleCond.getCloseBracket().isEmpty())
    						ruleCondition.setCloseBracket(ruleCond.getCloseBracket());
    					if(ruleCond.getLogicalOperator()!=null && !ruleCond.getLogicalOperator().isEmpty())
    						ruleCondition.setLogicalOperator(ruleCond.getLogicalOperator());
    					if(ruleCond.getOpenBracket()!=null && !ruleCond.getOpenBracket().isEmpty())
    						ruleCondition.setOpenBracket(ruleCond.getOpenBracket());
    					if(ruleCond.getsOperator()!=null && !ruleCond.getsOperator().isEmpty())
    						ruleCondition.setsOperator(ruleCond.getsOperator());
    					if(ruleCond.gettOperator()!=null && !ruleCond.gettOperator().isEmpty())
    						ruleCondition.settOperator(ruleCond.gettOperator());
    					if(ruleCond.getsColumnId()!=null )
    						ruleCondition.setsColumnId(ruleCond.getsColumnId());
    					//ruleCondition.setsColumnType(ruleCond.getsColumnType());
    					//ruleCondition.setsDataViewId(ruleCond.getsDataViewId());
    					if(ruleCond.getsFormula()!=null && !ruleCond.getsFormula().isEmpty())
    						ruleCondition.setsFormula(ruleCond.getsFormula());
    					if(ruleCond.getsMany()!=null)
    						ruleCondition.setsMany(ruleCond.getsMany());
    					if(ruleCond.gettToleranceOperatorFrom()!=null && !ruleCond.gettToleranceOperatorFrom().isEmpty())
    						ruleCondition.setsToleranceOperatorFrom(ruleCond.gettToleranceOperatorFrom());
    					if(ruleCond.gettToleranceOperatorTo()!=null && !ruleCond.gettToleranceOperatorTo().isEmpty())
    						ruleCondition.setsToleranceOperatorTo(ruleCond.gettToleranceOperatorTo());
    					if(ruleCond.getsToleranceType()!=null && !ruleCond.getsToleranceType().isEmpty())
    						ruleCondition.setsToleranceType(ruleCond.getsToleranceType());
    					if(ruleCond.getsToleranceValueFrom()!=null && !ruleCond.getsToleranceValueFrom().isEmpty())
    						ruleCondition.setsToleranceValueFrom(ruleCond.getsToleranceValueFrom());
    					if(ruleCond.getsToleranceValueTo()!=null && !ruleCond.getsToleranceValueTo().isEmpty())
    						ruleCondition.setsToleranceValueTo(ruleCond.getsToleranceValueTo());
    					if(ruleCond.gettColumnId()!=null)
    						ruleCondition.settColumnId(ruleCond.gettColumnId());
    					//ruleCondition.settColumnType(ruleCond.gettColumnType());
    					//ruleCondition.settDataViewId(ruleCond.gettDataViewId());
    					if(ruleCond.gettFormula()!=null && !ruleCond.gettFormula().isEmpty())
    						ruleCondition.settFormula(ruleCond.gettFormula());
    					if(ruleCond.gettMany()!=null)
    						ruleCondition.settMany(ruleCond.gettMany());
    					if(ruleCond.gettToleranceOperatorFrom()!=null && !ruleCond.gettToleranceOperatorFrom().isEmpty())
    						ruleCondition.settToleranceOperatorFrom(ruleCond.gettToleranceOperatorFrom());
    					if(ruleCond.gettToleranceOperatorTo()!=null && !ruleCond.gettToleranceOperatorTo().isEmpty())
    						ruleCondition.settToleranceOperatorTo(ruleCond.gettToleranceOperatorTo());
    					if(ruleCond.gettToleranceType()!=null && !ruleCond.gettToleranceType().isEmpty())
    						ruleCondition.settToleranceType(ruleCond.gettToleranceType());
    					if(ruleCond.gettToleranceValueFrom()!=null && !ruleCond.gettToleranceValueFrom().isEmpty())
    						ruleCondition.settToleranceValueFrom(ruleCond.gettToleranceValueFrom());
    					if(ruleCond.gettToleranceValueTo()!=null && !ruleCond.gettToleranceValueTo().isEmpty())
    						ruleCondition.settToleranceValueTo(ruleCond.gettToleranceValueTo());
    					if(ruleCond.getsValue()!=null && !ruleCond.getsValue().isEmpty())
    						ruleCondition.setsValue(ruleCond.getsValue());
    					if(ruleCond.getsValueType()!=null && !ruleCond.getsValueType().isEmpty())
    						ruleCondition.setsValueType(ruleCond.getsValueType());
    					if(ruleCond.gettValue()!=null && !ruleCond.gettValue().isEmpty())
    						ruleCondition.settValue(ruleCond.gettValue());
    					if(ruleCond.gettValueType()!=null && !ruleCond.gettValueType().isEmpty())
    						ruleCondition.settValueType(ruleCond.gettValueType());
    					if(ruleId!=null)
    						ruleCondition.setRuleId(ruleId);
    					if(ruleCond.getValue()!=null && !ruleCond.getValue().isEmpty())
    					ruleCondition.setValue(ruleCond.getValue());
    					if(ruleCond.getOperator()!=null && !ruleCond.getOperator().isEmpty())
    					ruleCondition.setOperator(ruleCond.getOperator());
    					ruleCondition.setCreatedBy(userId);
    					ruleCondition.setCreationDate(ZonedDateTime.now());
    					ruleCondition.setLastUpdatedBy(userId);
    					ruleCondition.setLastUpdatedDate(ZonedDateTime.now());
    					log.info("save condition"+ruleCondition);
    					RuleConditions newRuleCond=ruleConditionsRepository.save(ruleCondition);

    					if(newRuleCond!=null && newRuleCond.getId()!=null)
    					{

    					}
    					else
    					{
    						log.info("failed saving condition");
    						ErrorReport ruleConditionSave=new ErrorReport();
    						ruleConditionSave.setTaskName("Rule Condition Save");
    						ruleConditionSave.setTaskStatus("failure");
    						errorReport.add(ruleConditionSave);
    					}
    				}
    			}
    				//RuleGroupDetails ruleGrpDetails= ruleGroupDetailsRepository.save(rulegroupDet);
    				if(ruleGrpDetails!=null && ruleGrpDetails.getId()!=null)
    				{

    				}
    				else
    				{
    					ErrorReport ruleGrpDetailsSave=new ErrorReport();
    					ruleGrpDetailsSave.setTaskName("Rule Group Details Save");
    					ruleGrpDetailsSave.setTaskStatus("failure");
    					errorReport.add(ruleGrpDetailsSave);
    				}
    			}
    			else
    			{
    				log.info("ruleId issss"+ruleId);
    			}
    		}
    	}
    	}
    	else
    	{
    		ErrorReport ruleGroupSave=new ErrorReport();
    		ruleGroupSave.setTaskName("Rule Group Save");
    		ruleGroupSave.setTaskStatus("failure");
    		errorReport.add(ruleGroupSave);
    	}
    	return errorReport;
    }*/
    
    
    
    
    
    @PostMapping("/postingRuleGrpAndRulesAndRuleConditions")
    @Timed
    public List<ErrorReport> postRulesHierarchy(@RequestBody RuleGroupDTO ruleGroupDTO)
    {
    	log.info("Rest Request to post rule group, rules and ruleConditions");
    	List<ErrorReport> errorReport=new ArrayList<ErrorReport>();
    	if(ruleGroupDTO.getRulePurpose().equalsIgnoreCase("ORPHAN_RECON") || ruleGroupDTO.getRulePurpose().equalsIgnoreCase("ORPHAN_ACCOUNTING"))
    	{
    		RuleGroup ruleGrp=ruleGroupRepository.findByTenantIdAndRulePurpose(ruleGroupDTO.getTenantId(), ruleGroupDTO.getRulePurpose());
    		if(ruleGrp!=null && ruleGrp.getId()!=null)
    		{
    			errorReport=ruleService.postRules(ruleGroupDTO.getRules(), ruleGrp);
    			//As adhoc rule will be only one 
    			//check if the got rule list has adhoc rule
    			//if yes=> call next process after creation
    			for(int i =0;i<ruleGroupDTO.getRules().size();i++)
    			{
    				RulesDTO ruleDTO = new RulesDTO();
    				if(ruleDTO.getRule().getRuleType().contains("ADHOC"))
    				{
    					//fetch error report of adhoc rule for id
    					Long ruleId = 0L; 
    					if(errorReport.get(0).getTaskName().contains("Rule Group Save"))
    					{
    						if(errorReport.get(0).getSubTasksList().size() > 0)
    						{
    							if(errorReport.get(0).getSubTasksList().get(0).getTaskName().contains("Save Rule"))
    							{
    								ruleId =Long.valueOf( errorReport.get(0).getSubTasksList().get(0).getDetails());
    								log.info("got rule id with"+ruleId);
    							}
    							else
    							{
    								log.info("Save Rule doesnt exist");
    							}
    						}
    						else
    						{
    							log.info("getSubTasksList is empty");
    						}
    					}
    					else
    					{
    						log.info("Rule Group Save doesnt exist");
    					}
    					 
    				}
    				else
					{
						log.info("no adhoc rule");
					}
    			}
    		}
    		else
    		{
    			errorReport=ruleGroupService.postRulegroup(ruleGroupDTO);
    		}
    	}
    	else
    	{
    		log.info("in else bcz orphan removed");
    		errorReport=ruleGroupService.postRulegroup(ruleGroupDTO);
    	}
		return errorReport;
    	
    }
    
    
   

	@GetMapping("/getRuleGrpAndRuleConditionsAndRuleGrpDetails")
    @Timed
    public RuleGroupDTO getRuleDetails(@RequestParam Long groupId)
	{
		log.info("Rest request to get rule details"+groupId);
		List<DataViews> dataViewsForTenant = new ArrayList<DataViews>();
		RuleGroup ruleGroup=ruleGroupRepository.findOne(groupId);

		/**
		 * Data views map
		 */
		dataViewsForTenant = dataViewsRepository.fetchActiveDataViews(ruleGroup.getTenantId());
		log.info(""+dataViewsForTenant.size());
		HashMap<Long, String[]> dataViewsIdtoNameMap = new HashMap<Long, String[]>();
		List<Long> dataViewIds = new ArrayList<Long>();
		for(int k = 0; k<dataViewsForTenant.size();k++)
		{
			String[] dataViewNameAndDisplayName = new String[2];
			log.info(" dataViewsForTenant.get(k).getDataViewName():"+ dataViewsForTenant.get(k).getDataViewName());
			log.info(" dataViewsForTenant.get(k).getDataViewDispName():"+ dataViewsForTenant.get(k).getDataViewDispName());
			dataViewNameAndDisplayName[0]  = dataViewsForTenant.get(k).getDataViewName();
			dataViewNameAndDisplayName[1] =  dataViewsForTenant.get(k).getDataViewDispName();
			log.info("dataViewNameAndDisplayName[0] isssss"+	dataViewNameAndDisplayName[0]+"dataViewNameAndDisplayName[1] "+dataViewNameAndDisplayName[1] );
			dataViewsIdtoNameMap.put(dataViewsForTenant.get(k).getId(),dataViewNameAndDisplayName);
			dataViewIds.add(dataViewsForTenant.get(k).getId());
		}
		//log.info("dataViewsIdtoNameMap size"+dataViewsIdtoNameMap.size());
		//log.info("dataViewsIdtoNameMap key set"+dataViewsIdtoNameMap.keySet());

		/**       
		 * Column names map
		 */
		List<DataViewsColumns> dataViewColumns = new ArrayList<DataViewsColumns>();
		HashMap<Long, String> dataViewColumnsMap = new HashMap<Long, String>();
		dataViewColumns = dataViewsColumnsRepository.findByDataViewIdIn(dataViewIds);
		log.info("dataViewIds"+dataViewIds+"dataViewColumns.size() size"+dataViewColumns.size());
		for(int k=0; k<dataViewColumns.size();k++)
		{
			dataViewColumnsMap.put(dataViewColumns.get(k).getId(),dataViewColumns.get(k).getColumnName() );
			log.info("dataViewColumns.get(k).getId()"+dataViewColumns.get(k).getId());
			log.info("dataViewColumns.get(k).getColumnName()"+dataViewColumns.get(k).getColumnName());

		}


		RuleGroupDTO ruleGroupDto=new RuleGroupDTO();
		if(ruleGroup.getId()!=null )
			ruleGroupDto.setId(ruleGroup.getId());
		ruleGroupDto.setTenantId(ruleGroup.getTenantId());
		if(ruleGroup.getName()!=null && !ruleGroup.getName().isEmpty())
			ruleGroupDto.setName(ruleGroup.getName());
		if(ruleGroup.getRulePurpose() != null && !ruleGroup.getRulePurpose().isEmpty())
		{
			ruleGroupDto.setRulePurpose(ruleGroup.getRulePurpose());
			LookUpCode lookUpCode=lookUpCodeRepository.findByLookUpTypeAndLookUpCodeAndTenantId("RULE_GROUP_TYPE",ruleGroup.getRulePurpose(), ruleGroup.getTenantId());
			if(lookUpCode != null &&  lookUpCode.getMeaning() != null)
				ruleGroupDto.setMeaning(lookUpCode.getMeaning());;
		}
		if(ruleGroup.getStartDate()!=null)
			ruleGroupDto.setStartDate(ruleGroup.getStartDate());
		if(ruleGroup.getEndDate()!=null)
			ruleGroupDto.setEndDate(ruleGroup.getEndDate());
		if(ruleGroup.isEnabledFlag()!=null)
			ruleGroupDto.setEnableFlag(ruleGroup.isEnabledFlag());
		if(ruleGroup.getCreatedBy()!=null)
			ruleGroupDto.setCreatedBy(ruleGroup.getCreatedBy());

		List<RuleGroupDetails> ruleGrpDetailsList=ruleGroupDetailsRepository.findByRuleGroupId(groupId);

		List<RulesDTO> ruleDtoList=new ArrayList<RulesDTO>();
		if(ruleGrpDetailsList!=null && ruleGrpDetailsList.size()>0 && (!ruleGroup.getRulePurpose().equals("APPROVALS")) )
		{
			for(int i=0;i<ruleGrpDetailsList.size();i++)
			{
				Rules rule=rulesRepository.findOne(ruleGrpDetailsList.get(i).getRuleId());

				if(rule!=null)
				{
					RulesDTO rulesDto=new RulesDTO();

					RuleDTO ruleDTO = new RuleDTO() ;
					log.info("rule :"+rule);
					ruleDTO.setPriority(ruleGrpDetailsList.get(i).getPriority());
					ruleDTO.setId(rule.getId());
					ruleDTO.setTenantId(rule.getTenantId());
					if(rule.getRuleCode()!=null && !rule.getRuleCode().isEmpty())
						ruleDTO.setRuleCode(rule.getRuleCode());
					if(rule.getStartDate()!=null)
						ruleDTO.setStartDate(rule.getStartDate());
					if(rule.getEndDate()!=null)
						ruleDTO.setEndDate(rule.getEndDate());
					if(rule.isEnabledFlag()!=null)
						ruleDTO.setEnabledFlag(rule.isEnabledFlag());
					ruleDTO.setAssignmentFlag(ruleGrpDetailsList.get(i).isEnabledFlag());
					if(rule.getRuleType()!=null && !rule.getRuleType().isEmpty())
		    			{
						ruleDTO.setRuleType(rule.getRuleType());
		    				LookUpCode lookUpCode=lookUpCodeRepository.findByLookUpTypeAndLookUpCodeAndTenantId("RULE_TYPE",rule.getRuleType(), rule.getTenantId());
	    					if(lookUpCode != null &&  lookUpCode.getMeaning() != null)
	    						ruleDTO.setRuleTypeMeaning( lookUpCode.getMeaning() );
		    			}
						
					if(rule.getCreatedBy()!=null)
						ruleDTO.setCreatedBy(rule.getCreatedBy());
					if(rule.getLastUpdatedBy()!=null)
						ruleDTO.setLastUpdatedBy(rule.getLastUpdatedBy());
					if(rule.getCreationDate()!=null)
						ruleDTO.setCreationDate(rule.getCreationDate());
					if(rule.getLastUpdatedDate()!=null)
						ruleDTO.setLastUpdatedDate(rule.getLastUpdatedDate());
					if(rule.getSourceDataViewId()!=null)
					{
						ruleDTO.setSourceDataViewId(rule.getSourceDataViewId());


						DataViews tDataView=dataViewsRepository.findOne(rule.getSourceDataViewId());
						if(tDataView!=null && tDataView.getDataViewName()!=null && !tDataView.getDataViewName().isEmpty())
							ruleDTO.setsDataViewName(tDataView.getDataViewName());
						if(tDataView!=null && tDataView.getDataViewDispName()!=null && !tDataView.getDataViewDispName().isEmpty())
							ruleDTO.setsDataViewDisplayName(tDataView.getDataViewDispName());
					}
					if(rule.getTargetDataViewId()!=null)
					{

						ruleDTO.setTargetDataViewId(rule.getTargetDataViewId());

						DataViews tDataView=dataViewsRepository.findOne(rule.getTargetDataViewId());
						if(tDataView!=null && tDataView.getDataViewName()!=null && !tDataView.getDataViewName().isEmpty())
							ruleDTO.settDataViewName(tDataView.getDataViewName());
						if(tDataView!=null && tDataView.getDataViewDispName()!=null && !tDataView.getDataViewDispName().isEmpty())
							ruleDTO.settDataViewDisplayName(tDataView.getDataViewDispName());
					}

					rulesDto.setRule(ruleDTO);

					//ruleDto.setRuleDTO(rule);
					//ruleGroupDto.setRuleGroupType(rule.getRulePurpose());
					//.setId(rule.getId());
					/*if(rule.getRuleCode()!=null && !rule.getRuleCode().isEmpty())
    					ruleDto.setRuleCode(rule.getRuleCode());
    				if(rule.getRuleName()!=null && !rule.getRuleName().isEmpty())
    					ruleDto.setRuleName(rule.getRuleName());
    				if(rule.getStartDate()!=null)
    					ruleDto.setStartDate(rule.getStartDate());
    				if(rule.getEndDate()!=null)
    					ruleDto.setEndDate(rule.getEndDate());
    				if(rule.isEnabledFlag()!=null)
    					ruleDto.setEnableFlag(rule.isEnabledFlag());
    				if(rule.getRuleType()!=null && !rule.getRuleType().isEmpty())
    					ruleDto.setRuleType(rule.getRuleType());
    				if(rule.getRulePurpose()!=null && !rule.getRulePurpose().isEmpty())
    					ruleDto.setRulePurpose(rule.getRulePurpose());
					 */
					List<RuleConditions> ruleCondList = ruleConditionsRepository.findByRuleId(rule.getId());
					if(ruleCondList.size()>0)
					{
						List<RuleConditionsDTO> ruleConditionsdtoList = new ArrayList<RuleConditionsDTO>();
						for(int j = 0;j<ruleCondList.size() ;j++)
						{
							RuleConditions ruleCondition = new RuleConditions();
							ruleCondition = ruleCondList.get(j);

							RuleConditionsDTO ruleCondDTO = new RuleConditionsDTO();
							//ruleCondDTO.setAggregationMethod(ruleCondition.getAggregationMethod());
							ruleCondDTO.setSequenceNo(j+1);
							if(ruleCondition.getCloseBracket()!=null && !ruleCondition.getCloseBracket().isEmpty())
								ruleCondDTO.setCloseBracket(ruleCondition.getCloseBracket());
							if(ruleCondition.getCreatedBy()!=null)
								ruleCondDTO.setCreatedBy(ruleCondition.getCreatedBy());
							if(ruleCondition.getCreationDate()!=null)
								ruleCondDTO.setCreationDate(ruleCondition.getCreationDate());
							if(ruleCondition.getId()!=null)
								ruleCondDTO.setId(ruleCondition.getId());
							if(ruleCondition.getLastUpdatedBy()!=null)
								ruleCondDTO.setLastUpdatedBy(ruleCondition.getLastUpdatedBy());
							if(ruleCondition.getLastUpdatedDate()!=null)
								ruleCondDTO.setLastUpdatedDate(ruleCondition.getLastUpdatedDate());
							if(ruleCondition.getLogicalOperator()!=null && !ruleCondition.getLogicalOperator().isEmpty())
								ruleCondDTO.setLogicalOperator(ruleCondition.getLogicalOperator());
							if(ruleCondition.getOpenBracket()!=null && !ruleCondition.getOpenBracket().isEmpty())
								ruleCondDTO.setOpenBracket(ruleCondition.getOpenBracket());
							if(ruleCondition.getsOperator()!=null && !ruleCondition.getsOperator().isEmpty())
								ruleCondDTO.setsOperator(ruleCondition.getsOperator());
							if(ruleCondition.gettOperator()!=null && !ruleCondition.gettOperator().isEmpty())
								ruleCondDTO.settOperator(ruleCondition.gettOperator());
							if(ruleCondition.getRuleId()!=null)
								ruleCondDTO.setRuleId(ruleCondition.getRuleId());
							if(ruleCondition.getsColumnId()!=null)
								ruleCondDTO.setsColumnId(ruleCondition.getsColumnId());
							if(ruleDTO.getSourceDataViewId() != null)
							{
								List<HashMap> sColList = new ArrayList<HashMap>();
								sColList = dataViewsService.fetchDataViewAndColumnsByDvId(ruleDTO.getSourceDataViewId());
								ruleCondDTO.setsColumnList(sColList);
								
							}
							//ruleCondDTO.setsDataViewId(ruleCondition.getsDataViewId());
							/*String[] sdataViewDetails = new String[2];
    						sdataViewDetails = dataViewsIdtoNameMap.get(ruleCondDTO.getsDataViewId());

    						if(sdataViewDetails != null)
    						{
    							log.info("sdataViewDetails:"+sdataViewDetails[0]+sdataViewDetails[1]);
    							ruleCondDTO.setsDataviewName(sdataViewDetails[0]);
        						ruleCondDTO.setsDataviewDisplayName(sdataViewDetails[1]);
    						}*/
							log.info("ruleCondition id:"+ruleCondition.getId());
							log.info("ruleCondDTO.getsColumnId()"+ruleCondition.getsColumnId());
							log.info("dataViewColumnsMap.get(ruleCondDTO.getsColumnId())"+dataViewColumnsMap.get(ruleCondition.getsColumnId()));
							log.info("ruleCondDTO.gettColumnId()"+ruleCondition.gettColumnId());
							log.info("dataViewColumnsMap.get(ruleCondDTO.gettColumnId())"+dataViewColumnsMap.get(ruleCondition.gettColumnId()));
							if(dataViewColumnsMap.get(ruleCondition.getsColumnId())!=null && !dataViewColumnsMap.get(ruleCondition.getsColumnId()).isEmpty())
								ruleCondDTO.setsColumnName(dataViewColumnsMap.get(ruleCondition.getsColumnId()));
							//ruleCondDTO.setsColumnType(ruleCondition.getsColumnType());
							if(ruleCondition.gettColumnId()!=null)
								ruleCondDTO.settColumnId(ruleCondition.gettColumnId());
							if(dataViewColumnsMap.get(ruleCondition.gettColumnId())!=null && !dataViewColumnsMap.get(ruleCondition.gettColumnId()).isEmpty())
								ruleCondDTO.settColumnName(dataViewColumnsMap.get(ruleCondition.gettColumnId()));
							//ruleCondDTO.settColumnType(ruleCondition.gettColumnType());
							//ruleCondDTO.settDataViewId(ruleCondition.gettDataViewId());
							
							if(ruleDTO.getTargetDataViewId() != null)
							{
								List<HashMap> tColList = new ArrayList<HashMap>();
								tColList = dataViewsService.fetchDataViewAndColumnsByDvId(ruleDTO.getTargetDataViewId());
								ruleCondDTO.settColumnList(tColList);
								
							}
							
							String[] tdataViewDetails = new String[2];
							//tdataViewDetails = dataViewsIdtoNameMap.get(ruleCondDTO.gettDataViewId());

							/*if(tdataViewDetails  != null)
    						{
    							log.info("tdataViewDetails:"+tdataViewDetails[0]+tdataViewDetails[1]);
    							ruleCondDTO.settDataViewName(tdataViewDetails[0]);
        						ruleCondDTO.settDataViewDisplayName(tdataViewDetails[1]);
    						}*/
							if(ruleCondition.getsFormula()!=null)
								ruleCondDTO.setsFormula(ruleCondition.getsFormula());
							if(ruleCondition.gettFormula()!=null)
								ruleCondDTO.settFormula(ruleCondition.gettFormula());
							if(ruleCondition.issMany()!=null)
								ruleCondDTO.setsMany(ruleCondition.issMany());
							if(ruleCondition.istMany()!=null)
								ruleCondDTO.settMany(ruleCondition.istMany());
							if(ruleCondition.gettToleranceOperatorFrom()!=null && ruleCondition.gettToleranceOperatorFrom().isEmpty())
								ruleCondDTO.settToleranceOperatorFrom(ruleCondition.gettToleranceOperatorFrom());
							if(ruleCondition.gettToleranceOperatorTo()!=null && !ruleCondition.gettToleranceOperatorTo().isEmpty())
								ruleCondDTO.settToleranceOperatorTo(ruleCondition.gettToleranceOperatorTo());
							if(ruleCondition.gettToleranceType()!=null && !ruleCondition.gettToleranceType().isEmpty())
								ruleCondDTO.settToleranceType(ruleCondition.gettToleranceType());
							if(ruleCondition.gettToleranceValueFrom()!=null && !ruleCondition.gettToleranceValueFrom().isEmpty())
							{
								ruleCondDTO.settToleranceValueFrom(ruleCondition.gettToleranceValueFrom());
								//ruleCondDTO.settToleranceValue(ruleCondition.gettToleranceValueFrom());
							}
							if(ruleCondition.gettToleranceValueTo()!=null && !ruleCondition.gettToleranceValueTo().isEmpty())
								ruleCondDTO.settToleranceValueTo(ruleCondition.gettToleranceValueTo());
							if(ruleCondition.getsToleranceOperatorFrom()!=null && ruleCondition.getsToleranceOperatorFrom().isEmpty())
								ruleCondDTO.setsToleranceOperatorFrom(ruleCondition.getsToleranceOperatorFrom());
							if(ruleCondition.getsToleranceOperatorTo()!=null && !ruleCondition.getsToleranceOperatorTo().isEmpty())
								ruleCondDTO.setsToleranceOperatorTo(ruleCondition.getsToleranceOperatorTo());
							if(ruleCondition.getsToleranceType()!=null && !ruleCondition.getsToleranceType().isEmpty())
								ruleCondDTO.setsToleranceType(ruleCondition.getsToleranceType());
							if(ruleCondition.getsToleranceValueFrom()!=null && !ruleCondition.getsToleranceValueFrom().isEmpty())
							{
								ruleCondDTO.setsToleranceValueFrom(ruleCondition.getsToleranceValueFrom());
								//ruleCondDTO.setsToleranceValue(ruleCondition.getsToleranceValueFrom());
							}
							if(ruleCondition.getsToleranceValueTo()!=null && !ruleCondition.getsToleranceValueTo().isEmpty())
								ruleCondDTO.setsToleranceValueTo(ruleCondition.getsToleranceValueTo());
							if(ruleCondition.getsValue()!=null && !ruleCondition.getsValue().isEmpty())
								ruleCondDTO.setsValue(ruleCondition.getsValue());
							if(ruleCondition.gettValue()!=null && !ruleCondition.gettValue().isEmpty())
								ruleCondDTO.settValue(ruleCondition.gettValue());
							if(ruleCondition.getValue()!=null)
								ruleCondDTO.setValue(ruleCondition.getValue());
							if(ruleCondition.getOperator()!=null)
								ruleCondDTO.setOperator(ruleCondition.getOperator());
							if(ruleCondition.getsColumnFieldName()!=null && !ruleCondition.getsColumnFieldName().isEmpty() )
								ruleCondDTO.setOperator(ruleCondition.getsColumnFieldName());
							if(ruleCondition.getsValueType()!=null && !ruleCondition.getsValueType().isEmpty() )
								ruleCondDTO.setOperator(ruleCondition.getsValueType());
							if(ruleCondition.gettValueType()!=null && !ruleCondition.gettValueType().isEmpty())
								ruleCondDTO.settValueType(ruleCondition.gettValueType());

							ruleConditionsdtoList.add(ruleCondDTO);


						}
						rulesDto.setRuleConditions(ruleConditionsdtoList);
					}

					if(rulesDto!=null)
						ruleDtoList.add(rulesDto);
				}

			}
		}
		if(ruleDtoList!=null)
			ruleGroupDto.setRules(ruleDtoList);
		return ruleGroupDto;
	}
    
    
    
	
/**
 * Author:ravali
 * @param accountingRuleDTO
 * @param tenantId
 * @param userId
 * Desc:rules,ruleGrp,postAcctRule and AcctRuleDerivations
 */
	

	 @PostMapping("/postAcctRuleConditionsAndAcctRuleDerivations")
	 @Timed
	 public List<ErrorReport> post(@RequestBody AccountingRuleDTO accountingRuleDTO)
	 {

		 log.info("Request Rest to post accounting rule conditions and derivations");
		 AccountingRuleDTO acctRuleDTO=accountingRuleDTO;
		 RuleGroup ruleGrp=new RuleGroup();
		 List<ErrorReport> errorReport=new ArrayList<ErrorReport>();
		 if(acctRuleDTO.getId()!=null && acctRuleDTO.getId()!=0)
		 {
			 ruleGrp.setId(acctRuleDTO.getId());
		 }
		 else
		 {

		 }

		 if(acctRuleDTO.getName()!=null && !acctRuleDTO.getName().isEmpty())
			 ruleGrp.setName(acctRuleDTO.getName());
		 if(acctRuleDTO.getRulePurpose()!=null && !acctRuleDTO.getRulePurpose().isEmpty())
			 ruleGrp.setRulePurpose(acctRuleDTO.getRulePurpose());
		 if(acctRuleDTO.getStartDate()!=null)
			 ruleGrp.setStartDate(acctRuleDTO.getStartDate().plusDays(1));
		 if(acctRuleDTO.getEndDate()!=null)
			 ruleGrp.setEndDate(acctRuleDTO.getEndDate().plusDays(1));
		 if(acctRuleDTO.getEnabledFlag()!=null)
			 ruleGrp.enabledFlag(acctRuleDTO.getEnabledFlag());
		 ruleGrp.setTenantId(accountingRuleDTO.getTenantId());
		 ruleGrp.setCreatedBy(accountingRuleDTO.getCreatedBy());
		 ruleGrp.setLastUpdatedBy(accountingRuleDTO.getCreatedBy());
		 ruleGrp.setCreationDate(ZonedDateTime.now());
		 ruleGrp.setLastUpdatedDate(ZonedDateTime.now());
		 RuleGroup ruleGrpId=ruleGroupRepository.save(ruleGrp);


		 if(ruleGrpId!=null && ruleGrpId.getId()!=null)
		 {
			 ErrorReport ruleGroupSave=new ErrorReport();
			 ruleGroupSave.setTaskName("Rule Group Save");
			 ruleGroupSave.setTaskStatus("Success");
			 ruleGroupSave.setDetails(ruleGrpId.getId()+"");
			 errorReport.add(ruleGroupSave);
			 //ruleId's By ruleGrpId
			 List<BigInteger> ruleIdsList=ruleGroupDetailsRepository.fetchRuleIdsByGroupAndTenantId(ruleGrpId.getId(),ruleGrpId.getTenantId());
			 log.info("ruleIdsList before:"+ruleIdsList);

			 List<RulesAndLineItems> rulesAndItems=acctRuleDTO.getRules();
			 for(int i=0;i<rulesAndItems.size();i++)
			 {
				 RulesAndLineItems ruleItem=rulesAndItems.get(i);
				 Rules rule=new Rules();

				 if(ruleItem.getId()!=null && ruleItem.getId()!=0)
				 {

					 rule.setId(ruleItem.getId());
					 if(ruleIdsList.size()>0)
					 {
						 for(int id=0;id<ruleIdsList.size();id++)
						 {
							 log.info("ruleIdsList.get(id) :"+ruleIdsList.get(id));
							 log.info("ruleDTO.get(i).getRule().getId() :"+ruleItem.getId());
							 if(ruleIdsList.get(id).longValue()==ruleItem.getId())
							 {
								 log.info("same");
								 ruleIdsList.remove(ruleIdsList.get(id));
							 }
						 }
					 }
					 log.info("ruleIdsList after:"+ruleIdsList);
					 

				 }
				// else

				// {
					 
					 for(int j=0;j<ruleIdsList.size();j++)
					 {
						 log.info("ruleIdsList.get(j).longValue() :"+ruleIdsList.get(j).longValue());
						 log.info("newGrp.getId() :"+ruleGrpId.getId());
						 RuleGroupDetails ruleGroup=ruleGroupDetailsRepository.findByRuleGroupIdAndRuleId(ruleGrpId.getId(),ruleIdsList.get(j).longValue());
						 log.info("ruleGrpId :"+ruleGrp);
						 log.info("");
						 if(ruleGroup!=null)
							 ruleGroupDetailsRepository.delete(ruleGroup);
					 }
					 if(ruleItem.getRuleCode()!=null && !ruleItem.getRuleCode().isEmpty())
						 rule.setRuleCode(ruleItem.getRuleCode());
					 if(ruleItem.getStartDate()!=null)
						 rule.setStartDate(ruleItem.getStartDate().plusDays(1));
					 if(ruleItem.getEndDate()!=null)
						 rule.setEndDate(ruleItem.getEndDate().plusDays(1));
					 if(ruleItem.getEnabledFlag()!=null)
						 rule.setEnabledFlag(ruleItem.getEnabledFlag());
					 if(ruleItem.getRuleType()!=null && !ruleItem.getRuleType().isEmpty())
						 rule.setRuleType(ruleItem.getRuleType());
					 if(ruleItem.getCoa()!=null && !ruleItem.getCoa().isEmpty())
						 rule.setCOA(ruleItem.getCoa());
					 rule.setTenantId(accountingRuleDTO.getTenantId());
					 rule.setCreatedBy(accountingRuleDTO.getCreatedBy());
					 rule.setLastUpdatedBy(accountingRuleDTO.getCreatedBy());
					 rule.setCreationDate(ZonedDateTime.now());
					 rule.setLastUpdatedDate(ZonedDateTime.now());

					 Rules ruleID=rulesRepository.save(rule);
					 
					
					 
					 if(ruleID.getId()!=null && ruleGrpId.getId()!=null)
					 {
						 if(ruleID.getRuleType()!=null && ruleID.getRuleType().equalsIgnoreCase("ADHOC"))
						 {
							 log.info("ruleID.getRuleType() :"+ruleID.getRuleType());
							 HashMap parameterSet = new HashMap<>();
								parameterSet.put("param1",ruleGrpId.getId());
								log.info("ruleGrpId.getId() :"+ruleGrpId.getId());
								parameterSet.put("param2",ruleID.getId());
								log.info("ruleID :"+ruleID.getId());
								log.info("ruleGroupDTO.getLastUpdatedby() :"+accountingRuleDTO.getLastUpdatedBy());
								ResponseEntity response= oozieService.jobIntiateForAcctAndRec(accountingRuleDTO.getTenantId(), accountingRuleDTO.getLastUpdatedBy(), "Reconcilation", parameterSet);
								ErrorReport jobInitiation=new ErrorReport();
								jobInitiation.setTaskName("Job Initiation");
												
								log.info("response.getBody() :"+response.getBody());
								String status=response.getBody().toString().substring(8).replaceAll("\\}", "");
								log.info("status :"+status);
								log.info("response.getstatusValue :"+response.getStatusCodeValue());
								
								
								jobInitiation.setTaskStatus(status);
								errorReport.add(jobInitiation);
						 }
						
						 RuleGroupDetails ruleGrpDetails=new RuleGroupDetails();
						 RuleGroupDetails ruleGrpDet=ruleGroupDetailsRepository.findByRuleGroupIdAndRuleId(ruleGrpId.getId(),ruleID.getId());
							if(ruleGrpDet!=null)
							{
								ruleGrpDet.setEnabledFlag(ruleItem.isAssignmentFlag());
								ruleGroupDetailsRepository.save(ruleGrpDet);
								//ruleGroupDetailsRepository.save(ruleGrpDet);
							}
							else
							{
						
						 ruleGrpDetails.setRuleGroupId(ruleGrpId.getId());
						 ruleGrpDetails.setRuleId(ruleID.getId());
						 ruleGrpDetails.setTenantId(accountingRuleDTO.getTenantId());
						 ruleGrpDetails.setPriority(ruleItem.getPriority());
						 ruleGrpDetails.setCreatedBy(accountingRuleDTO.getCreatedBy());
						 ruleGrpDetails.setLastUpdatedBy(accountingRuleDTO.getCreatedBy());
						 ruleGrpDetails.setEnabledFlag(ruleItem.isAssignmentFlag());
						 ruleGrpDetails.setCreationDate(ZonedDateTime.now());
						 ruleGrpDetails.setLastUpdatedDate(ZonedDateTime.now());
						 RuleGroupDetails ruleGrpDets=ruleGroupDetailsRepository.save(ruleGrpDetails);
							}
					 }
					 List<LineItems> lineItemsList=rulesAndItems.get(i).getLineItems();
					 for(LineItems lineItems:lineItemsList)
					 {
						
						 AccountingLineTypes acctLineType=new AccountingLineTypes();
						 AccountingLineTypes actLinetypeId=new AccountingLineTypes();
						 if(lineItems.getId()!=null && lineItems.getId()!=0)
						 {
							// acctLineType.setId(lineItems.getId());
						 }
						 else
						 {
						 acctLineType.setTenantId(accountingRuleDTO.getTenantId());
						 acctLineType.setRuleId(ruleID.getId());
						 acctLineType.setLineType(lineItems.getLineType());
						 acctLineType.setDataViewId(lineItems.getSourceDataviewId());
						 acctLineType.setCreatedBy(accountingRuleDTO.getCreatedBy());
						 acctLineType.setLastUpdatedBy(accountingRuleDTO.getCreatedBy());
						 acctLineType.setCreationDate(ZonedDateTime.now());
						 acctLineType.setLastUpdatedDate(ZonedDateTime.now());
						 actLinetypeId=accountingLineTypesRepository.save(acctLineType);
						 }
						log.info("actLinetypeId :"+actLinetypeId);
						 List<AcctRuleCondDTO> acctRuleCondDTOList=lineItems.getAccountingRuleConditions();
						 for(AcctRuleCondDTO acctRuleCondDTO:acctRuleCondDTOList)
						 {
							 AcctRuleConditions acctRuleCond=new AcctRuleConditions();

							 if(acctRuleCondDTO.getId()!=null && acctRuleCondDTO.getId()!=0)
							 {

							 }
							 else
							 {
								 acctRuleCond.setRuleId(ruleID.getId());
								 acctRuleCond.setRuleActionId(actLinetypeId.getId());
								 if(acctRuleCondDTO.getOpenBracket()!=null && !acctRuleCondDTO.getOpenBracket().isEmpty())
									 acctRuleCond.setOpenBracket(acctRuleCondDTO.getOpenBracket());
								 if(acctRuleCondDTO.getOperator()!=null && !acctRuleCondDTO.getOperator().isEmpty())
									 acctRuleCond.setOperator(acctRuleCondDTO.getOperator());
								 if(acctRuleCondDTO.getValue()!=null && !acctRuleCondDTO.getValue().isEmpty())
									 acctRuleCond.setValue(acctRuleCondDTO.getValue());
								 if(acctRuleCondDTO.getCloseBracket()!=null && !acctRuleCondDTO.getCloseBracket().isEmpty())
									 acctRuleCond.setCloseBracket(acctRuleCondDTO.getCloseBracket());
								 if(acctRuleCondDTO.getLogicalOperator()!=null && !acctRuleCondDTO.getLogicalOperator().isEmpty())
									 acctRuleCond.setLogicalOperator(acctRuleCondDTO.getLogicalOperator());
								 if(acctRuleCondDTO.getsViewColumnId()!=null)
									 acctRuleCond.setsViewColumnId(acctRuleCondDTO.getsViewColumnId());
								 if(acctRuleCondDTO.getFunc()!=null && !acctRuleCondDTO.getFunc().isEmpty())
									 acctRuleCond.setFunction(acctRuleCondDTO.getFunc());

								 acctRuleCond.setCreatedBy(accountingRuleDTO.getCreatedBy());
								 acctRuleCond.setLastUpdatedBy(accountingRuleDTO.getCreatedBy());
								 acctRuleCond.setCreatedDate(ZonedDateTime.now());
								 acctRuleCond.setLastUpdatedDate(ZonedDateTime.now());
								 AcctRuleConditions actCond= acctRuleConditionsRepository.save(acctRuleCond);
								 if(actCond!=null && actCond.getId()!=null)
								 {

								 }
								 else
								 {
									 ErrorReport ruleConditionSave=new ErrorReport();
									 ruleConditionSave.setTaskName("Acct Rule Condition Save");
									 ruleConditionSave.setTaskStatus("failure");
									 errorReport.add(ruleConditionSave);
								 }
							 }
						 }
						 List<AcctRuleDerivationDTO> acctRuleDerDTOList=lineItems.getAccountingRuleDerivations();
						 for(AcctRuleDerivationDTO acctRuleDerDTO:acctRuleDerDTOList)
						 {
							 AcctRuleDerivations acctRuleDer=new AcctRuleDerivations();

							 if(acctRuleDerDTO.getId()!=null && acctRuleDerDTO.getId()!=0)
							 {

							 }
							 else
							 {
								 acctRuleDer.setAcctRuleActionId(actLinetypeId.getId());
								 if(acctRuleDerDTO.getDataViewColumn()!=null)
									 acctRuleDer.setDataViewColumn(acctRuleDerDTO.getDataViewColumn().toString());
								 if(acctRuleDerDTO.getAccountingReferencesCode()!=null && !acctRuleDerDTO.getAccountingReferencesCode().isEmpty())
									 acctRuleDer.setAccountingReferences(acctRuleDerDTO.getAccountingReferencesCode());
								 if(acctRuleDerDTO.getConstantValue()!=null && !acctRuleDerDTO.getConstantValue().isEmpty())
									 acctRuleDer.setConstantValue(acctRuleDerDTO.getConstantValue());
								 if(acctRuleDerDTO.getMappingSetId()!=null)
									 acctRuleDer.setMappingSetId(acctRuleDerDTO.getMappingSetId());
								 acctRuleDer.setCreatedBy(accountingRuleDTO.getCreatedBy());
								 acctRuleDer.setLastUpdatedBy(accountingRuleDTO.getCreatedBy());
								 acctRuleDer.setCreatedDate(ZonedDateTime.now());
								 acctRuleDer.setLastUpdatedDate(ZonedDateTime.now());
								 AcctRuleDerivations acctDer= acctRuleDerivationsRepository.save(acctRuleDer);
								 if(acctDer!=null && acctDer.getId()!=null)
								 {

								 }
								 else
								 {
									 ErrorReport ruleDerSave=new ErrorReport();
									 ruleDerSave.setTaskName("Acct Rule Derivation Save");
									 ruleDerSave.setTaskStatus("failure");
									 errorReport.add(ruleDerSave);
								 }
							 }

						 }

					 }
				// }
			 }
		 }
		 else
		 {
			 ErrorReport ruleGroupSave=new ErrorReport();
			 ruleGroupSave.setTaskName("Rule Group Save");
			 ruleGroupSave.setTaskStatus("failure");
			 errorReport.add(ruleGroupSave);
		 }
		 return errorReport;

	 }
	 
	 
	 
	 /**
	  * Author:Ravali
	  * @param groupId
	  * @return fetchAcctRuleConditionsAndAcctRuleDerivations
	  */
	
	    @GetMapping("/fetchAcctRuleConditionsAndAcctRuleDerivations")
		@Timed
	    public AccountingRuleDTO fetchAcctRulesCondAndDervtn(@RequestParam("groupId") Long groupId)
	    {
	    	log.info("Request Rest to post accounting rule conditions and derivations");
	    	AccountingRuleDTO acctRuleDTO=new AccountingRuleDTO();
	    	RuleGroup ruleGrp=ruleGroupRepository.findOne(groupId);
	    	if(ruleGrp.getId() != null )
	    		acctRuleDTO.setId(ruleGrp.getId());
	    	if(ruleGrp.getName()!=null && !ruleGrp.getName().isEmpty())
	    		acctRuleDTO.setName(ruleGrp.getName());
	    	if(ruleGrp.getRulePurpose()!=null && !ruleGrp.getRulePurpose().isEmpty())
			{
	    		acctRuleDTO.setRulePurpose(ruleGrp.getRulePurpose());
				LookUpCode lookUpCode=lookUpCodeRepository.findByLookUpTypeAndLookUpCodeAndTenantId("RULE_GROUP_TYPE",ruleGrp.getRulePurpose(), ruleGrp.getTenantId());
				if(lookUpCode != null &&  lookUpCode.getMeaning() != null)
					acctRuleDTO.setMeaning(lookUpCode.getMeaning());
			}
	    	if(ruleGrp.getStartDate()!=null)
	    		acctRuleDTO.setStartDate(ruleGrp.getStartDate());
	    	if(ruleGrp.getEndDate()!=null)
	    		acctRuleDTO.setEndDate(ruleGrp.getEndDate());
	    	if(ruleGrp.isEnabledFlag()!=null)
	    		acctRuleDTO.setEnabledFlag(ruleGrp.isEnabledFlag());

	    	List<RulesAndLineItems> rulesAndItems=new ArrayList<RulesAndLineItems>();
	    	List<RuleGroupDetails> ruleGrpDetailsList=ruleGroupDetailsRepository.findByRuleGroupId(groupId);
	    	if(ruleGrpDetailsList.size()>0)
	    	{
	    		for(int i=0;i<ruleGrpDetailsList.size();i++)
	    		{
	    			Rules rule=rulesRepository.findOne(ruleGrpDetailsList.get(i).getRuleId());

	    			RulesAndLineItems ruleItem=new RulesAndLineItems();
	    			ruleItem.setId(rule.getId());
	    			if(rule.getRuleCode()!=null && !rule.getRuleCode().isEmpty())
	    				ruleItem.setRuleCode(rule.getRuleCode());
	    			if(rule.getStartDate()!=null)
	    				ruleItem.setStartDate(rule.getStartDate());
	    			if(rule.getEndDate()!=null)
	    				ruleItem.setEndDate(rule.getEndDate());
	    			if(rule.isEnabledFlag()!=null)
	    				ruleItem.setEnabledFlag(rule.isEnabledFlag());
	    			if(rule.getRuleType()!=null && !rule.getRuleType().isEmpty())
	    			{
	    				ruleItem.setRuleType(rule.getRuleType());
	    				LookUpCode lookUpCode=lookUpCodeRepository.findByLookUpTypeAndLookUpCodeAndTenantId("RULE_TYPE",rule.getRuleType(), rule.getTenantId());
    					if(lookUpCode != null &&  lookUpCode.getMeaning() != null)
    						ruleItem.setRuleTypeMeaning( lookUpCode.getMeaning() );
	    			}
	    			
	    			if(rule.getCOA()!=null && !rule.getCOA().isEmpty())
	    				ruleItem.setCoa(rule.getCOA());
	    			if(ruleGrpDetailsList.get(i).isEnabledFlag() !=null)
	    			ruleItem.setAssignmentFlag(ruleGrpDetailsList.get(i).isEnabledFlag());
	    			List<LineItems> lineItemsList=new ArrayList<LineItems>();
	    			List<AccountingLineTypes> acctLineTypesList=accountingLineTypesRepository.findByRuleId(rule.getId());
	    			for(AccountingLineTypes acctLineTypes:acctLineTypesList)
	    			{
	    				LineItems lineItems=new LineItems();

	    				lineItems.setId(acctLineTypes.getId());
	    				lineItems.setLineType(acctLineTypes.getLineType());
	    				lineItems.setSourceDataviewId(acctLineTypes.getDataViewId());
	    				if(acctLineTypes.getDataViewId() != null)
						{
							List<HashMap> sColList = new ArrayList<HashMap>();
							sColList = dataViewsService.fetchDataViewAndColumnsByDvId(acctLineTypes.getDataViewId());
							DataViews dv = new DataViews();
							dv =dataViewsRepository.findOne(acctLineTypes.getDataViewId());
							lineItems.setSourceDataviewDisplayName(dv.getDataViewDispName());
							lineItems.setColumnsForDV(sColList);
						}

	    				List<AcctRuleCondDTO> acctRuleCondDTOList=new ArrayList<AcctRuleCondDTO>();
	    				List<AcctRuleConditions> acctRuleCondList=acctRuleConditionsRepository.findByRuleActionId(acctLineTypes.getId());
	    				Integer seq = 0 ;
	    				for(AcctRuleConditions acctRuleCond:acctRuleCondList)
	    				{
	    					// AcctRuleConditions acctRuleCond=new AcctRuleConditions();
	    					AcctRuleCondDTO acctRuleCondDTO=new AcctRuleCondDTO();
	    					seq = seq+1;
	    					acctRuleCondDTO.setSequence(seq);
	    					acctRuleCondDTO.setId(acctRuleCond.getId());
	    					if(acctRuleCond.getOpenBracket()!=null && !acctRuleCond.getOpenBracket().isEmpty())
	    						acctRuleCondDTO.setOpenBracket(acctRuleCond.getOpenBracket());
	    					if(acctRuleCond.getOperator()!=null && !acctRuleCond.getOperator().isEmpty())
	    						acctRuleCondDTO.setOperator(acctRuleCond.getOperator());
	    					if(acctRuleCond.getValue()!=null && !acctRuleCond.getValue().isEmpty())
	    						acctRuleCondDTO.setValue(acctRuleCond.getValue());
	    					if(acctRuleCond.getCloseBracket()!=null && !acctRuleCond.getCloseBracket().isEmpty())
	    						acctRuleCondDTO.setCloseBracket(acctRuleCond.getCloseBracket());
	    					if(acctRuleCond.getLogicalOperator()!=null && !acctRuleCond.getLogicalOperator().isEmpty())
	    						acctRuleCondDTO.setLogicalOperator(acctRuleCond.getLogicalOperator());
	    					if(acctRuleCond.getsViewColumnId()!=null)
	    					{
	    						acctRuleCondDTO.setsViewColumnId(acctRuleCond.getsViewColumnId());
	    						DataViewsColumns dViewCol=dataViewsColumnsRepository.findOne(acctRuleCond.getsViewColumnId());
	    						if(dViewCol!=null)
	    							acctRuleCondDTO.setsViewColumnName(dViewCol.getColumnName());
	    					}
	    					
	    					if(acctRuleCond.getFunction()!=null && !acctRuleCond.getFunction().isEmpty())
	    						acctRuleCondDTO.setFunc(acctRuleCond.getFunction());


	    					acctRuleCondDTOList.add(acctRuleCondDTO);

	    				}

	    				List<AcctRuleDerivationDTO> acctRuleDerDTOList=new ArrayList<AcctRuleDerivationDTO>();
	    				List<AcctRuleDerivations> acctRuleDerList=acctRuleDerivationsRepository.findByAcctRuleActionId(acctLineTypes.getId());
	    				for(AcctRuleDerivations acctRuleDer:acctRuleDerList)
	    				{
	    					AcctRuleDerivationDTO acctRuleDerDTO=new AcctRuleDerivationDTO();

	    					acctRuleDerDTO.setId(acctRuleDer.getId());
	    					if(acctRuleDer.getDataViewColumn()!=null &&!acctRuleDer.getDataViewColumn().isEmpty())
	    						acctRuleDerDTO.setDataViewColumn(Long.valueOf(acctRuleDer.getDataViewColumn()));
	    					if(acctRuleDer.getAccountingReferences()!=null && !acctRuleDer.getAccountingReferences().isEmpty())
	    					{
	    						acctRuleDerDTO.setAccountingReferencesCode(acctRuleDer.getAccountingReferences());
	    						LookUpCode lookUpCode=lookUpCodeRepository.findByTenantIdAndLookUpCodeAndLookUpType(ruleGrp.getTenantId(),acctRuleDer.getAccountingReferences(),rule.getCOA());
	    						if(lookUpCode != null &&lookUpCode.getMeaning()!=null)
	    							acctRuleDerDTO.setAccountingReferencesMeaning(lookUpCode.getMeaning());
	    					}
	    					if(acctRuleDer.getConstantValue()!=null && !acctRuleDer.getConstantValue().isEmpty())
	    						acctRuleDerDTO.setConstantValue(acctRuleDer.getConstantValue());
	    					if(acctRuleDer.getMappingSetId()!=null)
	    					{

	    						acctRuleDerDTO.setMappingSetId(acctRuleDer.getMappingSetId());
	    						MappingSet mappinSet=mappingSetRepository.findOne(acctRuleDer.getMappingSetId());
	    						if(mappinSet!=null)
	    							acctRuleDerDTO.setMappingSetName(mappinSet.getName());
	    					}


	    					acctRuleDerDTOList.add(acctRuleDerDTO);

	    				}

	    				lineItems.setAccountingRuleConditions(acctRuleCondDTOList);
	    				lineItems.setAccountingRuleDerivations(acctRuleDerDTOList);
	    				lineItemsList.add(lineItems);
	    			}

	    			ruleItem.setLineItems(lineItemsList);
	    			rulesAndItems.add(ruleItem);
	    		}

	    		acctRuleDTO.setRules(rulesAndItems);
	    	}

	    	return acctRuleDTO;
	    }
	    
	  
	   /**
	    * Author: ravali
	    * @param tenantId
	    * @param purpose
	    * @return rule group Id's
	    */
	    @GetMapping("/fetchRuleGroupIdsByTenantIdAndPurpose")
		@Timed
		public List<RuleGroup> getRuleGrpIds(@RequestParam Long tenantId,@RequestParam String purpose)
		{
	    	log.info("Request Rest to fetch rule Group Id By tenantId :"+tenantId+" and purpose :"+purpose);
	    	List<RuleGroup> ruleGrp=ruleGroupRepository.fetchByTenantIdAndRulePurpose(tenantId,purpose);
	    	return ruleGrp;
		}
	    
	    /**
	     * author:ravali
	     * @param tenantId
	     * @param ruleGroupId
	     * @return dataviewIds
	     */
	    @GetMapping("/fetchDataViewIds")
		@Timed
		public List<HashMap> getDataViewIds(@RequestParam Long tenantId,@RequestParam Long ruleGroupId)
		{
	    	log.info("Request Rest to fetch dataView Ids By tenantId :"+tenantId+" and ruleGrpId :"+ruleGroupId);
	    	List<HashMap> mapList=new ArrayList<HashMap>();
	    	RuleGroup ruleGrp=ruleGroupRepository.findOne(ruleGroupId);

	    	List<RuleGroupDetails> ruleGroupDetailsList=ruleGroupDetailsRepository.findByRuleGroupId(ruleGroupId);

	    	List<Long> dataViewIdList=new ArrayList<Long>();
	    	if(ruleGrp!=null && ruleGrp.getRulePurpose().equalsIgnoreCase("ACCOUNTING"))
	    	{
	    		HashMap map=new HashMap();
	    		List<BigInteger> dataViewIds=accountingLineTypesRepository.fetchDataViewIdsByTenantIdAndRuleId(tenantId,ruleGroupId);
	    		log.info("dataViewIds :"+dataViewIds);
	    		map.put("accountingDataViewIds", dataViewIds);
	    		if(!map.isEmpty())
	    			mapList.add(map);
	    	}
	    	else if(ruleGrp!=null && ruleGrp.getRulePurpose().equalsIgnoreCase("RECONCILIATION"))
	    	{
	    		for(RuleGroupDetails ruleGroupDetails:ruleGroupDetailsList)
	    		{

	    			HashMap map=new HashMap();
	    			Rules rule=rulesRepository.findOne(ruleGroupDetails.getRuleId());
	    			map.put("ruleId", rule.getId());
	    			HashMap dv=new HashMap();
	    			if(rule.getSourceDataViewId()!=null)
	    				dv.put("source", rule.getSourceDataViewId());
	    			if(rule.getTargetDataViewId()!=null)
	    				dv.put("target", rule.getTargetDataViewId());
	    			if(dv!=null && !dv.isEmpty())
	    				map.put("dataViews", dv);
	    			if(map!=null && !map.isEmpty())
	    				mapList.add(map);

	    		}
	    	}
	    	return mapList;




		}
	    
	    /**
	     * author:Ravali
	     * @param tenantId
	     * @return
	     */
	    @GetMapping("/RuleGroupsWithMeaning")
		@Timed
		public List<RuleGroupDTO> getruleGrpDetails(@RequestParam(value = "page" , required = false) Integer offset,
				@RequestParam(value = "per_page", required = false) Integer limit,@RequestParam Long tenantId) throws URISyntaxException {
	    	log.debug("REST request to get a page of Rule groups"+offset+"=>"+limit+"=>"+limit+"tenantId=>"+tenantId);
	    	List<RuleGroup> ruleGroupList = new ArrayList<RuleGroup>();
	    	PaginationUtil paginationUtil=new PaginationUtil();

	    	int maxlmt=paginationUtil.MAX_LIMIT;
	    	int minlmt=paginationUtil.MIN_OFFSET;
	    	log.info("maxlmt: "+maxlmt);
	    	Page<RuleGroup> page = null;
	    	HttpHeaders headers = null;

	    	if(limit==null || limit<minlmt){
	    		ruleGroupList = ruleGroupRepository.findByTenantIdOrderByIdDesc(tenantId);
	    		limit = ruleGroupList.size();
	    	}
	    	if(limit == 0 )
	    	{
	    		limit = paginationUtil.DEFAULT_LIMIT;
	    	}
	    	if(offset == null || offset == 0)
	    	{
	    		offset = paginationUtil.DEFAULT_OFFSET;
	    	}
	    	log.info("offset, limit"+offset+"=>"+ limit);
	    	if(limit>maxlmt)
	    	{
	    		log.info("input limit exceeds maxlimit");
	    		page = ruleGroupRepository.findByTenantIdOrderByIdDesc(tenantId,PaginationUtil.generatePageRequest2(offset, limit));
	    		headers = PaginationUtil.generatePaginationHttpHeaders2(page, "/api/ruleGroupsByTenantId",offset, limit);
	    	}
	    	else{
	    		log.info("input limit is within maxlimit");
	    		page = ruleGroupRepository.findByTenantIdOrderByIdDesc(tenantId,PaginationUtil.generatePageRequest(offset, limit));
	    		headers = PaginationUtil.generatePaginationHttpHeaderss(page, "/api/ruleGroupsByTenantId", offset, limit);
	    	}
	    	ruleGroupList = page.getContent();
	    	List<RuleGroupDTO> ruleGroupDTOList=new ArrayList<RuleGroupDTO>();
	    	for(RuleGroup  ruleGroup:ruleGroupList)
	    	{
	    		RuleGroupDTO ruleGroupDto=new RuleGroupDTO();
	    		if(ruleGroup.getId()!=null )
	    			ruleGroupDto.setId(ruleGroup.getId());
	    		ruleGroupDto.setTenantId(ruleGroup.getTenantId());
	    		if(ruleGroup.getName()!=null && !ruleGroup.getName().isEmpty())
	    			ruleGroupDto.setName(ruleGroup.getName());
	    		if(ruleGroup.getRulePurpose() != null && !ruleGroup.getRulePurpose().isEmpty())
	    		{
	    			ruleGroupDto.setRulePurpose(ruleGroup.getRulePurpose());
	    			LookUpCode lookUp=lookUpCodeRepository.findByLookUpTypeAndLookUpCodeAndTenantId("RULE_GROUP_TYPE", ruleGroup.getRulePurpose(), tenantId);
	    			if(lookUp!=null)
	    				ruleGroupDto.setMeaning(lookUp.getMeaning());
	    		}
	    		if(ruleGroup.getStartDate()!=null)
	    			ruleGroupDto.setStartDate(ruleGroup.getStartDate());
	    		if(ruleGroup.getEndDate()!=null)
	    			ruleGroupDto.setEndDate(ruleGroup.getEndDate());
	    		if(ruleGroup.getEndDate() != null && ruleGroup.getEndDate().isBefore(LocalDate.now()))
	    		{
	    			ruleGroupDto.setEndDated(true);
	    		}
	    		else
	    		{
	    			ruleGroupDto.setEndDated(false);
	    		}
	    		
	    		if(ruleGroup.isEnabledFlag()!=null)
	    			ruleGroupDto.setEnableFlag(ruleGroup.isEnabledFlag());
	    		if(ruleGroup.getCreatedBy()!=null)
	    			ruleGroupDto.setCreatedBy(ruleGroup.getCreatedBy());
	    		ruleGroupDTOList.add(ruleGroupDto);
	    	}
	    	return ruleGroupDTOList;
	    }

	    
	    
	    
	    /**
	     * author:ravali
	     * @param approvalRuleDto
	     * @return errorReport
	     * Desc: 
	     */
	    @PostMapping("/postAppRuleConditionsAndAppRuleActions")
		 @Timed
		 public List<ErrorReport> postAppRuleConditionsAndRuleActions(@RequestBody ApprovalRuleDto approvalRuleDto)
		 {

			 log.info("Request Rest to post approval rule conditions and actions");
			 ApprovalRuleDto apptRuleDTO=approvalRuleDto;
			 
			 //saving grp
			 RuleGroup ruleGrp=new RuleGroup();
			 List<ErrorReport> errorReport=new ArrayList<ErrorReport>();
			 if(apptRuleDTO.getId()!=null && apptRuleDTO.getId()!=0)
			 {
				 ruleGrp.setId(apptRuleDTO.getId());
			 }
			 else
			 {

			 }

			 if(apptRuleDTO.getName()!=null && !apptRuleDTO.getName().isEmpty())
				 ruleGrp.setName(apptRuleDTO.getName());
			 if(apptRuleDTO.getRulePurpose()!=null && !apptRuleDTO.getRulePurpose().isEmpty())
				 ruleGrp.setRulePurpose(apptRuleDTO.getRulePurpose());
			 if(apptRuleDTO.getStartDate()!=null)
				 ruleGrp.setStartDate(apptRuleDTO.getStartDate().plusDays(1));
			 if(apptRuleDTO.getEndDate()!=null)
				 ruleGrp.setEndDate(apptRuleDTO.getEndDate().plusDays(1));
			 if(apptRuleDTO.getEnabledFlag()!=null)
				 ruleGrp.enabledFlag(apptRuleDTO.getEnabledFlag());
			 ruleGrp.setTenantId(apptRuleDTO.getTenantId());
			 ruleGrp.setCreatedBy(apptRuleDTO.getCreatedBy());
			 ruleGrp.setLastUpdatedBy(apptRuleDTO.getCreatedBy());
			 ruleGrp.setCreationDate(ZonedDateTime.now());
			 ruleGrp.setLastUpdatedDate(ZonedDateTime.now());
			 RuleGroup ruleGrpId=ruleGroupRepository.save(ruleGrp);


			 if(ruleGrpId!=null && ruleGrpId.getId()!=null)
			 {
				 ErrorReport ruleGroupSave=new ErrorReport();
				 ruleGroupSave.setTaskName("Rule Group Save");
				 ruleGroupSave.setTaskStatus("Success");
				 ruleGroupSave.setDetails(ruleGrpId.getId()+"");
				 errorReport.add(ruleGroupSave);
				 //ruleId's By ruleGrpId 
				 List<BigInteger> ruleIdsList=ruleGroupDetailsRepository.fetchRuleIdsByGroupAndTenantId(ruleGrpId.getId(),ruleGrpId.getTenantId());
				 log.info("ruleIdsList before:"+ruleIdsList);

				 List<AppRuleCondAndActDto> rulesAndCond=apptRuleDTO.getRules();
				 for(int i=0;i<rulesAndCond.size();i++)
				 {
					 AppRuleCondAndActDto ruleCond=rulesAndCond.get(i);
					 Rules rule=new Rules();

					 if(ruleCond.getId()!=null && ruleCond.getId() >0)
					 {
						 
						 
						 
						 rule.setId(ruleCond.getId());

						 if(ruleIdsList.size()>0)
						 {
							 for(int id=0;id<ruleIdsList.size();id++)
							 {
								 log.info("ruleIdsList.get(id) :"+ruleIdsList.get(id));
								 log.info("ruleDTO.get(i).getRule().getId() :"+ruleCond.getId());
								 if(ruleIdsList.get(id).longValue()==ruleCond.getId())
								 {
									 log.info("same");
									 ruleIdsList.remove(ruleIdsList.get(id));
								 }
							 }
						 }
						 log.info("ruleIdsList after:"+ruleIdsList);
						 

					 }
				//	 else

				//	 {
						 
						 for(int j=0;j<ruleIdsList.size();j++)
						 {
							 log.info("ruleIdsList.get(j).longValue() :"+ruleIdsList.get(j).longValue());
							 log.info("newGrp.getId() :"+ruleGrpId.getId());
							 RuleGroupDetails ruleGroup=ruleGroupDetailsRepository.findByRuleGroupIdAndRuleId(ruleGrpId.getId(),ruleIdsList.get(j).longValue());
							 log.info("ruleGrpId :"+ruleGrp);
							 log.info("");
							 if(ruleGroup!=null)
								 ruleGroupDetailsRepository.delete(ruleGroup);
						 }
						 if(ruleCond.getRuleCode()!=null && !ruleCond.getRuleCode().isEmpty())
							 rule.setRuleCode(ruleCond.getRuleCode());
						 if(ruleCond.getStartDate()!=null)
							 rule.setStartDate(ruleCond.getStartDate().plusDays(1));
						 if(ruleCond.getEndDate()!=null)
							 rule.setEndDate(ruleCond.getEndDate().plusDays(1));
						 if(ruleCond.getEnabledFlag()!=null)
							 rule.setEnabledFlag(ruleCond.getEnabledFlag());
						 if(ruleCond.getSourceDataViewId()!=null)
							 rule.setSourceDataViewId(ruleCond.getSourceDataViewId());
						 rule.setRuleType(ruleCond.getApprovalNeededType());
						 rule.setTenantId(ruleGrpId.getTenantId());
						 if(ruleGrpId.getCreatedBy()!=null)
						 rule.setCreatedBy(ruleGrpId.getCreatedBy());
						 if(ruleGrpId.getLastUpdatedBy()!=null)
						 rule.setLastUpdatedBy(ruleGrpId.getLastUpdatedBy());
						 rule.setCreationDate(ZonedDateTime.now());
						 rule.setLastUpdatedDate(ZonedDateTime.now());

						 Rules ruleID=rulesRepository.save(rule);
						 if(ruleID.getId()!=null && ruleGrpId.getId()!=null)
						 {
							 RuleGroupDetails ruleGrpDetails=new RuleGroupDetails();
							 RuleGroupDetails ruleGrpDet=ruleGroupDetailsRepository.findByRuleGroupIdAndRuleId(ruleGrpId.getId(),ruleID.getId());
								if(ruleGrpDet!=null)
								{
									ruleGrpDet.setEnabledFlag(ruleCond.getAssignmentFlag());
									ruleGroupDetailsRepository.save(ruleGrpDet);
								}
								else
								{
							
							 ruleGrpDetails.setRuleGroupId(ruleGrpId.getId());
							 ruleGrpDetails.setRuleId(ruleID.getId());
							 ruleGrpDetails.setTenantId(ruleID.getTenantId());
							// ruleGrpDetails.setPriority(ruleCond.getPriority());
							 ruleGrpDetails.setCreatedBy(ruleID.getCreatedBy());
							 ruleGrpDetails.setLastUpdatedBy(ruleID.getCreatedBy());
							 ruleGrpDetails.setEnabledFlag(ruleCond.getAssignmentFlag());
							 ruleGrpDetails.setCreationDate(ZonedDateTime.now());
							 ruleGrpDetails.setLastUpdatedDate(ZonedDateTime.now());
							 RuleGroupDetails ruleGrptag=ruleGroupDetailsRepository.save(ruleGrpDetails);
						 }
						 }
						 List<AppRuleCondDto> appCondtionsList=rulesAndCond.get(i).getApprovalConditions();
						 for(AppRuleCondDto appCondtionsdto:appCondtionsList)
						 {
							 AppRuleConditions appRuleCond=new AppRuleConditions();
							 if(appCondtionsdto.getId()!=null && appCondtionsdto.getId()!=0)
							 {
								 
							 }
							 else
							 {
								 
								 appRuleCond.setRuleId(ruleID.getId());
								 if(appCondtionsdto.getOpenBracket()!=null)
								 appRuleCond.setOpenBracket(appCondtionsdto.getOpenBracket());
								 if(appCondtionsdto.getOperator()!=null)
								 appRuleCond.setOperator(appCondtionsdto.getOperator());
								 if(appCondtionsdto.getValue()!=null)
								 appRuleCond.setValue(appCondtionsdto.getValue());
								 if(appCondtionsdto.getCloseBracket()!=null)
								 appRuleCond.setCloseBracket(appCondtionsdto.getCloseBracket());
								 if(appCondtionsdto.getLogicalOperator()!=null)
								 appRuleCond.setLogicalOperator(appCondtionsdto.getLogicalOperator());
								 if(appCondtionsdto.getColumnId()!=null)
								 appRuleCond.setColumnId(appCondtionsdto.getColumnId());
								 if(ruleGrpId.getCreatedBy()!=null)
								 appRuleCond.setCreatedBy(ruleGrpId.getCreatedBy());
								 if(ruleGrpId.getCreatedBy()!=null)
								 appRuleCond.setLastUpdatedBy(ruleGrpId.getLastUpdatedBy());
								 appRuleCond.setCreatedDate(ZonedDateTime.now());
								 appRuleCond.setLastUpdatedDate(ZonedDateTime.now());
							 }
							 AppRuleConditions appRuleCondId=appRuleConditionsRepository.save(appRuleCond);
							 log.info("appRuleCondId :"+appRuleCondId);
						 } 
						 
						 ApprovalActionDto appActDto=rulesAndCond.get(i).getApprovalActions();
							
						
						 ApprovalRuleAssignment appRuleAssgn=new ApprovalRuleAssignment();
						 appRuleAssgn.setAssignType(appActDto.getAssigneeType());
						 appRuleAssgn.setRuleId(ruleID.getId());
						 List<ApprRuleAssgnDto> apprRulAssgDtoList=appActDto.getActionDetails();
						 
							 
							 for(ApprRuleAssgnDto appRuleAssiDto:apprRulAssgDtoList)
							 {
								 if(appRuleAssiDto.getId()!=null && appRuleAssiDto.getId()>0)
								 {
									 appRuleAssgn.setId(appRuleAssiDto.getId());
								 }
								 else
								 {	 
								 if(appActDto.getAssigneeType()!=null)
								 appRuleAssgn.setAssignType(appActDto.getAssigneeType());
								 if(ruleID.getId()!=null)
								 appRuleAssgn.setRuleId(ruleID.getId());
								 if(appRuleAssiDto.getAssigneeId()!=null)
								 appRuleAssgn.setAssigneeId(appRuleAssiDto.getAssigneeId());
								 if(appRuleAssiDto.getEmail()!=null)
								 appRuleAssgn.setEmail(appRuleAssiDto.getEmail());
								 if(appRuleAssiDto.getAutoApproval()!=null)
								 appRuleAssgn.setAutoApproval(appRuleAssiDto.getAutoApproval());
								 if(ruleGrpId.getCreatedBy()!=null)
								 appRuleAssgn.setCreatedBy(ruleGrpId.getCreatedBy());
								 if(ruleGrpId.getLastUpdatedBy()!=null)
								 appRuleAssgn.setLastUpdatedBy(ruleGrpId.getLastUpdatedBy());
								 appRuleAssgn.setCreationDate(ZonedDateTime.now());
								 appRuleAssgn.setLastUpdatedDate(ZonedDateTime.now());
							 }
								 ApprovalRuleAssignment appAssgn=approvalRuleAssignmentRepository.save(appRuleAssgn);
								 log.info("appAssgn :"+appAssgn);
									 if(appAssgn!=null && appAssgn.getId()!=null)
									 {

									 }
									 else
									 {
										 ErrorReport ruleAssig=new ErrorReport();
										 ruleAssig.setTaskName("Approval rule assigment");
										 ruleAssig.setTaskStatus("failure");
										 errorReport.add(ruleAssig);
									 }
								

							 }

						
					// }
				 }
			 }
			 else
			 {
				 ErrorReport ruleGroupSave=new ErrorReport();
				 ruleGroupSave.setTaskName("Rule Group Save");
				 ruleGroupSave.setTaskStatus("failure");
				 errorReport.add(ruleGroupSave);
			 }
			 return errorReport;

		 }
		 
	    
	    /**
	     * author:ravali
	     * @param groupId
	     * @return ApprovalRuleDto
	     * @throws SQLException 
	     */
	    @GetMapping("/fetchAppRuleConditionsAndAppActions")
		@Timed
	    public ApprovalRuleDto fetchAppRulesCondAndAct(@RequestParam("groupId") Long groupId) throws SQLException
	    {
	    	log.info("Request Rest to get approval rule conditions and actions :" +groupId);
	    	ApprovalRuleDto appRuleDTO=new ApprovalRuleDto();
	    	RuleGroup ruleGrp=ruleGroupRepository.findOne(groupId);
	    	if(ruleGrp.getId() != null )
	    		appRuleDTO.setId(ruleGrp.getId());
	    	if(ruleGrp.getName()!=null && !ruleGrp.getName().isEmpty())
	    		appRuleDTO.setName(ruleGrp.getName());
	    	if(ruleGrp.getRulePurpose()!=null && !ruleGrp.getRulePurpose().isEmpty())
	    		appRuleDTO.setRulePurpose(ruleGrp.getRulePurpose());
	    	if(ruleGrp.getStartDate()!=null)
	    		appRuleDTO.setStartDate(ruleGrp.getStartDate());
	    	if(ruleGrp.getEndDate()!=null)
	    		appRuleDTO.setEndDate(ruleGrp.getEndDate());
	    	if(ruleGrp.isEnabledFlag()!=null)
	    		appRuleDTO.setEnabledFlag(ruleGrp.isEnabledFlag());
	    	log.info("appRuleDTO : "+appRuleDTO.getEnabledFlag());
	    	List<AppRuleCondAndActDto> appRuleCondAndActDtoList=new ArrayList<AppRuleCondAndActDto>();
	    	List<RuleGroupDetails> ruleGrpDetailsList=ruleGroupDetailsRepository.findByRuleGroupId(groupId);
	    	if(ruleGrpDetailsList.size()>0)
	    	{
	    		for(int i=0;i<ruleGrpDetailsList.size();i++)
	    		{
	    			Rules rule=rulesRepository.findOne(ruleGrpDetailsList.get(i).getRuleId());
	    			log.info("rule :"+rule);
	    			AppRuleCondAndActDto appRuleCondAndAct=new AppRuleCondAndActDto();
	    			appRuleCondAndAct.setId(rule.getId());
	    			if(rule.getRuleCode()!=null && !rule.getRuleCode().isEmpty())
	    				appRuleCondAndAct.setRuleCode(rule.getRuleCode());
	    			if(rule.getStartDate()!=null)
	    				appRuleCondAndAct.setStartDate(rule.getStartDate());
	    			if(rule.getEndDate()!=null)
	    				appRuleCondAndAct.setEndDate(rule.getEndDate());
	    			if(rule.isEnabledFlag()!=null)
	    				appRuleCondAndAct.setEnabledFlag(rule.isEnabledFlag());
	    			if(rule.isEnabledFlag() !=null)
	    				appRuleCondAndAct.setAssignmentFlag(ruleGrpDetailsList.get(i).isEnabledFlag());
	    			if(rule.getRuleType() !=null)
	    			{
	    				appRuleCondAndAct.setApprovalNeededType( rule.getRuleType() );
	    				LookUpCode lookUpCode=lookUpCodeRepository.findByLookUpTypeAndLookUpCodeAndTenantId("APPROVAL_TYPE",rule.getRuleType(), ruleGrp.getTenantId());
    					if(lookUpCode != null &&  lookUpCode.getMeaning() != null)
    						appRuleCondAndAct.setApprovalNeededTypeMeaning( lookUpCode.getMeaning() );
	    			}
	    				
	    			if(rule.getSourceDataViewId()!=null)
	    			{
	    				appRuleCondAndAct.setSourceDataViewId(rule.getSourceDataViewId());
	    				DataViews dv=dataViewsRepository.findOne(rule.getSourceDataViewId());
	    				if(dv!=null && dv.getDataViewName()!=null)
	    					appRuleCondAndAct.setSourceDataViewName(dv.getDataViewName());
	    			}
	    			log.info("appRuleCondAndAct.get :"+appRuleCondAndAct.getEnabledFlag());
	    			List<AppRuleCondDto> appRuleCondDtoList=new ArrayList<AppRuleCondDto>();
	    			List<AppRuleConditions> appRuleCondList=appRuleConditionsRepository.findByRuleId(rule.getId());
	    			Integer seq=0;
	    			for(AppRuleConditions appRuleCond:appRuleCondList)
	    			{
	    				AppRuleCondDto appRuleCondDto=new AppRuleCondDto();

	    				seq=seq+1;
	    				appRuleCondDto.setSequence(seq);
	    				appRuleCondDto.setValue(appRuleCond.getValue());
	    				appRuleCondDto.setId(appRuleCond.getId());
	    				if(appRuleCond.getColumnId()!=null)
	    				{
	    					appRuleCondDto.setColumnId(appRuleCond.getColumnId());
	    					DataViewsColumns dvcolName=dataViewsColumnsRepository.findOne(appRuleCond.getColumnId());
	    					if(dvcolName!=null && dvcolName.getColumnName()!=null)
	    						appRuleCondDto.setColumnName(dvcolName.getColumnName());
	    				}
	    				if(appRuleCond.getOperator()!=null)
	    				{
	    					appRuleCondDto.setOperator(appRuleCond.getOperator());
	    					LookUpCode lookUpCode=lookUpCodeRepository.findByLookUpTypeAndLookUpCodeAndTenantId("OPERATOR", appRuleCond.getOperator(), ruleGrp.getTenantId());
	    					if(lookUpCode != null &&  lookUpCode.getMeaning() != null)
	    						appRuleCondDto.setOperatorMeaning(lookUpCode.getMeaning());
	    				}
	    				if(appRuleCond.getLogicalOperator()!=null)
	    				{
	    					appRuleCondDto.setLogicalOperator(appRuleCond.getLogicalOperator());
	    					LookUpCode lookUpCode=lookUpCodeRepository.findByLookUpTypeAndLookUpCodeAndTenantId("LOGICAL_OPERATOR", appRuleCond.getLogicalOperator(), ruleGrp.getTenantId());
	    					if(lookUpCode != null &&  lookUpCode.getMeaning() != null)
	    						appRuleCondDto.setLogicalOperatorMeaning(lookUpCode.getMeaning());
	    				}
	    				appRuleCondDtoList.add(appRuleCondDto);
	    			}
	    			appRuleCondAndAct.setApprovalConditions(appRuleCondDtoList);

	    			ApprovalActionDto appActDto=new ApprovalActionDto();
	    			List<ApprovalRuleAssignment> appRuleAssignList=approvalRuleAssignmentRepository.findByRuleId(rule.getId());
	    			List<ApprRuleAssgnDto> apprRuleAssgnDtoList=new ArrayList<ApprRuleAssgnDto>();
	    			for(ApprovalRuleAssignment  AppRuleAssign:appRuleAssignList)
	    			{
	    				ApprRuleAssgnDto apprRuleAssgnDto=new ApprRuleAssgnDto();
	    				apprRuleAssgnDto.setId(AppRuleAssign.getId());
	    				appActDto.setAssigneeType(AppRuleAssign.getAssignType());
	    				apprRuleAssgnDto.setAssigneeId(AppRuleAssign.getAssigneeId());
	    				if(AppRuleAssign.getAssignType().equalsIgnoreCase("USER"))
	    				{


	    					try{ 
	    						String loginName="";
	    						String assigneeName="";
	    						HashMap map=userJdbcService.jdbcConnc(AppRuleAssign.getAssigneeId());

	    						if(map!=null && map.get("loginName")!=null)
	    							apprRuleAssgnDto.setLoginName(map.get("loginName").toString());
	    						if(map!=null && map.get("assigneeName")!=null)
	    							apprRuleAssgnDto.setAssigneeName(map.get("assigneeName").toString());



	    					}catch(SQLException se){
	    						log.info("se: "+se);
	    					} catch (ClassNotFoundException e) {
	    						// TODO Auto-generated catch block
	    						e.printStackTrace();
	    					}


	    					//apprRuleAssgnDto.setAssigneeName(assigneeName);
	    				}
	    				else if(AppRuleAssign.getAssignType().equalsIgnoreCase("GROUP"))
	    				{
	    				
	    					ApprovalGroups appGroup= new ApprovalGroups(); 
	    					if(AppRuleAssign.getAssigneeId() != null)
	    					appGroup = approvalGroupsRepository.findOne(AppRuleAssign.getAssigneeId());
	    					if(appGroup != null)
	    					{
	    						apprRuleAssgnDto.setAssigneeName(appGroup.getGroupName());
	    					}
	    					
	    				}
	    				apprRuleAssgnDto.setAutoApproval(AppRuleAssign.isAutoApproval());
	    				apprRuleAssgnDto.setNotification(true);
	    				apprRuleAssgnDto.setEmail(AppRuleAssign.isEmail());
	    				apprRuleAssgnDtoList.add(apprRuleAssgnDto);

	    			}

	    			appActDto.setActionDetails(apprRuleAssgnDtoList);
	    			appRuleCondAndAct.setApprovalActions(appActDto);
	    			appRuleCondAndActDtoList.add(appRuleCondAndAct);

	    		}
	    		appRuleDTO.setRules(appRuleCondAndActDtoList);
	    	}

	    	return appRuleDTO;

	    }
	    
	    /**
	     * poc for getting current user
	     * @param useId
	     * @return
	     * @throws ClassNotFoundException
	     * @throws SQLException
	     * @throws NoSuchFieldException
	     * @throws SecurityException
	     */
	    @GetMapping("/map")
		@Timed
	    public Map handleRequest(@RequestParam Long useId) throws NoSuchFieldException, SecurityException {
	        User user = (User) SecurityContextHolder.getContext()
	            .getAuthentication().getPrincipal();
	      //  Query query = em.createNativeQuery("SELECT * FROM User WHERE id="+useId, User.class);
	     //   log.info("query.getResultList() :"+query.getResultList());
	        Map<String, Object> userModel = new HashMap<String, Object>();
	        userModel.put("username", user.getUsername());
	       // log.info("class :"+user.getClass().getField("tenantId")); 
	       log.info("class :"+user.getClass().getField("tenant_id")); 
	        return userModel;
	        
	        
	        
	        
	        
	      }
	    
	    
}
