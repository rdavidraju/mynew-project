package com.nspl.app.web.rest;

import com.nspl.app.AgreeApplicationApp;

import com.nspl.app.domain.AccountingDataMapping;
import com.nspl.app.repository.AccountingDataMappingRepository;
import com.nspl.app.repository.search.AccountingDataMappingSearchRepository;
import com.nspl.app.web.rest.errors.ExceptionTranslator;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.time.ZoneOffset;
import java.time.ZoneId;
import java.util.List;

import static com.nspl.app.web.rest.TestUtil.sameInstant;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the AccountingDataMappingResource REST controller.
 *
 * @see AccountingDataMappingResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = AgreeApplicationApp.class)
public class AccountingDataMappingResourceIntTest {

    private static final Long DEFAULT_ACCT_LINE_TYPE_ID = 1L;
    private static final Long UPDATED_ACCT_LINE_TYPE_ID = 2L;

    private static final String DEFAULT_ACCOUNTING_REF = "AAAAAAAAAA";
    private static final String UPDATED_ACCOUNTING_REF = "BBBBBBBBBB";

    private static final String DEFAULT_ACCOUNTING_TABLE_COLUMN_REF = "AAAAAAAAAA";
    private static final String UPDATED_ACCOUNTING_TABLE_COLUMN_REF = "BBBBBBBBBB";

    private static final String DEFAULT_VALUE_TYPE = "AAAAAAAAAA";
    private static final String UPDATED_VALUE_TYPE = "BBBBBBBBBB";

    private static final String DEFAULT_VALUE = "AAAAAAAAAA";
    private static final String UPDATED_VALUE = "BBBBBBBBBB";

    private static final Long DEFAULT_CREATED_BY = 1L;
    private static final Long UPDATED_CREATED_BY = 2L;

    private static final Long DEFAULT_LAST_UPDATED_BY = 1L;
    private static final Long UPDATED_LAST_UPDATED_BY = 2L;

    private static final ZonedDateTime DEFAULT_CREATION_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_CREATION_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    private static final ZonedDateTime DEFAULT_LAST_UPDATED_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_LAST_UPDATED_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    @Autowired
    private AccountingDataMappingRepository accountingDataMappingRepository;

    @Autowired
    private AccountingDataMappingSearchRepository accountingDataMappingSearchRepository;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restAccountingDataMappingMockMvc;

    private AccountingDataMapping accountingDataMapping;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        AccountingDataMappingResource accountingDataMappingResource = new AccountingDataMappingResource(accountingDataMappingRepository, accountingDataMappingSearchRepository);
        this.restAccountingDataMappingMockMvc = MockMvcBuilders.standaloneSetup(accountingDataMappingResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static AccountingDataMapping createEntity(EntityManager em) {
        AccountingDataMapping accountingDataMapping = new AccountingDataMapping()
            .acctLineTypeId(DEFAULT_ACCT_LINE_TYPE_ID)
            .accountingRef(DEFAULT_ACCOUNTING_REF)
            .accountingTableColumnRef(DEFAULT_ACCOUNTING_TABLE_COLUMN_REF)
            .valueType(DEFAULT_VALUE_TYPE)
            .value(DEFAULT_VALUE)
            .createdBy(DEFAULT_CREATED_BY)
            .lastUpdatedBy(DEFAULT_LAST_UPDATED_BY)
            .creationDate(DEFAULT_CREATION_DATE)
            .lastUpdatedDate(DEFAULT_LAST_UPDATED_DATE);
        return accountingDataMapping;
    }

    @Before
    public void initTest() {
        accountingDataMappingSearchRepository.deleteAll();
        accountingDataMapping = createEntity(em);
    }

    @Test
    @Transactional
    public void createAccountingDataMapping() throws Exception {
        int databaseSizeBeforeCreate = accountingDataMappingRepository.findAll().size();

        // Create the AccountingDataMapping
        restAccountingDataMappingMockMvc.perform(post("/api/accounting-data-mappings")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(accountingDataMapping)))
            .andExpect(status().isCreated());

        // Validate the AccountingDataMapping in the database
        List<AccountingDataMapping> accountingDataMappingList = accountingDataMappingRepository.findAll();
        assertThat(accountingDataMappingList).hasSize(databaseSizeBeforeCreate + 1);
        AccountingDataMapping testAccountingDataMapping = accountingDataMappingList.get(accountingDataMappingList.size() - 1);
        assertThat(testAccountingDataMapping.getAcctLineTypeId()).isEqualTo(DEFAULT_ACCT_LINE_TYPE_ID);
        assertThat(testAccountingDataMapping.getAccountingRef()).isEqualTo(DEFAULT_ACCOUNTING_REF);
        assertThat(testAccountingDataMapping.getAccountingTableColumnRef()).isEqualTo(DEFAULT_ACCOUNTING_TABLE_COLUMN_REF);
        assertThat(testAccountingDataMapping.getValueType()).isEqualTo(DEFAULT_VALUE_TYPE);
        assertThat(testAccountingDataMapping.getValue()).isEqualTo(DEFAULT_VALUE);
        assertThat(testAccountingDataMapping.getCreatedBy()).isEqualTo(DEFAULT_CREATED_BY);
        assertThat(testAccountingDataMapping.getLastUpdatedBy()).isEqualTo(DEFAULT_LAST_UPDATED_BY);
        assertThat(testAccountingDataMapping.getCreationDate()).isEqualTo(DEFAULT_CREATION_DATE);
        assertThat(testAccountingDataMapping.getLastUpdatedDate()).isEqualTo(DEFAULT_LAST_UPDATED_DATE);

        // Validate the AccountingDataMapping in Elasticsearch
        AccountingDataMapping accountingDataMappingEs = accountingDataMappingSearchRepository.findOne(testAccountingDataMapping.getId());
        assertThat(accountingDataMappingEs).isEqualToComparingFieldByField(testAccountingDataMapping);
    }

    @Test
    @Transactional
    public void createAccountingDataMappingWithExistingId() throws Exception {
        int databaseSizeBeforeCreate = accountingDataMappingRepository.findAll().size();

        // Create the AccountingDataMapping with an existing ID
        accountingDataMapping.setId(1L);

        // An entity with an existing ID cannot be created, so this API call must fail
        restAccountingDataMappingMockMvc.perform(post("/api/accounting-data-mappings")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(accountingDataMapping)))
            .andExpect(status().isBadRequest());

        // Validate the Alice in the database
        List<AccountingDataMapping> accountingDataMappingList = accountingDataMappingRepository.findAll();
        assertThat(accountingDataMappingList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    public void getAllAccountingDataMappings() throws Exception {
        // Initialize the database
        accountingDataMappingRepository.saveAndFlush(accountingDataMapping);

        // Get all the accountingDataMappingList
        restAccountingDataMappingMockMvc.perform(get("/api/accounting-data-mappings?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(accountingDataMapping.getId().intValue())))
            .andExpect(jsonPath("$.[*].acctLineTypeId").value(hasItem(DEFAULT_ACCT_LINE_TYPE_ID.intValue())))
            .andExpect(jsonPath("$.[*].accountingRef").value(hasItem(DEFAULT_ACCOUNTING_REF.toString())))
            .andExpect(jsonPath("$.[*].accountingTableColumnRef").value(hasItem(DEFAULT_ACCOUNTING_TABLE_COLUMN_REF.toString())))
            .andExpect(jsonPath("$.[*].valueType").value(hasItem(DEFAULT_VALUE_TYPE.toString())))
            .andExpect(jsonPath("$.[*].value").value(hasItem(DEFAULT_VALUE.toString())))
            .andExpect(jsonPath("$.[*].createdBy").value(hasItem(DEFAULT_CREATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].lastUpdatedBy").value(hasItem(DEFAULT_LAST_UPDATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].creationDate").value(hasItem(sameInstant(DEFAULT_CREATION_DATE))))
            .andExpect(jsonPath("$.[*].lastUpdatedDate").value(hasItem(sameInstant(DEFAULT_LAST_UPDATED_DATE))));
    }

    @Test
    @Transactional
    public void getAccountingDataMapping() throws Exception {
        // Initialize the database
        accountingDataMappingRepository.saveAndFlush(accountingDataMapping);

        // Get the accountingDataMapping
        restAccountingDataMappingMockMvc.perform(get("/api/accounting-data-mappings/{id}", accountingDataMapping.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.id").value(accountingDataMapping.getId().intValue()))
            .andExpect(jsonPath("$.acctLineTypeId").value(DEFAULT_ACCT_LINE_TYPE_ID.intValue()))
            .andExpect(jsonPath("$.accountingRef").value(DEFAULT_ACCOUNTING_REF.toString()))
            .andExpect(jsonPath("$.accountingTableColumnRef").value(DEFAULT_ACCOUNTING_TABLE_COLUMN_REF.toString()))
            .andExpect(jsonPath("$.valueType").value(DEFAULT_VALUE_TYPE.toString()))
            .andExpect(jsonPath("$.value").value(DEFAULT_VALUE.toString()))
            .andExpect(jsonPath("$.createdBy").value(DEFAULT_CREATED_BY.intValue()))
            .andExpect(jsonPath("$.lastUpdatedBy").value(DEFAULT_LAST_UPDATED_BY.intValue()))
            .andExpect(jsonPath("$.creationDate").value(sameInstant(DEFAULT_CREATION_DATE)))
            .andExpect(jsonPath("$.lastUpdatedDate").value(sameInstant(DEFAULT_LAST_UPDATED_DATE)));
    }

    @Test
    @Transactional
    public void getNonExistingAccountingDataMapping() throws Exception {
        // Get the accountingDataMapping
        restAccountingDataMappingMockMvc.perform(get("/api/accounting-data-mappings/{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateAccountingDataMapping() throws Exception {
        // Initialize the database
        accountingDataMappingRepository.saveAndFlush(accountingDataMapping);
        accountingDataMappingSearchRepository.save(accountingDataMapping);
        int databaseSizeBeforeUpdate = accountingDataMappingRepository.findAll().size();

        // Update the accountingDataMapping
        AccountingDataMapping updatedAccountingDataMapping = accountingDataMappingRepository.findOne(accountingDataMapping.getId());
        updatedAccountingDataMapping
            .acctLineTypeId(UPDATED_ACCT_LINE_TYPE_ID)
            .accountingRef(UPDATED_ACCOUNTING_REF)
            .accountingTableColumnRef(UPDATED_ACCOUNTING_TABLE_COLUMN_REF)
            .valueType(UPDATED_VALUE_TYPE)
            .value(UPDATED_VALUE)
            .createdBy(UPDATED_CREATED_BY)
            .lastUpdatedBy(UPDATED_LAST_UPDATED_BY)
            .creationDate(UPDATED_CREATION_DATE)
            .lastUpdatedDate(UPDATED_LAST_UPDATED_DATE);

        restAccountingDataMappingMockMvc.perform(put("/api/accounting-data-mappings")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(updatedAccountingDataMapping)))
            .andExpect(status().isOk());

        // Validate the AccountingDataMapping in the database
        List<AccountingDataMapping> accountingDataMappingList = accountingDataMappingRepository.findAll();
        assertThat(accountingDataMappingList).hasSize(databaseSizeBeforeUpdate);
        AccountingDataMapping testAccountingDataMapping = accountingDataMappingList.get(accountingDataMappingList.size() - 1);
        assertThat(testAccountingDataMapping.getAcctLineTypeId()).isEqualTo(UPDATED_ACCT_LINE_TYPE_ID);
        assertThat(testAccountingDataMapping.getAccountingRef()).isEqualTo(UPDATED_ACCOUNTING_REF);
        assertThat(testAccountingDataMapping.getAccountingTableColumnRef()).isEqualTo(UPDATED_ACCOUNTING_TABLE_COLUMN_REF);
        assertThat(testAccountingDataMapping.getValueType()).isEqualTo(UPDATED_VALUE_TYPE);
        assertThat(testAccountingDataMapping.getValue()).isEqualTo(UPDATED_VALUE);
        assertThat(testAccountingDataMapping.getCreatedBy()).isEqualTo(UPDATED_CREATED_BY);
        assertThat(testAccountingDataMapping.getLastUpdatedBy()).isEqualTo(UPDATED_LAST_UPDATED_BY);
        assertThat(testAccountingDataMapping.getCreationDate()).isEqualTo(UPDATED_CREATION_DATE);
        assertThat(testAccountingDataMapping.getLastUpdatedDate()).isEqualTo(UPDATED_LAST_UPDATED_DATE);

        // Validate the AccountingDataMapping in Elasticsearch
        AccountingDataMapping accountingDataMappingEs = accountingDataMappingSearchRepository.findOne(testAccountingDataMapping.getId());
        assertThat(accountingDataMappingEs).isEqualToComparingFieldByField(testAccountingDataMapping);
    }

    @Test
    @Transactional
    public void updateNonExistingAccountingDataMapping() throws Exception {
        int databaseSizeBeforeUpdate = accountingDataMappingRepository.findAll().size();

        // Create the AccountingDataMapping

        // If the entity doesn't have an ID, it will be created instead of just being updated
        restAccountingDataMappingMockMvc.perform(put("/api/accounting-data-mappings")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(accountingDataMapping)))
            .andExpect(status().isCreated());

        // Validate the AccountingDataMapping in the database
        List<AccountingDataMapping> accountingDataMappingList = accountingDataMappingRepository.findAll();
        assertThat(accountingDataMappingList).hasSize(databaseSizeBeforeUpdate + 1);
    }

    @Test
    @Transactional
    public void deleteAccountingDataMapping() throws Exception {
        // Initialize the database
        accountingDataMappingRepository.saveAndFlush(accountingDataMapping);
        accountingDataMappingSearchRepository.save(accountingDataMapping);
        int databaseSizeBeforeDelete = accountingDataMappingRepository.findAll().size();

        // Get the accountingDataMapping
        restAccountingDataMappingMockMvc.perform(delete("/api/accounting-data-mappings/{id}", accountingDataMapping.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate Elasticsearch is empty
        boolean accountingDataMappingExistsInEs = accountingDataMappingSearchRepository.exists(accountingDataMapping.getId());
        assertThat(accountingDataMappingExistsInEs).isFalse();

        // Validate the database is empty
        List<AccountingDataMapping> accountingDataMappingList = accountingDataMappingRepository.findAll();
        assertThat(accountingDataMappingList).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void searchAccountingDataMapping() throws Exception {
        // Initialize the database
        accountingDataMappingRepository.saveAndFlush(accountingDataMapping);
        accountingDataMappingSearchRepository.save(accountingDataMapping);

        // Search the accountingDataMapping
        restAccountingDataMappingMockMvc.perform(get("/api/_search/accounting-data-mappings?query=id:" + accountingDataMapping.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(accountingDataMapping.getId().intValue())))
            .andExpect(jsonPath("$.[*].acctLineTypeId").value(hasItem(DEFAULT_ACCT_LINE_TYPE_ID.intValue())))
            .andExpect(jsonPath("$.[*].accountingRef").value(hasItem(DEFAULT_ACCOUNTING_REF.toString())))
            .andExpect(jsonPath("$.[*].accountingTableColumnRef").value(hasItem(DEFAULT_ACCOUNTING_TABLE_COLUMN_REF.toString())))
            .andExpect(jsonPath("$.[*].valueType").value(hasItem(DEFAULT_VALUE_TYPE.toString())))
            .andExpect(jsonPath("$.[*].value").value(hasItem(DEFAULT_VALUE.toString())))
            .andExpect(jsonPath("$.[*].createdBy").value(hasItem(DEFAULT_CREATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].lastUpdatedBy").value(hasItem(DEFAULT_LAST_UPDATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].creationDate").value(hasItem(sameInstant(DEFAULT_CREATION_DATE))))
            .andExpect(jsonPath("$.[*].lastUpdatedDate").value(hasItem(sameInstant(DEFAULT_LAST_UPDATED_DATE))));
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(AccountingDataMapping.class);
    }
}
