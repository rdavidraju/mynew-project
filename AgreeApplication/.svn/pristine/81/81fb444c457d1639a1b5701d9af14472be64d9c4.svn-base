package com.nspl.app.web.rest;

import com.nspl.app.AgreeApplicationApp;

import com.nspl.app.domain.Jobs;
import com.nspl.app.repository.JobsRepository;
import com.nspl.app.repository.search.JobsSearchRepository;
import com.nspl.app.web.rest.errors.ExceptionTranslator;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.time.ZoneOffset;
import java.time.ZoneId;
import java.util.List;

import static com.nspl.app.web.rest.TestUtil.sameInstant;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the JobsResource REST controller.
 *
 * @see JobsResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = AgreeApplicationApp.class)
public class JobsResourceIntTest {

    private static final Long DEFAULT_TENANT_ID = 1L;
    private static final Long UPDATED_TENANT_ID = 2L;

    private static final String DEFAULT_JOB_NAME = "AAAAAAAAAA";
    private static final String UPDATED_JOB_NAME = "BBBBBBBBBB";

    private static final String DEFAULT_JOB_DESC = "AAAAAAAAAA";
    private static final String UPDATED_JOB_DESC = "BBBBBBBBBB";

    private static final String DEFAULT_JOB_TYPE = "AAAAAAAAAA";
    private static final String UPDATED_JOB_TYPE = "BBBBBBBBBB";

    private static final Long DEFAULT_SOURCE_PROFILE_ASSIGNMENT_ID = 1L;
    private static final Long UPDATED_SOURCE_PROFILE_ASSIGNMENT_ID = 2L;

    private static final Long DEFAULT_FILE_TEMPLATED_ID = 1L;
    private static final Long UPDATED_FILE_TEMPLATED_ID = 2L;

    private static final String DEFAULT_LOCAL_DIR_PATH = "AAAAAAAAAA";
    private static final String UPDATED_LOCAL_DIR_PATH = "BBBBBBBBBB";

    private static final Long DEFAULT_PROCESS_ID = 1L;
    private static final Long UPDATED_PROCESS_ID = 2L;

    private static final String DEFAULT_JOB_STATUS = "AAAAAAAAAA";
    private static final String UPDATED_JOB_STATUS = "BBBBBBBBBB";

    private static final String DEFAULT_FREQUENCY = "AAAAAAAAAA";
    private static final String UPDATED_FREQUENCY = "BBBBBBBBBB";

    private static final Long DEFAULT_CREATED_BY = 1L;
    private static final Long UPDATED_CREATED_BY = 2L;

    private static final Long DEFAULT_LAST_UPDATED_BY = 1L;
    private static final Long UPDATED_LAST_UPDATED_BY = 2L;

    private static final ZonedDateTime DEFAULT_CREATION_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_CREATION_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    private static final ZonedDateTime DEFAULT_LAST_UPDATED_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_LAST_UPDATED_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    @Autowired
    private JobsRepository jobsRepository;

    @Autowired
    private JobsSearchRepository jobsSearchRepository;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restJobsMockMvc;

    private Jobs jobs;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        JobsResource jobsResource = new JobsResource(jobsRepository, jobsSearchRepository);
        this.restJobsMockMvc = MockMvcBuilders.standaloneSetup(jobsResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Jobs createEntity(EntityManager em) {
        Jobs jobs = new Jobs()
            .tenantId(DEFAULT_TENANT_ID)
            .jobName(DEFAULT_JOB_NAME)
            .jobDesc(DEFAULT_JOB_DESC)
            .jobType(DEFAULT_JOB_TYPE)
            .sourceProfileAssignmentId(DEFAULT_SOURCE_PROFILE_ASSIGNMENT_ID)
            .fileTemplatedId(DEFAULT_FILE_TEMPLATED_ID)
            .localDirPath(DEFAULT_LOCAL_DIR_PATH)
            .processId(DEFAULT_PROCESS_ID)
            .jobStatus(DEFAULT_JOB_STATUS)
            .frequency(DEFAULT_FREQUENCY)
            .createdBy(DEFAULT_CREATED_BY)
            .lastUpdatedBy(DEFAULT_LAST_UPDATED_BY)
            .creationDate(DEFAULT_CREATION_DATE)
            .lastUpdatedDate(DEFAULT_LAST_UPDATED_DATE);
        return jobs;
    }

    @Before
    public void initTest() {
        jobsSearchRepository.deleteAll();
        jobs = createEntity(em);
    }

    @Test
    @Transactional
    public void createJobs() throws Exception {
        int databaseSizeBeforeCreate = jobsRepository.findAll().size();

        // Create the Jobs
        restJobsMockMvc.perform(post("/api/jobs")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(jobs)))
            .andExpect(status().isCreated());

        // Validate the Jobs in the database
        List<Jobs> jobsList = jobsRepository.findAll();
        assertThat(jobsList).hasSize(databaseSizeBeforeCreate + 1);
        Jobs testJobs = jobsList.get(jobsList.size() - 1);
        assertThat(testJobs.getTenantId()).isEqualTo(DEFAULT_TENANT_ID);
        assertThat(testJobs.getJobName()).isEqualTo(DEFAULT_JOB_NAME);
        assertThat(testJobs.getJobDesc()).isEqualTo(DEFAULT_JOB_DESC);
        assertThat(testJobs.getJobType()).isEqualTo(DEFAULT_JOB_TYPE);
        assertThat(testJobs.getSourceProfileAssignmentId()).isEqualTo(DEFAULT_SOURCE_PROFILE_ASSIGNMENT_ID);
        assertThat(testJobs.getFileTemplatedId()).isEqualTo(DEFAULT_FILE_TEMPLATED_ID);
        assertThat(testJobs.getLocalDirPath()).isEqualTo(DEFAULT_LOCAL_DIR_PATH);
        assertThat(testJobs.getProcessId()).isEqualTo(DEFAULT_PROCESS_ID);
        assertThat(testJobs.getJobStatus()).isEqualTo(DEFAULT_JOB_STATUS);
        assertThat(testJobs.getFrequency()).isEqualTo(DEFAULT_FREQUENCY);
        assertThat(testJobs.getCreatedBy()).isEqualTo(DEFAULT_CREATED_BY);
        assertThat(testJobs.getLastUpdatedBy()).isEqualTo(DEFAULT_LAST_UPDATED_BY);
        assertThat(testJobs.getCreationDate()).isEqualTo(DEFAULT_CREATION_DATE);
        assertThat(testJobs.getLastUpdatedDate()).isEqualTo(DEFAULT_LAST_UPDATED_DATE);

        // Validate the Jobs in Elasticsearch
        Jobs jobsEs = jobsSearchRepository.findOne(testJobs.getId());
        assertThat(jobsEs).isEqualToComparingFieldByField(testJobs);
    }

    @Test
    @Transactional
    public void createJobsWithExistingId() throws Exception {
        int databaseSizeBeforeCreate = jobsRepository.findAll().size();

        // Create the Jobs with an existing ID
        jobs.setId(1L);

        // An entity with an existing ID cannot be created, so this API call must fail
        restJobsMockMvc.perform(post("/api/jobs")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(jobs)))
            .andExpect(status().isBadRequest());

        // Validate the Alice in the database
        List<Jobs> jobsList = jobsRepository.findAll();
        assertThat(jobsList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    public void getAllJobs() throws Exception {
        // Initialize the database
        jobsRepository.saveAndFlush(jobs);

        // Get all the jobsList
        restJobsMockMvc.perform(get("/api/jobs?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(jobs.getId().intValue())))
            .andExpect(jsonPath("$.[*].tenantId").value(hasItem(DEFAULT_TENANT_ID.intValue())))
            .andExpect(jsonPath("$.[*].jobName").value(hasItem(DEFAULT_JOB_NAME.toString())))
            .andExpect(jsonPath("$.[*].jobDesc").value(hasItem(DEFAULT_JOB_DESC.toString())))
            .andExpect(jsonPath("$.[*].jobType").value(hasItem(DEFAULT_JOB_TYPE.toString())))
            .andExpect(jsonPath("$.[*].sourceProfileAssignmentId").value(hasItem(DEFAULT_SOURCE_PROFILE_ASSIGNMENT_ID.intValue())))
            .andExpect(jsonPath("$.[*].fileTemplatedId").value(hasItem(DEFAULT_FILE_TEMPLATED_ID.intValue())))
            .andExpect(jsonPath("$.[*].localDirPath").value(hasItem(DEFAULT_LOCAL_DIR_PATH.toString())))
            .andExpect(jsonPath("$.[*].processId").value(hasItem(DEFAULT_PROCESS_ID.intValue())))
            .andExpect(jsonPath("$.[*].jobStatus").value(hasItem(DEFAULT_JOB_STATUS.toString())))
            .andExpect(jsonPath("$.[*].frequency").value(hasItem(DEFAULT_FREQUENCY.toString())))
            .andExpect(jsonPath("$.[*].createdBy").value(hasItem(DEFAULT_CREATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].lastUpdatedBy").value(hasItem(DEFAULT_LAST_UPDATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].creationDate").value(hasItem(sameInstant(DEFAULT_CREATION_DATE))))
            .andExpect(jsonPath("$.[*].lastUpdatedDate").value(hasItem(sameInstant(DEFAULT_LAST_UPDATED_DATE))));
    }

    @Test
    @Transactional
    public void getJobs() throws Exception {
        // Initialize the database
        jobsRepository.saveAndFlush(jobs);

        // Get the jobs
        restJobsMockMvc.perform(get("/api/jobs/{id}", jobs.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.id").value(jobs.getId().intValue()))
            .andExpect(jsonPath("$.tenantId").value(DEFAULT_TENANT_ID.intValue()))
            .andExpect(jsonPath("$.jobName").value(DEFAULT_JOB_NAME.toString()))
            .andExpect(jsonPath("$.jobDesc").value(DEFAULT_JOB_DESC.toString()))
            .andExpect(jsonPath("$.jobType").value(DEFAULT_JOB_TYPE.toString()))
            .andExpect(jsonPath("$.sourceProfileAssignmentId").value(DEFAULT_SOURCE_PROFILE_ASSIGNMENT_ID.intValue()))
            .andExpect(jsonPath("$.fileTemplatedId").value(DEFAULT_FILE_TEMPLATED_ID.intValue()))
            .andExpect(jsonPath("$.localDirPath").value(DEFAULT_LOCAL_DIR_PATH.toString()))
            .andExpect(jsonPath("$.processId").value(DEFAULT_PROCESS_ID.intValue()))
            .andExpect(jsonPath("$.jobStatus").value(DEFAULT_JOB_STATUS.toString()))
            .andExpect(jsonPath("$.frequency").value(DEFAULT_FREQUENCY.toString()))
            .andExpect(jsonPath("$.createdBy").value(DEFAULT_CREATED_BY.intValue()))
            .andExpect(jsonPath("$.lastUpdatedBy").value(DEFAULT_LAST_UPDATED_BY.intValue()))
            .andExpect(jsonPath("$.creationDate").value(sameInstant(DEFAULT_CREATION_DATE)))
            .andExpect(jsonPath("$.lastUpdatedDate").value(sameInstant(DEFAULT_LAST_UPDATED_DATE)));
    }

    @Test
    @Transactional
    public void getNonExistingJobs() throws Exception {
        // Get the jobs
        restJobsMockMvc.perform(get("/api/jobs/{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateJobs() throws Exception {
        // Initialize the database
        jobsRepository.saveAndFlush(jobs);
        jobsSearchRepository.save(jobs);
        int databaseSizeBeforeUpdate = jobsRepository.findAll().size();

        // Update the jobs
        Jobs updatedJobs = jobsRepository.findOne(jobs.getId());
        updatedJobs
            .tenantId(UPDATED_TENANT_ID)
            .jobName(UPDATED_JOB_NAME)
            .jobDesc(UPDATED_JOB_DESC)
            .jobType(UPDATED_JOB_TYPE)
            .sourceProfileAssignmentId(UPDATED_SOURCE_PROFILE_ASSIGNMENT_ID)
            .fileTemplatedId(UPDATED_FILE_TEMPLATED_ID)
            .localDirPath(UPDATED_LOCAL_DIR_PATH)
            .processId(UPDATED_PROCESS_ID)
            .jobStatus(UPDATED_JOB_STATUS)
            .frequency(UPDATED_FREQUENCY)
            .createdBy(UPDATED_CREATED_BY)
            .lastUpdatedBy(UPDATED_LAST_UPDATED_BY)
            .creationDate(UPDATED_CREATION_DATE)
            .lastUpdatedDate(UPDATED_LAST_UPDATED_DATE);

        restJobsMockMvc.perform(put("/api/jobs")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(updatedJobs)))
            .andExpect(status().isOk());

        // Validate the Jobs in the database
        List<Jobs> jobsList = jobsRepository.findAll();
        assertThat(jobsList).hasSize(databaseSizeBeforeUpdate);
        Jobs testJobs = jobsList.get(jobsList.size() - 1);
        assertThat(testJobs.getTenantId()).isEqualTo(UPDATED_TENANT_ID);
        assertThat(testJobs.getJobName()).isEqualTo(UPDATED_JOB_NAME);
        assertThat(testJobs.getJobDesc()).isEqualTo(UPDATED_JOB_DESC);
        assertThat(testJobs.getJobType()).isEqualTo(UPDATED_JOB_TYPE);
        assertThat(testJobs.getSourceProfileAssignmentId()).isEqualTo(UPDATED_SOURCE_PROFILE_ASSIGNMENT_ID);
        assertThat(testJobs.getFileTemplatedId()).isEqualTo(UPDATED_FILE_TEMPLATED_ID);
        assertThat(testJobs.getLocalDirPath()).isEqualTo(UPDATED_LOCAL_DIR_PATH);
        assertThat(testJobs.getProcessId()).isEqualTo(UPDATED_PROCESS_ID);
        assertThat(testJobs.getJobStatus()).isEqualTo(UPDATED_JOB_STATUS);
        assertThat(testJobs.getFrequency()).isEqualTo(UPDATED_FREQUENCY);
        assertThat(testJobs.getCreatedBy()).isEqualTo(UPDATED_CREATED_BY);
        assertThat(testJobs.getLastUpdatedBy()).isEqualTo(UPDATED_LAST_UPDATED_BY);
        assertThat(testJobs.getCreationDate()).isEqualTo(UPDATED_CREATION_DATE);
        assertThat(testJobs.getLastUpdatedDate()).isEqualTo(UPDATED_LAST_UPDATED_DATE);

        // Validate the Jobs in Elasticsearch
        Jobs jobsEs = jobsSearchRepository.findOne(testJobs.getId());
        assertThat(jobsEs).isEqualToComparingFieldByField(testJobs);
    }

    @Test
    @Transactional
    public void updateNonExistingJobs() throws Exception {
        int databaseSizeBeforeUpdate = jobsRepository.findAll().size();

        // Create the Jobs

        // If the entity doesn't have an ID, it will be created instead of just being updated
        restJobsMockMvc.perform(put("/api/jobs")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(jobs)))
            .andExpect(status().isCreated());

        // Validate the Jobs in the database
        List<Jobs> jobsList = jobsRepository.findAll();
        assertThat(jobsList).hasSize(databaseSizeBeforeUpdate + 1);
    }

    @Test
    @Transactional
    public void deleteJobs() throws Exception {
        // Initialize the database
        jobsRepository.saveAndFlush(jobs);
        jobsSearchRepository.save(jobs);
        int databaseSizeBeforeDelete = jobsRepository.findAll().size();

        // Get the jobs
        restJobsMockMvc.perform(delete("/api/jobs/{id}", jobs.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate Elasticsearch is empty
        boolean jobsExistsInEs = jobsSearchRepository.exists(jobs.getId());
        assertThat(jobsExistsInEs).isFalse();

        // Validate the database is empty
        List<Jobs> jobsList = jobsRepository.findAll();
        assertThat(jobsList).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void searchJobs() throws Exception {
        // Initialize the database
        jobsRepository.saveAndFlush(jobs);
        jobsSearchRepository.save(jobs);

        // Search the jobs
        restJobsMockMvc.perform(get("/api/_search/jobs?query=id:" + jobs.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(jobs.getId().intValue())))
            .andExpect(jsonPath("$.[*].tenantId").value(hasItem(DEFAULT_TENANT_ID.intValue())))
            .andExpect(jsonPath("$.[*].jobName").value(hasItem(DEFAULT_JOB_NAME.toString())))
            .andExpect(jsonPath("$.[*].jobDesc").value(hasItem(DEFAULT_JOB_DESC.toString())))
            .andExpect(jsonPath("$.[*].jobType").value(hasItem(DEFAULT_JOB_TYPE.toString())))
            .andExpect(jsonPath("$.[*].sourceProfileAssignmentId").value(hasItem(DEFAULT_SOURCE_PROFILE_ASSIGNMENT_ID.intValue())))
            .andExpect(jsonPath("$.[*].fileTemplatedId").value(hasItem(DEFAULT_FILE_TEMPLATED_ID.intValue())))
            .andExpect(jsonPath("$.[*].localDirPath").value(hasItem(DEFAULT_LOCAL_DIR_PATH.toString())))
            .andExpect(jsonPath("$.[*].processId").value(hasItem(DEFAULT_PROCESS_ID.intValue())))
            .andExpect(jsonPath("$.[*].jobStatus").value(hasItem(DEFAULT_JOB_STATUS.toString())))
            .andExpect(jsonPath("$.[*].frequency").value(hasItem(DEFAULT_FREQUENCY.toString())))
            .andExpect(jsonPath("$.[*].createdBy").value(hasItem(DEFAULT_CREATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].lastUpdatedBy").value(hasItem(DEFAULT_LAST_UPDATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].creationDate").value(hasItem(sameInstant(DEFAULT_CREATION_DATE))))
            .andExpect(jsonPath("$.[*].lastUpdatedDate").value(hasItem(sameInstant(DEFAULT_LAST_UPDATED_DATE))));
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(Jobs.class);
    }
}
