package com.nspl.app.service;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;

import javax.inject.Inject;

import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.permission.FsPermission;
import org.apache.hadoop.io.IOUtils;
import org.apache.oozie.client.OozieClient;
import org.apache.oozie.client.OozieClientException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

import com.nspl.app.domain.ApplicationPrograms;
import com.nspl.app.domain.JobDetails;
import com.nspl.app.domain.ProgParametersSets;
import com.nspl.app.domain.SchedulerDetails;
import com.nspl.app.repository.ApplicationProgramsRepository;
import com.nspl.app.repository.JobDetailsRepository;
import com.nspl.app.repository.ProgParametersSetsRepository;
import com.nspl.app.repository.SchedulerDetailsRepository;
import com.nspl.app.web.rest.dto.OozieJobDTO;
import com.oozie.components.coordinatorxml;
import com.oozie.wfmanger.WfManager;
import com.oozie.wfmanger.WfManagerImpl;


@Service
public class OozieService {
	 private final Logger log = LoggerFactory.getLogger(DataViewsService.class);
	 private static final String CONTEXT = "context";
	

		@Autowired
		Environment env;
		
		@Autowired
		org.apache.hadoop.conf.Configuration hadoopConfiguration;
		
		@Inject
		PropertiesUtilService propertiesUtilService;
		@Inject
		ApplicationProgramsRepository applicationProgramsRepository;
		
	    
	    @Inject
	    JobDetailsRepository jobDetailsRepository;
	    
	    @Inject
	    ProgParametersSetsRepository progParametersSetsRepository;
	    
	    @Inject
	    ApplicationProgramsRepository applicationprogramsRepository;
	
	    @Inject
	    SchedulerDetailsRepository schedularDetailsRepository;
	    
	 public void BuildOozieJob(OozieJobDTO oozieJobDTO,Long tenantId)
	    /*public void InitiateOozieJob(@RequestParam String jobType,@RequestParam String path,@RequestParam String hdfsPath, 
	     * @RequestParam String startDate, @RequestParam String endDate 
	    			,@RequestParam String frequency,@RequestParam String javaMainClass,@RequestParam String sparkClassName,
	    			@RequestParam String sparkJarName, @RequestParam String shellExec, 
	    			@RequestParam String shellFilePath, @RequestParam String jobName)*/
	    {

	    	System.out.println("Started");
	    	log.info("Sample Log");
	    	log.info("oozieJobDTO .getjobName: "+oozieJobDTO.getJobName());
	    	WfManager wfManager = new WfManagerImpl();
	    	coordinatorxml cxml = new coordinatorxml();
	    	//createjobproperties cjp = new createjobproperties();
	    	System.out.println(" Job Tracket from YML: "+env.getProperty("oozie.jobTracker"));

	    	
	    	try {
	    		System.out.println("Hadoop: "+hadoopConfiguration.get("fs.defaultFS"));
	    		List<JobDetails>  jobDetailsList= jobDetailsRepository.fetchByJobNameAndTenantIdAndProgramName(oozieJobDTO.getJobId(),tenantId,oozieJobDTO.getProgramName());
	    		log.info("jobList Size: "+jobDetailsList.size());
	    		List<ProgParametersSets> prog=progParametersSetsRepository.findByProgramIdAndStatus(oozieJobDTO.getProgramId(),"ACTIVE");
	    		ApplicationPrograms app = applicationProgramsRepository.findOne(oozieJobDTO.getProgramId());
	    		log.info("prog :"+prog.size());
	    		List<String> paramList = new ArrayList<String>();
	    		String host =env.getProperty("recon.dbhost") ;
	    		log.info("host :"+host);
	    		String schemaName=env.getProperty("recon.dbname");
	    		log.info("schemaName :"+schemaName);
	    		paramList.add(host);
	    		paramList.add(schemaName);
	    		paramList.add(env.getProperty("recon.username"));
	    		paramList.add(env.getProperty("recon.password"));
	    		Properties props = propertiesUtilService.getPropertiesFromClasspath("File.properties");
				String targetFilePath = props.getProperty("targetFilePath");

	    		for(JobDetails jobDetails:jobDetailsList){
	    			
	    			
	    			int k=5;
	    			
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments1()==null || jobDetails.getParameterArguments1().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments1());
	    			}
	    			k++;
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments2()==null || jobDetails.getParameterArguments2().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments2());
	    			}
	    			k++;
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments3()==null || jobDetails.getParameterArguments3().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments3());
	    			}
	    			k++;
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments4()==null || jobDetails.getParameterArguments4().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments4());
	    			}
	    			k++;
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments5()==null || jobDetails.getParameterArguments5().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments5());
	    			}
	    			k++;
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments6()==null || jobDetails.getParameterArguments6().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments6());
	    			}
	    			k++;
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments7()==null || jobDetails.getParameterArguments7().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments7());
	    			}
	    			k++;
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments8()==null || jobDetails.getParameterArguments8().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments8());
	    			}
	    			k++;
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments9()==null || jobDetails.getParameterArguments9().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments10());
	    			}
	    			k++;
	    			if (k<prog.size()+5){
	    				if(jobDetails.getParameterArguments10()==null || jobDetails.getParameterArguments10().isEmpty())
		    				paramList.add("null");
		    			else
		    				paramList.add(jobDetails.getParameterArguments10());
	    			}
	    			if(app.getPrgmName().equals("DataTransformation"))
	    			{
	    				paramList.add(targetFilePath);
	    			}
	    			paramList.add(jobDetails.getCreatedBy().toString());
	    			if(app.getPrgmType().equalsIgnoreCase("shell"))
	    				paramList.add("${wf:id()}");
	    		}
	    		
	    		

	    		
	    		log.info("parameterList"+paramList);

                String lipPath=env.getProperty("oozie.libpath");
	    		wfManager.generateWorkFlow(oozieJobDTO.getJobType(),oozieJobDTO.getPath(), oozieJobDTO.getClassName(),oozieJobDTO.getJarFilePath()
	    				,env.getProperty("oozie.jobTracker"), env.getProperty("oozie.nameNode"),oozieJobDTO.getJobName(),paramList,oozieJobDTO.getFrequencyType(),lipPath,oozieJobDTO.getProgramName()); //removethis after adding jar

	    		cxml.createCordinatorXml(oozieJobDTO.getJobType(),oozieJobDTO.getPath(), null);
	    		//cjp.createjobprop(jobType,path,startDate,endDate,hadoopConfiguration);

	    		writeToHdfs(oozieJobDTO.getPath()+"workflow.xml",oozieJobDTO.getHdfsPath()+"/workflow.xml");
	    		writeToHdfs(oozieJobDTO.getPath()+"coordinator.xml",oozieJobDTO.getHdfsPath()+"/coordinator.xml");
	    		//writeToHdfs(path+"job.properties",hdfsPath+"/job.properties");

	    		System.out.println("Copied To HDFS Path");
	    		/*String JobId = wfManager.initateOozieWithGeneratedWorkflow(env.getProperty("oozie.OozieClient"),hadoopConfiguration.get("fs.defaultFS")+oozieJobDTO.getHdfsPath(),oozieJobDTO.getStartDate(),oozieJobDTO.getEndDate(),env.getProperty("oozie.jobTracker"),
												env.getProperty("oozie.nameNode"),oozieJobDTO.getFrequency());

				System.out.println("Job Id: "+JobId);*/
	    	} catch (Exception e) {
	    		log.info(CONTEXT, e);
	    	}

	    }
	 
	 
	 
	 public String InitiateOozieJob(@RequestBody OozieJobDTO oozieJobDTO)
	    /*public void InitiateOozieJob(@RequestParam String jobType,@RequestParam String path,@RequestParam String hdfsPath, 
	     * @RequestParam String startDate, @RequestParam String endDate 
	    			,@RequestParam String frequency,@RequestParam String javaMainClass,@RequestParam String sparkClassName,
	    			@RequestParam String sparkJarName, @RequestParam String shellExec, 
	    			@RequestParam String shellFilePath, @RequestParam String jobName)*/
	    {

	    	System.out.println("Started");
	    	log.info("Sample Log");
	    	WfManager wfManager = new WfManagerImpl();
	    	coordinatorxml cxml = new coordinatorxml();
	    	//createjobproperties cjp = new createjobproperties();
	    	System.out.println(" Job Tracket from YML: "+env.getProperty("oozie.jobTracker"));
	    	String JobId = "";


	    	try {
	    		/*		System.out.println("Hadoop: "+hadoopConfiguration.get("fs.defaultFS"));
				wfManager.generateWorkFlow(oozieJobDTO.getJobType(),oozieJobDTO.getPath(),hadoopConfiguration, oozieJobDTO.getJavaMainClass(),oozieJobDTO.getSparkClassName()
						,oozieJobDTO.getSparkJarName(),oozieJobDTO.getShellExec(),oozieJobDTO.getShellFilePath(),env.getProperty("oozie.jobTracker"), env.getProperty("oozie.nameNode"),oozieJobDTO.getJobName()); //removethis after adding jar
				//wfManager.generateWorkFlow(jobType,path,hadoopConfiguration);//, javaMainClass,sparkClassName,sparkJarName,shellExec,shellFilePath ); removethis after adding jar
				cxml.createCordinatorXml(oozieJobDTO.getJobType(),oozieJobDTO.getPath(),hadoopConfiguration);
				//cjp.createjobprop(jobType,path,startDate,endDate,hadoopConfiguration);
				writeToHdfs(oozieJobDTO.getPath()+"workflow.xml",oozieJobDTO.getHdfsPath()+"/workflow.xml");
				writeToHdfs(oozieJobDTO.getPath()+"coordinator.xml",oozieJobDTO.getHdfsPath()+"/coordinator.xml");
				//writeToHdfs(path+"job.properties",hdfsPath+"/job.properties");

	    		 */	
	    		log.info("env oozie client :"+env.getProperty("oozie.OozieClient"));
	    		String lipPath=env.getProperty("oozie.libpath");
	    		JobId = wfManager.initateOozieWithGeneratedWorkflow(env.getProperty("oozie.OozieClient"),hadoopConfiguration.get("fs.defaultFS")+oozieJobDTO.getHdfsPath(),oozieJobDTO.getStartDate(),oozieJobDTO.getEndDate(),env.getProperty("oozie.jobTracker"),
	    				env.getProperty("oozie.nameNode"),oozieJobDTO.getFrequency(),oozieJobDTO.getFrequencyType(),lipPath,oozieJobDTO.getTenantId());

	    		System.out.println("Job Id: "+JobId);
	    	} catch (Exception e) {
	    		log.info(CONTEXT, e);
	    	}
	    	return JobId;

	    }
	 
	 public void writeToHdfs(String inputPathLocation, String outputLoaction) throws IOException
	 {
    	
    	
		BufferedReader inputReader = null;
		FileSystem fs = null;
		OutputStream outStream = null;
		BufferedWriter br = null;
	//	System.out.println("New Srinivas Writing to HDFS");
		System.out.println("Source File PATH:"+inputPathLocation);
		System.out.println("Output File PATH:"+outputLoaction);

		try {

			Path inputPath = new Path("/home/sparkhadoopcl/");
			InputStream in = new BufferedInputStream(new FileInputStream(inputPathLocation));
		
			Path outputPath = new Path(outputLoaction);

			FileSystem hdfs = FileSystem.get(URI.create(hadoopConfiguration.get("fs.defaultFS")+outputLoaction),hadoopConfiguration);
			OutputStream out = hdfs.create(new Path(outputLoaction));
			//hdfs.copyFromLocalFile(inputPath, outputPath);
			IOUtils.copyBytes(in, out, hadoopConfiguration);
			hdfs.setPermission(outputPath, FsPermission.valueOf("drwxrwxrwx"));
			System.out.println("After Copy");
			
		} catch (Exception e) {
			e.printStackTrace();
		//	throw new IOException(e.getMessage());
		} finally {
			if (null != inputReader) {
				inputReader.close();
			}
			if (null != br) {
				br.close();
			}
			if (null != fs) {
				fs.close();
			}
			if (null != outStream) {
				outStream.close();
			}
		}
	}
	 
	 public void rerunOozieCoordJob(@RequestParam String jobId, @RequestParam String rerunType, @RequestParam String scope) throws IOException
	    {	  
	        
	    	System.out.println("REST API FOR RE-RUNNING OOZIE JOB");
	    	String oozieUrl=env.getProperty("oozie.OozieClient");
	    	//OozieClient oozieClient = new OozieClient(env.getProperty("oozie.OozieClient"));   //("http://ebiz.nspl.com:11000");
	    	// create a workflow job configuration and set the workflow application path
	    	
	    	
	    	WfManager wfManager = new WfManagerImpl();
	    	wfManager.rerunOozieCoordJob(jobId, rerunType, scope, oozieUrl);
	    	
	    }
	 
	 public void killOozieCoordJob(@RequestParam String jobId, @RequestParam String rangeType, @RequestParam String scope)
	    {	  
	        
	    	System.out.println("REST API FOR Killing OOZIE JOB");
	    	String oozieUrl=env.getProperty("oozie.OozieClient");
	    	WfManager wfManager = new WfManagerImpl();
	    	wfManager.killOozieCoordJob(jobId, rangeType, scope, oozieUrl);
	    	
	    	//OozieClient oozieClient = new OozieClient(env.getProperty("oozie.OozieClient"));   //("http://ebiz.nspl.com:11000");
	      	    	
	    	/*Properties conf = oozieClient.createConfiguration();
	     	
	    	try{
	    		System.out.println("David2");
	    		
	    		  List<CoordinatorAction>    killed =oozieClient.kill(jobId, rangeType, scope);
	    		//List<CoordinatorAction> test = oozieClient.reRunCoord(jobId, "date", "2017-08-25T005:50Z", false, false);

	    		for(CoordinatorAction cAct : killed)
	    		{
	    		System.out.println("Job id's "+ cAct.getJobId());
	    		}
	    	
	    	}catch(Exception e)
	    	{
	    		e.printStackTrace();
	    		System.out.println(e);
	    	}*/
	    	    	
	    }
	 
	 public void suspendOozieCoordJob(@RequestParam String jobId)
	    {	  
	        
	    	System.out.println("REST API FOR Suspend OOZIE JOB");
	    	String oozieUrl=env.getProperty("oozie.OozieClient");
	    	WfManager wfManager = new WfManagerImpl();
	    	wfManager.suspendOozieCoordJob(jobId, oozieUrl);
	    	//OozieClient oozieClient = new OozieClient(env.getProperty("oozie.OozieClient")); 
	      	    	
	    	/*Properties conf = oozieClient.createConfiguration();
	     	
	    	try{
	    		oozieClient.suspend(jobId);
	    		oozieClient.resume(jobId);
	    		
	    		if(oozieClient.getCoordJobInfo(jobId).equals("SUSPENDED")){
	    			System.out.println("Job :"+ jobId + "has been SUSPENDED" );
	    		}
	    	
	    		
	    		
	    	}catch(Exception e)
	    	{
	    		e.printStackTrace();
	    		System.out.println(e);
	    	}*/
	    	    	
	    }
	   
	 public void resumeOozieCoordJob(@RequestParam String jobId)
	    {	  
	        
	    	System.out.println("REST API FOR Suspend OOZIE JOB");
	    	
	    	String oozieUrl=env.getProperty("oozie.OozieClient");
	    	WfManager wfManager = new WfManagerImpl();
	    	wfManager.resumeOozieCoordJob(jobId, oozieUrl);    	
	    	
	    	/*OozieClient oozieClient = new OozieClient(env.getProperty("oozie.OozieClient")); 
	      	    	
	    	Properties conf = oozieClient.createConfiguration();
	     	
	    	try{
	   
	    		oozieClient.resume(jobId);
	    		
	    		if(oozieClient.getCoordJobInfo(jobId).equals("RESUME")){
	    			System.out.println("Job :"+ jobId + "has been RESUME" );
	    		}
	    	   		
	    		
	    	}catch(Exception e)
	    	{
	    		e.printStackTrace();
	    		System.out.println(e);
	    	}*/
	    	    	
	    }
	 
	 public void OozieCoordJobInfo(@RequestParam String jobId)
	    {	  
	        
	    	System.out.println("REST API FOR OOZIE JOB Info");
	    	
	    	String oozieUrl=env.getProperty("oozie.OozieClient");
	    	WfManager wfManager = new WfManagerImpl();
	    	wfManager.OozieCoordJobInfo(jobId, oozieUrl);  	
	    	
	    	
	    	/*OozieClient oozieClient = new OozieClient(env.getProperty("oozie.OozieClient"));   //("http://ebiz.nspl.com:11000");
	      	Properties conf = oozieClient.createConfiguration();
	     	
	    	try{
	    		
	    	
	    			CoordinatorJob info	=oozieClient.getCoordJobInfo(jobId);
	    			
	    			
	    			System.out.println("Workflow Job Group "+ info.getAcl());
	    			System.out.println("App Path "+ info.getAppPath());
	    			System.out.println("App Name "+ info.getAppName());
	    			System.out.println("App Name "+ info.getConcurrency());
	    			System.out.println("Conf "+ info.getConf());
	    			System.out.println("ConsoleUrl "+ info.getConsoleUrl());
	    			//System.out.println("App Name "+ info.getExternalId());
	    			System.out.println("Frequency "+ info.getFrequency());
	    			System.out.println("Group "+ info.getGroup());
	    			System.out.println("Id "+ info.getId());
	    			System.out.println("Timeout "+ info.getTimeout());
	    			System.out.println("TimeZone "+ info.getTimeZone());
	    			System.out.println("User "+ info.getUser());
	    			//System.out.println("App Name "+ info.hashCode());
	    			System.out.println("String   : "+ info.toString());
	    			System.out.println("Actions	 : "+ info.getActions());
	    			System.out.println("Class 	 : "+ info.getClass());
	    			System.out.println("End Time :  "+ info.getEndTime());
	    			System.out.println("ExecutionOrader :  "+ info.getExecutionOrder());
	    			System.out.println("LastActTime: "+ info.getLastActionTime());
	    			System.out.println("NxtMatTime: "+ info.getNextMaterializedTime());
	    			System.out.println("PauseTime : "+ info.getPauseTime());
	    			System.out.println("StartTime : "+ info.getStartTime());
	    			System.out.println("StartTime : "+ info.getStartTime());
	    			System.out.println("Status    : "+ info.getStatus());
	    			System.out.println("TimeUnit  : "+ info.getTimeUnit());
	    
	    	}catch(Exception e)
	    	{
	    		e.printStackTrace();
	    		System.out.println(e);
	    	}*/
	    }
	 
	 public void OozieWFJobInfo(@RequestParam String jobId)
	    {	  
	        
	    	System.out.println("REST API FOR OOZIE JOB Info");
	    	
	    	String oozieUrl=env.getProperty("oozie.OozieClient");
	    	WfManager wfManager = new WfManagerImpl();
	    	wfManager.OozieWFJobInfo(jobId, oozieUrl);
	    	
	    	
	    	/*OozieClient oozieClient = new OozieClient(env.getProperty("oozie.OozieClient"));   //("http://ebiz.nspl.com:11000");
	      	Properties conf = oozieClient.createConfiguration();*/
	     	
	    	/*try{
	    		
	    		//	CoordinatorJob info	=oozieClient.getCoordJobInfo(jobId);
	    		WorkflowJob wfjobinfo =	oozieClient.getJobInfo(jobId);
	    			
	    				
	    			log.info("Job Information: "+oozieClient.getJobDefinition(jobId));
	    			log.info("Workflow Name: "+wfjobinfo.getAppName());
	                log.info("App Path :"+wfjobinfo.getAppPath());
	                log.info("ExternalId :"+wfjobinfo.getExternalId());
	                log.info("Workflow Id :"+wfjobinfo.getId());
	                log.info("Coordinator Id :"+wfjobinfo.getParentId());
	                log.info("Run :"+wfjobinfo.getRun());
	                log.info("User :"+wfjobinfo.getUser());
	                log.info("Actions :"+wfjobinfo.getActions());
	                log.info("Created Time :"+wfjobinfo.getCreatedTime());
	                log.info("End Time :"+wfjobinfo.getEndTime());
	                log.info("LastModified Time :"+wfjobinfo.getLastModifiedTime());
	                log.info("Start Time :"+wfjobinfo.getStartTime());
	                log.info("Status :"+wfjobinfo.getStatus());
	                
	    				}catch(Exception e)
	    	{
	    		e.printStackTrace();
	    		System.out.println(e);
	    	}*/
	    }
	 
	  public String OozieJobLog(@RequestParam String jobId)
	    {	  
	        
	    	System.out.println("REST API FOR OOZIE JOB Log");
	    	
	    	String oozieUrl=env.getProperty("oozie.OozieClient");
	    	WfManager wfManager = new WfManagerImpl();
	    	String jobInfo=wfManager.OozieJobLog(jobId, oozieUrl);
	    	return jobInfo;
	    	
	    	/*OozieClient oozieClient = new OozieClient(env.getProperty("oozie.OozieClient"));   //("http://ebiz.nspl.com:11000");
	      	Properties conf = oozieClient.createConfiguration();
	     	
	    	try{
	    		
	    		
	    			String jobLog	=oozieClient.getJobLog(jobId);
	    	//	CoordinatorJob info	=oozieClient.getCoordJobInfo(jobId);
	    			//String		jobDef	=oozieClient.getJobDefinition(jobId);	
	    			log.info("Job Information: "+oozieClient.getJobLog(jobId));
	    		//	log.info("Job Status: "+ jobLog.);
	    			
	    //			System.out.println("Workflow Job Group "+ jobDef.
	    			
	    				}catch(Exception e)
	    	{
	    		e.printStackTrace();
	    		System.out.println(e);
	    	}*/
	    }
	  
	  public void OozieJobDef(@RequestParam String jobId)
	    {	  
	        
	    	System.out.println("REST API FOR OOZIE JOB Info");
	    	
	    	String oozieUrl=env.getProperty("oozie.OozieClient");
	    	WfManager wfManager = new WfManagerImpl();
	    	wfManager.OozieJobDef(jobId, oozieUrl);
	    	
	    	/*OozieClient oozieClient = new OozieClient(env.getProperty("oozie.OozieClient"));   //("http://ebiz.nspl.com:11000");
	      	Properties conf = oozieClient.createConfiguration();
	     	
	    	try{
	    		//CoordinatorJob info	=oozieClient.getCoordJobInfo(jobId);
	    			String		jobDef	=oozieClient.getJobDefinition(jobId);	
	    			log.info("Job Definitin: "+oozieClient.getJobDefinition(jobId));
	    			log.info(jobDef);
	    			
	    //			System.out.println("Workflow Job Group "+ jobDef.
	    			
	    				}catch(Exception e)
	    	{
	    		e.printStackTrace();
	    		System.out.println(e);
	    	}*/
	    }
	  
	  public String BuildInitOozieJob(@RequestBody OozieJobDTO oozieJobDTO,Long tenantId)
	    /*public void InitiateOozieJob(@RequestParam String jobType,@RequestParam String path,@RequestParam String hdfsPath, 
	     * @RequestParam String startDate, @RequestParam String endDate 
	    			,@RequestParam String frequency,@RequestParam String javaMainClass,@RequestParam String sparkClassName,
	    			@RequestParam String sparkJarName, @RequestParam String shellExec, 
	    			@RequestParam String shellFilePath, @RequestParam String jobName)*/
	    {

			System.out.println("Started");
			log.info("Sample Log");
			WfManager wfManager = new WfManagerImpl();
			coordinatorxml cxml = new coordinatorxml();
			//createjobproperties cjp = new createjobproperties();
			System.out.println(" Job Tracket from YML: "+env.getProperty("oozie.jobTracker"));
			String JobId = "";
			
			
			try {
				/*System.out.println("Hadoop: "+hadoopConfiguration.get("fs.defaultFS"));
				wfManager.generateWorkFlow(oozieJobDTO.getJobType(),oozieJobDTO.getPath(),hadoopConfiguration, oozieJobDTO.getJavaMainClass(),oozieJobDTO.getSparkClassName()
						,oozieJobDTO.getSparkJarName(),oozieJobDTO.getShellExec(),oozieJobDTO.getShellFilePath(),env.getProperty("oozie.jobTracker"), env.getProperty("oozie.nameNode"),oozieJobDTO.getJobName()); //removethis after adding jar
				//wfManager.generateWorkFlow(jobType,path,hadoopConfiguration);//, javaMainClass,sparkClassName,sparkJarName,shellExec,shellFilePath ); removethis after adding jar
				cxml.createCordinatorXml(oozieJobDTO.getJobType(),oozieJobDTO.getPath(),hadoopConfiguration);
				//cjp.createjobprop(jobType,path,startDate,endDate,hadoopConfiguration);
				writeToHdfs(oozieJobDTO.getPath()+"workflow.xml",oozieJobDTO.getHdfsPath()+"/workflow.xml");
				writeToHdfs(oozieJobDTO.getPath()+"coordinator.xml",oozieJobDTO.getHdfsPath()+"/coordinator.xml");
				//writeToHdfs(path+"job.properties",hdfsPath+"/job.properties");
	*/		
			    BuildOozieJob(oozieJobDTO,tenantId);
				log.info("env oozie client :"+env.getProperty("oozie.OozieClient"));
				String lipPath=env.getProperty("oozie.libpath");
				JobId = wfManager.initateOozieWithGeneratedWorkflow(env.getProperty("oozie.OozieClient"),hadoopConfiguration.get("fs.defaultFS")+oozieJobDTO.getHdfsPath(),oozieJobDTO.getStartDate(),oozieJobDTO.getEndDate(),env.getProperty("oozie.jobTracker"),
												env.getProperty("oozie.nameNode"),oozieJobDTO.getFrequency(),oozieJobDTO.getFrequencyType(),lipPath,oozieJobDTO.getTenantId());
				
				System.out.println("Job Id: "+JobId);
			} catch (Exception e) {
				log.info(CONTEXT, e);
			}
			return JobId;
		
	    }
	    
	    
	  public String KillOzieParentJob(@RequestParam String jobId) throws OozieClientException
	    {	  
	        
	    	System.out.println("REST API FOR OOZIE JOB Info");
	    	
	    	String oozieUrl=env.getProperty("oozie.OozieClient");
	    	WfManager wfManager = new WfManagerImpl();
	    	wfManager.killAnyJob(jobId, oozieUrl);
	    	OozieClient oozieClient = new OozieClient(oozieUrl); 
	    	String status=oozieClient.getStatus(jobId);
	    	return status;
	    	
	    }
	  /**
	   * Author : Ravali
	   * Moved from job details resource to oozie service in order to reuse the service (moved by shobha)
	   * @param tenantId
	   * @param userId
	   * @param progType
	   * @param parameterSet
	   * @return
	   */
	  public ResponseEntity jobIntiateForAcctAndRec(@RequestParam Long tenantId,@RequestParam Long userId,@RequestParam String progType,@RequestBody HashMap parameterSet)
	  {
	    	log.info("Rest Request to post job And scheduler details by parameter set :"+progType +"Map :"+parameterSet+" userId"+userId);
	    	OozieJobDTO oozieJobDTO=new OozieJobDTO();
	    	try
	    	{
	    		ApplicationPrograms app = applicationprogramsRepository.findByPrgmNameAndTenantId(progType,tenantId);
	    		if(app!=null)
	    		{
	    			oozieJobDTO.setHdfsPath(app.getTargetPath());
	    			if(app.getPrgmPath()!=null)
	    				oozieJobDTO.setJarFilePath(app.getPrgmPath());
	    			if(app.getPrgmOrClassName()!=null)
	    				oozieJobDTO.setClassName(app.getPrgmOrClassName());
	    			if(app.getPrgmType()!=null)
	    				oozieJobDTO.setJobType(app.getPrgmType());
	    			log.info("Prg.getPrgmName() :"+app.getPrgmName());
	    			oozieJobDTO.setProgramName(app.getPrgmName());
	    			oozieJobDTO.setPath(app.getGeneratedPath());
	    		}
	    		List<ProgParametersSets> prog=progParametersSetsRepository.findByProgramId(app.getId());
	    		log.info("prog.size():"+prog.size());
	    		log.info("parameterSet.size():"+parameterSet.size());


	    		if(parameterSet.keySet().size()==prog.size())
	    		{
	    			JobDetails job=new JobDetails();
	    			job.setJobName(progType+" OnDemand "+LocalDateTime.now());
	    			job.setJobDescription(progType+"-OnDemand-"+LocalDateTime.now());
	    			job.setProgrammId(app.getId());
	    			job.setEnable(true);
	    			job.setStartDate(LocalDate.now());
	    			job.setEndDate(LocalDate.now().plusDays(1));
	    			for(int i=0;i<parameterSet.keySet().size();i++)
	    			{
	    				log.info("parameterSet.get(i) :"+parameterSet.get(i));
	    				log.info("parameterSet.entrySet().size() :"+parameterSet.keySet().size());
	    				log.info("parameterSet.get(param1).toString() :"+parameterSet.get("param1").toString());
	    				if(i==0)
	    					job.setParameterArguments1(parameterSet.get("param1").toString());
	    				if(i==1)
	    					job.setParameterArguments2(parameterSet.get("param2").toString());
	    				if(i==2)
	    					job.setParameterArguments3(parameterSet.get("param3").toString());
	    				if(i==3)
	    					job.setParameterArguments4(parameterSet.get("param4").toString());
	    				if(i==4)
	    					job.setParameterArguments5(parameterSet.get("param5").toString());
	    				if(i==5)
	    					job.setParameterArguments6(parameterSet.get("param6").toString());
	    				if(i==6)
	    					job.setParameterArguments7(parameterSet.get("param7").toString());
	    				if(i==7)
	    					job.setParameterArguments8(parameterSet.get("param8").toString());
	    				if(i==8)
	    					job.setParameterArguments9(parameterSet.get("param9").toString());
	    				if(i==9)
	    					job.setParameterArguments10(parameterSet.get("param10").toString());

	    			}
	    			job.setTenantId(tenantId);
	    			job.setCreatedBy(userId);
	    			job.setCreationDate(ZonedDateTime.now());
	    			job.setLastUpdatedBy(userId);
	    			job.setLastUpdatedDate(ZonedDateTime.now());
	    			JobDetails jbId=jobDetailsRepository.save(job);
	    			SchedulerDetails schSave=new SchedulerDetails();

	    			if(jbId!=null &&jbId.getId()!=null)
	    			{
	    				SchedulerDetails sch=new SchedulerDetails();
	    				sch.setJobId(jbId.getId());
	    				sch.setFrequency("ONDEMAND");
	    				sch.setStartDate(ZonedDateTime.now());
	    				sch.setEndDate(ZonedDateTime.now().plusDays(1));
	    				sch.setCreatedBy(userId);
	    				sch.setCreationDate(ZonedDateTime.now());
	    				sch.setLastUpdatedBy(userId);
	    				sch.setLastUpdatedDate(ZonedDateTime.now());
	    				schSave=schedularDetailsRepository.save(sch);
	    			}



	    			String startDate=schSave.getStartDate().toString();
	    			log.info("startDate :"+startDate);
	    			String start1=startDate.substring(0, 10);
	    			String start2=startDate.substring(11, 16);
	    			String finalStartDate=start1+"T0"+start2+"+0530";

	    			if(schSave.getEndDate()!=null)
	    			{
	    				String endDate=schSave.getEndDate().toString();
	    				log.info("endDate :"+startDate);
	    				String end1=endDate.substring(0, 10);
	    				String end2=endDate.substring(11, 16);
	    				String finalEndDate=end1+"T0"+end2+"+0530";
	    				log.info("finalStartDate :"+finalStartDate);
	    				log.info("finalEndDate :"+finalEndDate);
	    				oozieJobDTO.setEndDate(finalEndDate);
	    			}
	    			oozieJobDTO.setStartDate(finalStartDate);

	    			if(job.getJobName()!=null)
	    			{
	    				String jobNm=job.getJobName().replaceAll("\\s+","").replaceAll("[^a-zA-Z0-9]","");
	    				log.info("jobNm :"+jobNm);
	    				oozieJobDTO.setJobName(jobNm);
	    				oozieJobDTO.setJobId(job.getId());
	    			}
	    			oozieJobDTO.setProgramName(progType);
	    			//Build Job
	    			if(schSave.getFrequency()!=null)
	    				oozieJobDTO.setFrequencyType(schSave.getFrequency());
	    			oozieJobDTO.setFrequency("* * * * *");
	    			oozieJobDTO .setProgramId(job.getProgrammId());
	    			BuildOozieJob(oozieJobDTO,tenantId);
	    			//Iniatiate Job
	    			String JobId=InitiateOozieJob(oozieJobDTO);
	    			HashMap map=new HashMap();
	    			String Id="";
	    			if(JobId!=null&& !JobId.isEmpty())
	    			{
	    				Id=JobId;
	    				map.put("status", "Scheduler Started Sucessfully with jodId :"+JobId);
	    				schSave.setStatus("Submitted");
	    			}
	    			else
	    			{
	    				map.put("status", "Failed to intiate job");
	    				schSave.setStatus("Error");
	    			}
	    			schSave.setOozieJobId(JobId);
	    			schedularDetailsRepository.save(schSave);
	    			
	    			
	    			return new ResponseEntity(map,HttpStatus.OK);

	    		}
	    		else
	    		{
	    			HashMap map = new HashMap();
	    			map.put("status", "Required Parameters are missing");
	    			
	    			return new ResponseEntity(map,HttpStatus.INTERNAL_SERVER_ERROR);
	    			//log.info("Status Code: "+ ren.getStatusCode());
	    			//map.put("Exception", "parameters mismatch");

	    		}
	    	}
	    	catch(Exception e)
	    	{
	    		HashMap map = new HashMap();
	    		log.info("Excep :"+e.getCause());
	    		map.put("status", e.getLocalizedMessage());
	    		return new ResponseEntity(map,HttpStatus.INTERNAL_SERVER_ERROR);
	    	}
	    	//return map;
	    }
}
