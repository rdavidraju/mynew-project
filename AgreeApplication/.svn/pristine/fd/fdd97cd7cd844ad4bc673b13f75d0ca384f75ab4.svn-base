package com.nspl.app.domain;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.data.elasticsearch.annotations.Document;

import javax.persistence.*;
import java.io.Serializable;
import java.time.ZonedDateTime;
import java.util.Objects;

/**
 * A LinkedDataViews.
 */
@Entity
@Table(name = "t_linked_data_views")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
@Document(indexName = "tlinkeddataviews")
public class LinkedDataViews implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "data_view_id")
    private Long dataViewId;

    @Column(name = "linked_data_view")
    private String linkedDataView;

    @Column(name = "linked_data_view_id")
    private Long linkedDataViewId;

    @Column(name = "filter_or_join_condition")
    private String filterOrJoinCondition;

    @Column(name = "created_by")
    private Long createdBy;

    @Column(name = "last_updated_by")
    private Long lastUpdatedBy;

    @Column(name = "creation_date")
    private ZonedDateTime creationDate;

    @Column(name = "last_updated_date")
    private ZonedDateTime lastUpdatedDate;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getDataViewId() {
        return dataViewId;
    }

    public LinkedDataViews dataViewId(Long dataViewId) {
        this.dataViewId = dataViewId;
        return this;
    }

    public void setDataViewId(Long dataViewId) {
        this.dataViewId = dataViewId;
    }

    public String getLinkedDataView() {
        return linkedDataView;
    }

    public LinkedDataViews linkedDataView(String linkedDataView) {
        this.linkedDataView = linkedDataView;
        return this;
    }

    public void setLinkedDataView(String linkedDataView) {
        this.linkedDataView = linkedDataView;
    }

    public Long getLinkedDataViewId() {
        return linkedDataViewId;
    }

    public LinkedDataViews linkedDataViewId(Long linkedDataViewId) {
        this.linkedDataViewId = linkedDataViewId;
        return this;
    }

    public void setLinkedDataViewId(Long linkedDataViewId) {
        this.linkedDataViewId = linkedDataViewId;
    }

    public String getFilterOrJoinCondition() {
        return filterOrJoinCondition;
    }

    public LinkedDataViews filterOrJoinCondition(String filterOrJoinCondition) {
        this.filterOrJoinCondition = filterOrJoinCondition;
        return this;
    }

    public void setFilterOrJoinCondition(String filterOrJoinCondition) {
        this.filterOrJoinCondition = filterOrJoinCondition;
    }

    public Long getCreatedBy() {
        return createdBy;
    }

    public LinkedDataViews createdBy(Long createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    public Long getLastUpdatedBy() {
        return lastUpdatedBy;
    }

    public LinkedDataViews lastUpdatedBy(Long lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public void setLastUpdatedBy(Long lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    public ZonedDateTime getCreationDate() {
        return creationDate;
    }

    public LinkedDataViews creationDate(ZonedDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }

    public void setCreationDate(ZonedDateTime creationDate) {
        this.creationDate = creationDate;
    }

    public ZonedDateTime getLastUpdatedDate() {
        return lastUpdatedDate;
    }

    public LinkedDataViews lastUpdatedDate(ZonedDateTime lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
        return this;
    }

    public void setLastUpdatedDate(ZonedDateTime lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LinkedDataViews linkedDataViews = (LinkedDataViews) o;
        if (linkedDataViews.id == null || id == null) {
            return false;
        }
        return Objects.equals(id, linkedDataViews.id);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(id);
    }

    @Override
    public String toString() {
        return "LinkedDataViews{" +
            "id=" + id +
            ", dataViewId='" + dataViewId + "'" +
            ", linkedDataView='" + linkedDataView + "'" +
            ", linkedDataViewId='" + linkedDataViewId + "'" +
            ", filterOrJoinCondition='" + filterOrJoinCondition + "'" +
            ", createdBy='" + createdBy + "'" +
            ", lastUpdatedBy='" + lastUpdatedBy + "'" +
            ", creationDate='" + creationDate + "'" +
            ", lastUpdatedDate='" + lastUpdatedDate + "'" +
            '}';
    }
}
