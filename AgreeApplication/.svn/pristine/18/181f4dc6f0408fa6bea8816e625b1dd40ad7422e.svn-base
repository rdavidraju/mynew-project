package com.nspl.app.web.rest;

import io.github.jhipster.web.util.ResponseUtil;
import io.swagger.annotations.ApiParam;

import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import au.com.bytecode.opencsv.CSVReader;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.ApprovalGroups;
import com.nspl.app.domain.FxRates;
import com.nspl.app.domain.FxRatesDetails;
import com.nspl.app.repository.FxRatesDetailsRepository;
import com.nspl.app.repository.FxRatesRepository;
import com.nspl.app.web.rest.dto.ErrorReporting;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;

/**
 * REST controller for managing FxRates.
 */
@RestController
@RequestMapping("/api")
public class FxRatesResource {

    private final Logger log = LoggerFactory.getLogger(FxRatesResource.class);

    private static final String ENTITY_NAME = "fxRates";
        
    private final FxRatesRepository fxRatesRepository;
    
    @Inject
    FxRatesDetailsRepository fxRatesDetailsRepository;

    public FxRatesResource(FxRatesRepository fxRatesRepository) {
        this.fxRatesRepository = fxRatesRepository;
    }

    /**
     * POST  /fx-rates : Create a new fxRates.
     *
     * @param fxRates the fxRates to create
     * @return the ResponseEntity with status 201 (Created) and with body the new fxRates, or with status 400 (Bad Request) if the fxRates has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/fx-rates")
    @Timed
    public ResponseEntity<FxRates> createFxRates(@RequestBody FxRates fxRates) throws URISyntaxException {
        log.debug("REST request to save FxRates : {}", fxRates);
        if (fxRates.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new fxRates cannot already have an ID")).body(null);
        }
        FxRates result = fxRatesRepository.save(fxRates);
        return ResponseEntity.created(new URI("/api/fx-rates/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /fx-rates : Updates an existing fxRates.
     *
     * @param fxRates the fxRates to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated fxRates,
     * or with status 400 (Bad Request) if the fxRates is not valid,
     * or with status 500 (Internal Server Error) if the fxRates couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/fx-rates")
    @Timed
    public ResponseEntity<FxRates> updateFxRates(@RequestBody FxRates fxRates,@RequestParam Long userId) throws URISyntaxException {
        log.debug("REST request to update FxRates : {}", fxRates);
        if (fxRates.getId() == null) {
            return createFxRates(fxRates);
        }
        fxRates.setStartDate(fxRates.getStartDate().plusDays(1));
        if(fxRates.getEndDate()!=null){
        fxRates.setEndDate(fxRates.getEndDate().plusDays(1));
        }
        fxRates.setLastUpdatedBy(userId);
        fxRates.setLastUpdatedDate(ZonedDateTime.now());
        FxRates result = fxRatesRepository.save(fxRates);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, fxRates.getId().toString()))
            .body(result);
    }

    /**
     * GET  /fx-rates : get all the fxRates.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of fxRates in body
     */
    @GetMapping("/fx-rates")
    @Timed
    public ResponseEntity<List<FxRates>> getAllFxRates(@ApiParam Pageable pageable) {
        log.debug("REST request to get a page of FxRates");
        Page<FxRates> page = fxRatesRepository.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/fx-rates");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /fx-rates/:id : get the "id" fxRates.
     *
     * @param id the id of the fxRates to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the fxRates, or with status 404 (Not Found)
     */
    @GetMapping("/fx-rates/{id}")
    @Timed
    public ResponseEntity<FxRates> getFxRates(@PathVariable Long id) {
        log.debug("REST request to get FxRates : {}", id);
        FxRates fxRates = fxRatesRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(fxRates));
    }

    /**
     * DELETE  /fx-rates/:id : delete the "id" fxRates.
     *
     * @param id the id of the fxRates to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/fx-rates/{id}")
    @Timed
    public ResponseEntity<Void> deleteFxRates(@PathVariable Long id) {
        log.debug("REST request to delete FxRates : {}", id);
        fxRatesRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }
    
    
    /**
     * author:ravali
     * Get all FxRates details with pagination
     * @param offset
     * @param limit
     * @param tenantId
     * @param response
     * @return
     * @throws URISyntaxException
     */
    @GetMapping("/getAllFxRates")
 	@Timed
 	public ResponseEntity<List<FxRates>> getRuleGroupsByTenantId(@RequestParam(value = "page" , required = false) Integer offset,
 			@RequestParam(value = "per_page", required = false) Integer limit,@RequestParam Long tenantId,HttpServletResponse response) throws URISyntaxException {
 		log.debug("REST request to get a page of FxRates");
 		List<FxRates> fxRateList = new ArrayList<FxRates>();
 		PaginationUtil paginationUtil=new PaginationUtil();
 		
 		int maxlmt=paginationUtil.MAX_LIMIT;
 		int minlmt=paginationUtil.MIN_OFFSET;
 		log.info("maxlmt: "+maxlmt);
 		Page<FxRates> page = null;
 		HttpHeaders headers = null;
 		
 		
 		List<FxRates> fxRateListCnt = fxRatesRepository.findByTenantIdOrderByIdDesc(tenantId);
    	response.addIntHeader("X-COUNT", fxRateListCnt.size());
 		
 		
 		
 		if(limit==null || limit<minlmt){
 			fxRateList = fxRatesRepository.findByTenantIdOrderByIdDesc(tenantId);
 			limit = fxRateList.size();
 		}
 		if(limit == 0 )
     	{
     		limit = paginationUtil.DEFAULT_LIMIT;
     	}
     	if(offset == null || offset == 0)
     	{
     		offset = paginationUtil.DEFAULT_OFFSET;
     	}
     	if(limit>maxlmt)
 		{
 			log.info("input limit exceeds maxlimit");
 			 page = fxRatesRepository.findByTenantIdOrderByIdDesc(tenantId,PaginationUtil.generatePageRequest2(offset, limit));
 			headers = PaginationUtil.generatePaginationHttpHeaders2(page, "/api/functionalities",offset, limit);
 		}
 		else{
 			log.info("input limit is within maxlimit");
 			page = fxRatesRepository.findByTenantIdOrderByIdDesc(tenantId,PaginationUtil.generatePageRequest(offset, limit));
 			headers = PaginationUtil.generatePaginationHttpHeaderss(page, "/api/functionalities", offset, limit);
 		}
 		return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
     }
    
    /**
     * author :ravali
     * Desc : API to get Fx rates and their details by fxRates Id
     * @param id
     * @return
     */
    @GetMapping("/getFxRatesAndFxRatesDetailsById")
   	@Timed
   	public HashMap getFxRatesAndFxRatesDetailsById(@RequestParam Long id)
    {
    	log.info("Rest Request to get FxRates And FxRatesDetails By Id :"+id);
    	HashMap fxRatesAndDetails=new HashMap();
    	FxRates fxRates=fxRatesRepository.findOne(id);
    	fxRatesAndDetails.put("id", fxRates.getId());
    	fxRatesAndDetails.put("conversionType", fxRates.getConversionType());
    	fxRatesAndDetails.put("createdBy",fxRates.getCreatedBy());
    	fxRatesAndDetails.put("createdDate", fxRates.getCreatedDate());
    	fxRatesAndDetails.put("description", fxRates.getDescription());
    	fxRatesAndDetails.put("enabledFlag", fxRates.isEnabledFlag());
    	fxRatesAndDetails.put("endDate", fxRates.getEndDate());
    	fxRatesAndDetails.put("lastUpdatedBy", fxRates.getLastUpdatedBy());
    	fxRatesAndDetails.put("lastUpdatedDate", fxRates.getLastUpdatedDate());
    	fxRatesAndDetails.put("name", fxRates.getName());
    	fxRatesAndDetails.put("startDate", fxRates.getStartDate());
    	fxRatesAndDetails.put("tenantId", fxRates.getTenantId());

    	List<FxRatesDetails> fxRatesDetailList=fxRatesDetailsRepository.findByFxRateId(id);
    	List<HashMap> fxRatesDetailMapList=new ArrayList<HashMap>();
    	log.info("fxRatesDetailList :"+fxRatesDetailList.size());
    	for(FxRatesDetails fxRatesDetail:fxRatesDetailList)
    	{
    		HashMap fxRatesDetailMap=new HashMap();
    		fxRatesDetailMap.put("id", fxRatesDetail.getId());
    		fxRatesDetailMap.put("conversionRate", fxRatesDetail.getConversionRate());
    		fxRatesDetailMap.put("createdBy", fxRatesDetail.getCreatedBy());
    		fxRatesDetailMap.put("createdDate", fxRatesDetail.getCreatedDate());
    		fxRatesDetailMap.put("fromCurrency", fxRatesDetail.getFromCurrency());
    		fxRatesDetailMap.put("fromDate", fxRatesDetail.getFromDate());
    		fxRatesDetailMap.put("fxRateId", fxRatesDetail.getFxRateId());
    		fxRatesDetailMap.put("inverseRate", fxRatesDetail.getInverseRate());
    		fxRatesDetailMap.put("lastUpdatedBy", fxRatesDetail.getLastUpdatedBy());
    		fxRatesDetailMap.put("lastUpdatedDate", fxRatesDetail.getLastUpdatedDate());
    		fxRatesDetailMap.put("source", fxRatesDetail.getSource());
    		//fxRatesDetailMap.put("statusCode", fxRatesDetail.getStatusCode());
    		fxRatesDetailMap.put("enabledFlag", fxRatesDetail.isEnabledFlag());
    		fxRatesDetailMap.put("toCurrency", fxRatesDetail.getToCurrency());
    		fxRatesDetailMap.put("toDate", fxRatesDetail.getToDate());
    		fxRatesDetailMapList.add(fxRatesDetailMap);

    	}
    	fxRatesAndDetails.put("fxRatesDetails", fxRatesDetailMapList);
    	return fxRatesAndDetails;
    }

    
    /**
     * author :ravali
     * @param fxRatesAndDetails
     * @param userId
     * @param tenantId
     * @return
     */
    
    @PostMapping("/postFxRatesAndFxRatesDetails")
   	@Timed
   	public HashMap postFxRatesAndFxRatesDetails(@RequestBody HashMap fxRatesAndDetails,@RequestParam Long userId,@RequestParam Long tenantId)
    {
    	log.info("Rest Request to post FxRates And FxRatesDetails :");
    	HashMap finalMap=new HashMap();
    	FxRates fxRates=new FxRates();
    	if(fxRatesAndDetails.get("conversionType")!=null)
    		fxRates.setConversionType(fxRatesAndDetails.get("conversionType").toString());
    	fxRates.setCreatedBy(userId);
    	fxRates.setCreatedDate(ZonedDateTime.now());
    	if(fxRatesAndDetails.get("description")!=null)
    		fxRates.setDescription(fxRatesAndDetails.get("description").toString());
    	fxRates.setEnabledFlag(true);
    	if(fxRatesAndDetails.get("endDate")!=null)
    	{
    		ZonedDateTime stDate=ZonedDateTime.parse(fxRatesAndDetails.get("endDate").toString());
    		fxRates.setEndDate(stDate.toLocalDate().plusDays(1));
    	}
    	fxRates.setLastUpdatedBy(userId);
    	fxRates.setLastUpdatedDate(ZonedDateTime.now());
    	if(fxRatesAndDetails.get("name")!=null)
    		fxRates.setName(fxRatesAndDetails.get("name").toString());
    	if(fxRatesAndDetails.get("startDate")!=null)
    	{
    		ZonedDateTime edDate=ZonedDateTime.parse(fxRatesAndDetails.get("startDate").toString());
    		fxRates.setStartDate(edDate.toLocalDate().plusDays(1));
    	}
    	fxRates.setTenantId(tenantId);
    	fxRatesRepository.save(fxRates);
    	finalMap.put("id", fxRates.getId());
    	finalMap.put("name", fxRates.getName());


    	int count=0;
    	List<HashMap> fxRatesDetailMapList=(List<HashMap>) fxRatesAndDetails.get("fxRatesDetails");
    	if(fxRates.getId()!=null)
    	{
    		for(int i=0;i<fxRatesDetailMapList.size();i++)
    		{
    			count=count+1;
    			HashMap fxRatesDetailMap=fxRatesDetailMapList.get(i);
    			FxRatesDetails fxRatesDetail=new FxRatesDetails();

    			fxRatesDetail.setConversionRate(new BigDecimal(fxRatesDetailMap.get("conversionRate").toString()));
    			fxRatesDetail.setCreatedBy(userId);
    			fxRatesDetail.setCreatedDate(ZonedDateTime.now());
    			if(fxRatesDetailMap.get("fromCurrency")!=null)
    				fxRatesDetail.setFromCurrency(fxRatesDetailMap.get("fromCurrency").toString());
    			if(fxRatesDetailMap.get("fromDate")!=null)
    			{
    				ZonedDateTime fmDate=ZonedDateTime.parse(fxRatesDetailMap.get("fromDate").toString());
    				fxRatesDetail.setFromDate(fmDate.toLocalDate().plusDays(1));
    			}
    			fxRatesDetail.setFxRateId(fxRates.getId());
    			if(fxRatesDetailMap.get("inverseRate")!=null)
    				fxRatesDetail.setInverseRate(new BigDecimal(fxRatesDetailMap.get("inverseRate").toString()));
    			fxRatesDetail.setLastUpdatedBy(userId);
    			fxRatesDetail.setLastUpdatedDate(ZonedDateTime.now());
    			if(fxRatesDetailMap.get("source")!=null)
    				fxRatesDetail.setSource(fxRatesDetailMap.get("source").toString());
    			//if(fxRatesDetailMap.get("statusCode")!=null)
    			//fxRatesDetail.setStatusCode(fxRatesDetailMap.get("statusCode").toString());
    			fxRatesDetail.setEnabledFlag(true);
    			if(fxRatesDetailMap.get("toCurrency")!=null)
    				fxRatesDetail.setToCurrency(fxRatesDetailMap.get("toCurrency").toString());
    			if(fxRatesDetailMap.get("toDate")!=null)
    			{
    				ZonedDateTime toDate=ZonedDateTime.parse(fxRatesDetailMap.get("toDate").toString());
    				fxRatesDetail.setToDate(toDate.toLocalDate().plusDays(1));
    			}
    			fxRatesDetailsRepository.save(fxRatesDetail);

    		}
    	}
    	return finalMap;
    }

    /**
     * Author: Shiva
     * Description: Bulk uploading fx rates and fx rates details
     * @Param: tenantId, userId, multipartfile
     */
    @PostMapping("/fxRatesBulkUpload")
    @Timed
    public ErrorReporting fxRatesBulkUpload(@RequestParam MultipartFile multipart, @RequestParam Long tenantId, @RequestParam Long userId)
    {
    	log.info("Rest api for bulk uploading fx rates and fx rates details for the teanant id: "+ tenantId +", File name: "+multipart.getOriginalFilename());
    	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/MM/yyyy");
    	ErrorReporting errorReport = new ErrorReporting();
    	List<String> reasons = new ArrayList<String>();
    	
    	List<Long> fxRatesIds = new ArrayList<Long>();
    	List<Long> fxRatesDetailsIds = new ArrayList<Long>();
    	
    	try{
    		CSVReader csvReader = new CSVReader(new InputStreamReader(multipart.getInputStream()), ',' , '"');
    		int nameIndx = 0;
    		int desIndx = 0;
    		int conTypeIndx = 0;
    		int sDateIndx = 0;
    		int eDateIndx = 0;
    		int frmCurrencyIndx = 0;
    		int toCurrencyIndx = 0;
    		int conRateIndx = 0;
    		int inverseRateIndx = 0;
    		int sourceIndx = 0;

			List<String[]> allRows = csvReader.readAll();
			log.info("All Rows Size: "+ allRows.size());
			if(allRows.size()>0)
			{
				log.info("Getting Header Row Indexes...");
				String[] header = allRows.get(0);
				for(int i=0; i<header.length; i++)
				{
					if("name".equalsIgnoreCase(header[i].toString()))
						nameIndx=i;
					else if("description".equalsIgnoreCase(header[i].toString()))
						desIndx=i;
					else if("conversion_type".equalsIgnoreCase(header[i].toString()))
						conTypeIndx=i;
					else if("start_date".equalsIgnoreCase(header[i].toString()))
						sDateIndx=i;
					else if("end_date".equalsIgnoreCase(header[i].toString()))
						eDateIndx=i;
					else if("from_currency".equalsIgnoreCase(header[i].toString()))
						frmCurrencyIndx=i;
					else if("to_currency".equalsIgnoreCase(header[i].toString()))
						toCurrencyIndx=i;
					else if("conversion_rate".equalsIgnoreCase(header[i].toString()))
						conRateIndx=i;
					else if("inverse_rate".equalsIgnoreCase(header[i].toString()))
						inverseRateIndx=i;
					else if("source".equalsIgnoreCase(header[i].toString()))
						sourceIndx=i;
				}
				log.info("Filed Indexes: name["+nameIndx+"], description["+desIndx+"], conversion_type["+conTypeIndx+"],"
						+ "start_date["+sDateIndx+"], end_date["+eDateIndx+"], from_currency["+frmCurrencyIndx+"], to_currency["+toCurrencyIndx+"], conversion_rate["+conRateIndx+"]"
						+", inverse_rate["+inverseRateIndx+"], source["+sourceIndx+"]");
			
				if(allRows.size()>1)
				{
					log.info("Reading data...");
					List<String> names = new ArrayList<String>();
					for(int j=1; j<allRows.size(); j++)
					{
						try{
							String[] row = allRows.get(j);
							if(!"NULL".equalsIgnoreCase(row[nameIndx].toString()) || !(row[nameIndx].toString().isEmpty()))
							{
								if(names.contains(row[nameIndx].toString().trim()))
								{
									//log.info("Contains>>>>>> "+ names);
									//log.info("name: "+row[nameIndx].toString()+" existed");
									FxRates fr = fxRatesRepository.findByTenantIdAndName(tenantId, row[nameIndx].toString());
									if(fr != null)
									{
										log.info("Inside if: ");
										FxRatesDetails fxrDetails = new FxRatesDetails();
										fxrDetails.setFxRateId(fr.getId());
										if(!"NULL".equalsIgnoreCase(row[frmCurrencyIndx].toString()) || !(row[frmCurrencyIndx].toString().isEmpty()))
											fxrDetails.setFromCurrency(row[frmCurrencyIndx].toString());
										if(!"NULL".equalsIgnoreCase(row[toCurrencyIndx].toString()) || !(row[toCurrencyIndx].toString().isEmpty()))
											fxrDetails.setToCurrency(row[toCurrencyIndx].toString());
										if(!"NULL".equalsIgnoreCase(row[sDateIndx].toString()) || !(row[sDateIndx].toString().isEmpty()))
											fxrDetails.setFromDate(LocalDate.parse(row[sDateIndx].toString(), formatter));
										if(!"NULL".equalsIgnoreCase(row[eDateIndx].toString()) || !(row[eDateIndx].toString().isEmpty()))
											fxrDetails.setToDate(LocalDate.parse(row[eDateIndx].toString(), formatter));
										if(!"NULL".equalsIgnoreCase(row[conRateIndx].toString()) || !(row[conRateIndx].toString().isEmpty()))
											fxrDetails.setConversionRate(new BigDecimal(row[conRateIndx].toString()));
										if(!"NULL".equalsIgnoreCase(row[inverseRateIndx].toString()) || !(row[inverseRateIndx].toString().isEmpty()))
											fxrDetails.setInverseRate(new BigDecimal(row[inverseRateIndx].toString()));
										if(!"NULL".equalsIgnoreCase(row[sourceIndx].toString()) || !(row[sourceIndx].toString().isEmpty()))
											fxrDetails.setSource(row[sourceIndx].toString());
										fxrDetails.setCreatedBy(userId);
										fxrDetails.setCreatedDate(ZonedDateTime.now());
										fxrDetails.setLastUpdatedBy(userId);
										fxrDetails.setLastUpdatedDate(ZonedDateTime.now());
										fxrDetails.setEnabledFlag(true);
										FxRatesDetails createMSValues = fxRatesDetailsRepository.save(fxrDetails);
										fxRatesDetailsIds.add(createMSValues.getId());
									}
								}
								else
								{
									//log.info("Saving "+row[nameIndx].toString()+" in mapping set table...");
									FxRates fxRates = new FxRates();
									fxRates.setTenantId(tenantId);
									fxRates.setName(row[nameIndx].toString());
									if(!"NULL".equalsIgnoreCase(row[desIndx].toString()) || !(row[desIndx].toString().isEmpty()))
										fxRates.setDescription(row[desIndx].toString());
									if(!"NULL".equalsIgnoreCase(row[conTypeIndx].toString()) || !(row[conTypeIndx].toString().isEmpty()))
										fxRates.setConversionType(row[conTypeIndx].toString());
									if(!"NULL".equalsIgnoreCase(row[sDateIndx].toString()) || !(row[sDateIndx].toString().isEmpty()))
										fxRates.setStartDate(LocalDate.parse(row[sDateIndx].toString(), formatter));
									if(!"NULL".equalsIgnoreCase(row[eDateIndx].toString()) || !(row[eDateIndx].toString().isEmpty()))
									{
										fxRates.setEndDate(LocalDate.parse(row[eDateIndx].toString(), formatter));
									}
									else if("NULL".equalsIgnoreCase(row[eDateIndx].toString()) || (row[eDateIndx].toString().isEmpty()))
									{
										fxRates.setEndDate(null);
									}
									fxRates.setCreatedBy(userId);
									fxRates.setCreatedDate(ZonedDateTime.now());
									fxRates.setLastUpdatedBy(userId);
									fxRates.setLastUpdatedDate(ZonedDateTime.now());
									fxRates.setEnabledFlag(true);
									FxRates fr = fxRatesRepository.findByTenantIdAndName(tenantId, row[nameIndx].toString());
									FxRates createFxRates = new FxRates();
									if(fr != null)
									{
										fxRates.setId(fr.getId());
										createFxRates = fxRatesRepository.save(fxRates);
										fxRatesIds.add(createFxRates.getId());
									}
									else
									{
										createFxRates = fxRatesRepository.save(fxRates);
										fxRatesIds.add(createFxRates.getId());
									}

									FxRatesDetails fxrDetails = new FxRatesDetails();
									fxrDetails.setFxRateId(createFxRates.getId());
									if(!"NULL".equalsIgnoreCase(row[frmCurrencyIndx].toString()) || !(row[frmCurrencyIndx].toString().isEmpty()))
										fxrDetails.setFromCurrency(row[frmCurrencyIndx].toString());
									if(!"NULL".equalsIgnoreCase(row[toCurrencyIndx].toString()) || !(row[toCurrencyIndx].toString().isEmpty()))
										fxrDetails.setToCurrency(row[toCurrencyIndx].toString());
									if(!"NULL".equalsIgnoreCase(row[sDateIndx].toString()) || !(row[sDateIndx].toString().isEmpty()))
										fxrDetails.setFromDate(LocalDate.parse(row[sDateIndx].toString(), formatter));
									if(!"NULL".equalsIgnoreCase(row[eDateIndx].toString()) || !(row[eDateIndx].toString().isEmpty()))
									{
										fxrDetails.setToDate(LocalDate.parse(row[eDateIndx].toString(), formatter));
									}
									else if("NULL".equalsIgnoreCase(row[eDateIndx].toString()) || (row[eDateIndx].toString().isEmpty()))
									{
										fxrDetails.setToDate(null);
									}
									if(!"NULL".equalsIgnoreCase(row[conRateIndx].toString()) || !(row[conRateIndx].toString().isEmpty()))
										fxrDetails.setConversionRate(new BigDecimal(row[conRateIndx].toString()));
									if(!"NULL".equalsIgnoreCase(row[inverseRateIndx].toString()) || !(row[inverseRateIndx].toString().isEmpty()))
										fxrDetails.setInverseRate(new BigDecimal(row[inverseRateIndx].toString()));
									if(!"NULL".equalsIgnoreCase(row[sourceIndx].toString()) || !(row[sourceIndx].toString().isEmpty()))
										fxrDetails.setSource(row[sourceIndx].toString());
									fxrDetails.setCreatedBy(userId);
									fxrDetails.setCreatedDate(ZonedDateTime.now());
									fxrDetails.setLastUpdatedBy(userId);
									fxrDetails.setLastUpdatedDate(ZonedDateTime.now());
									fxrDetails.setEnabledFlag(true);
									FxRatesDetails createMSValues = fxRatesDetailsRepository.save(fxrDetails);
									fxRatesDetailsIds.add(createMSValues.getId());
									names.add(row[nameIndx].toString());
								}
							}
							errorReport.setStatus("Success");
						}
						catch(DateTimeParseException e)
						{
							errorReport.setStatus("Failed");
							reasons.add("Invalid date format found in row : "+ j);
							break;
						}
						catch(Exception e)
						{
							errorReport.setStatus("Failed");
							reasons.add("Un able to read the row : "+ j);
							break;
						}
					}
				}
				else
				{
					errorReport.setStatus("Failed");
					reasons.add("There is no data present in the file.");
				}
			}
			else
			{
				errorReport.setStatus("Failed");
				reasons.add("You have been uploaded empty file.");
			}
			if("Failed".equalsIgnoreCase(errorReport.getStatus()))
			{
				if(fxRatesIds.size()>0)
	    		{
	    			for(Long id : fxRatesIds)
	    			{
	    				fxRatesRepository.delete(id);
	    			}
	    		}
	    		if(fxRatesDetailsIds.size()>0)
	    		{
	    			for(Long id : fxRatesDetailsIds)
	    			{
	    				fxRatesDetailsRepository.delete(id);
	    			}
	    		}
			}
    	}
    	catch(Exception e)
    	{
    		log.info("Exception: "+e);
    	}
    	errorReport.setReasons(reasons);
    	return errorReport;
    }
   	
    /**
     * Author: Shiva
     * Purpose: Check weather fx rates exist or not
     * **/
    @GetMapping("/checkFxRatesIsExist")
	@Timed
	public HashMap checkApprovalGroupIsExist(@RequestParam String name,@RequestParam Long tenantId,@RequestParam(required=false,value="id") Long id)
	{
		HashMap map=new HashMap();
		map.put("result", "No Duplicates Found");
		if(id != null)
		{
			FxRates fxRatesWithId = fxRatesRepository.findByIdAndNameAndTenantId(id, name, tenantId);
			if(fxRatesWithId != null)
			{
				map.put("result", "No Duplicates Found");
			}
			else
			{
				List<FxRates> fxRates = fxRatesRepository.fetchByTenantIdAndName(tenantId, name);
				if(fxRates.size()>0)
				{
					map.put("result", "'"+name+"' fx rates already exists");
				}
			}
		}
		else 
		{
			List<FxRates> fxRates = fxRatesRepository.fetchByTenantIdAndName(tenantId, name);
			if(fxRates.size()>0)
			{
				map.put("result", "'"+name+"' fx rates already exists");
			}
		}
		return map;
	}
}
