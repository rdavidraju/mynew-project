package com.nspl.app.domain;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.springframework.data.elasticsearch.annotations.Document;

import javax.persistence.*;
import java.io.Serializable;
import java.time.ZonedDateTime;
import java.util.Objects;

/**
 * A AccountingDataMapping.
 */
@Entity
@Table(name = "t_accounting_data_mapping")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
@Document(indexName = "taccountingdatamapping")
public class AccountingDataMapping implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "acct_line_type_id")
    private Long acctLineTypeId;

    @Column(name = "accounting_ref")
    private String accountingRef;

    @Column(name = "accounting_table_column_ref")
    private String accountingTableColumnRef;

    @Column(name = "value_type")
    private String valueType;

    @Column(name = "value")
    private String value;

    @Column(name = "created_by")
    private Long createdBy;

    @Column(name = "last_updated_by")
    private Long lastUpdatedBy;

    @Column(name = "creation_date")
    private ZonedDateTime creationDate;

    @Column(name = "last_updated_date")
    private ZonedDateTime lastUpdatedDate;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getAcctLineTypeId() {
        return acctLineTypeId;
    }

    public AccountingDataMapping acctLineTypeId(Long acctLineTypeId) {
        this.acctLineTypeId = acctLineTypeId;
        return this;
    }

    public void setAcctLineTypeId(Long acctLineTypeId) {
        this.acctLineTypeId = acctLineTypeId;
    }

    public String getAccountingRef() {
        return accountingRef;
    }

    public AccountingDataMapping accountingRef(String accountingRef) {
        this.accountingRef = accountingRef;
        return this;
    }

    public void setAccountingRef(String accountingRef) {
        this.accountingRef = accountingRef;
    }

    public String getAccountingTableColumnRef() {
        return accountingTableColumnRef;
    }

    public AccountingDataMapping accountingTableColumnRef(String accountingTableColumnRef) {
        this.accountingTableColumnRef = accountingTableColumnRef;
        return this;
    }

    public void setAccountingTableColumnRef(String accountingTableColumnRef) {
        this.accountingTableColumnRef = accountingTableColumnRef;
    }

    public String getValueType() {
        return valueType;
    }

    public AccountingDataMapping valueType(String valueType) {
        this.valueType = valueType;
        return this;
    }

    public void setValueType(String valueType) {
        this.valueType = valueType;
    }

    public String getValue() {
        return value;
    }

    public AccountingDataMapping value(String value) {
        this.value = value;
        return this;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public Long getCreatedBy() {
        return createdBy;
    }

    public AccountingDataMapping createdBy(Long createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    public Long getLastUpdatedBy() {
        return lastUpdatedBy;
    }

    public AccountingDataMapping lastUpdatedBy(Long lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public void setLastUpdatedBy(Long lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    public ZonedDateTime getCreationDate() {
        return creationDate;
    }

    public AccountingDataMapping creationDate(ZonedDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }

    public void setCreationDate(ZonedDateTime creationDate) {
        this.creationDate = creationDate;
    }

    public ZonedDateTime getLastUpdatedDate() {
        return lastUpdatedDate;
    }

    public AccountingDataMapping lastUpdatedDate(ZonedDateTime lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
        return this;
    }

    public void setLastUpdatedDate(ZonedDateTime lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingDataMapping accountingDataMapping = (AccountingDataMapping) o;
        if (accountingDataMapping.id == null || id == null) {
            return false;
        }
        return Objects.equals(id, accountingDataMapping.id);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(id);
    }

    @Override
    public String toString() {
        return "AccountingDataMapping{" +
            "id=" + id +
            ", acctLineTypeId='" + acctLineTypeId + "'" +
            ", accountingRef='" + accountingRef + "'" +
            ", accountingTableColumnRef='" + accountingTableColumnRef + "'" +
            ", valueType='" + valueType + "'" +
            ", value='" + value + "'" +
            ", createdBy='" + createdBy + "'" +
            ", lastUpdatedBy='" + lastUpdatedBy + "'" +
            ", creationDate='" + creationDate + "'" +
            ", lastUpdatedDate='" + lastUpdatedDate + "'" +
            '}';
    }
}
