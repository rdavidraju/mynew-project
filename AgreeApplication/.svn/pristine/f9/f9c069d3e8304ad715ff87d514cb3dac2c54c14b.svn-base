package com.nspl.app.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.LookUpCode;
import com.nspl.app.domain.ReportType;
import com.nspl.app.repository.LookUpCodeRepository;
import com.nspl.app.repository.ReportTypeRepository;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;

import io.swagger.annotations.ApiParam;
import io.github.jhipster.web.util.ResponseUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

/**
 * REST controller for managing ReportType.
 */
@RestController
@RequestMapping("/api")
public class ReportTypeResource {

    private final Logger log = LoggerFactory.getLogger(ReportTypeResource.class);

    private static final String ENTITY_NAME = "reportType";

    private final ReportTypeRepository reportTypeRepository;
    
    @Inject
    LookUpCodeRepository lookUpCodeRepository;

    public ReportTypeResource(ReportTypeRepository reportTypeRepository) {
        this.reportTypeRepository = reportTypeRepository;
    }

    /**
     * POST  /report-types : Create a new reportType.
     *
     * @param reportType the reportType to create
     * @return the ResponseEntity with status 201 (Created) and with body the new reportType, or with status 400 (Bad Request) if the reportType has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/report-types")
    @Timed
    public ResponseEntity<ReportType> createReportType(@RequestBody ReportType reportType) throws URISyntaxException {
        log.debug("REST request to save ReportType : {}", reportType);
        if (reportType.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new reportType cannot already have an ID")).body(null);
        }
        ReportType result = reportTypeRepository.save(reportType);
        return ResponseEntity.created(new URI("/api/report-types/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /report-types : Updates an existing reportType.
     *
     * @param reportType the reportType to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated reportType,
     * or with status 400 (Bad Request) if the reportType is not valid,
     * or with status 500 (Internal Server Error) if the reportType couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/report-types")
    @Timed
    public ResponseEntity<ReportType> updateReportType(@RequestBody ReportType reportType) throws URISyntaxException {
        log.debug("REST request to update ReportType : {}", reportType);
        if (reportType.getId() == null) {
            return createReportType(reportType);
        }
        ReportType result = reportTypeRepository.save(reportType);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, reportType.getId().toString()))
            .body(result);
    }

    /**
     * GET  /report-types : get all the reportTypes.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of reportTypes in body
     */
    @GetMapping("/report-types")
    @Timed
    public ResponseEntity<List<ReportType>> getAllReportTypes(@ApiParam Pageable pageable) {
        log.debug("REST request to get a page of ReportTypes");
        Page<ReportType> page = reportTypeRepository.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/report-types");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /report-types/:id : get the "id" reportType.
     *
     * @param id the id of the reportType to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the reportType, or with status 404 (Not Found)
     */
    @GetMapping("/report-types/{id}")
    @Timed
    public ResponseEntity<ReportType> getReportType(@PathVariable Long id) {
        log.debug("REST request to get ReportType : {}", id);
        ReportType reportType = reportTypeRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(reportType));
    }

    /**
     * DELETE  /report-types/:id : delete the "id" reportType.
     *
     * @param id the id of the reportType to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/report-types/{id}")
    @Timed
    public ResponseEntity<Void> deleteReportType(@PathVariable Long id) {
        log.debug("REST request to delete ReportType : {}", id);
        reportTypeRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }
    
    /**
     * Author: Swetha
     * Api to retrieve reportTypes by TenantId
     * @param tenantId
     * @return
     */
    @GetMapping("/reportTypesByTenantId")
    @Timed
    public List<HashMap> getReportTypesByTenantId(@RequestParam Long tenantId) {
        log.debug("REST request to get getReportTypesByTenantId : {}", tenantId);
        List<HashMap> reportTypesMapList=new ArrayList<HashMap>();
        List<ReportType> reportTypesList = reportTypeRepository.fetchActiveReportTypesByTenant(tenantId);
        for(int i=0;i<reportTypesList.size();i++){
        	ReportType reportType=reportTypesList.get(i);
        	List<String> coaList=new ArrayList<String>();
        	HashMap map=new HashMap();
        	map.put("id",reportType.getId());
        	map.put("allowDrillDown",reportType.getAllowDrillDown());
        	map.put("coa",reportType.getCoa());
        	if(reportType.getCoa()!=null && reportType.getCoa()==true){
        		List<String> lookupCode=lookUpCodeRepository.fetchLookupsByTenantIdAndLookUpType(tenantId,"CHART_OF_ACCOUNTS");
        		map.put("coaList",lookupCode);
        	}
        	map.put("createdBy",reportType.getCreatedBy());
        	map.put("creationDate",reportType.getCreationDate());
        	map.put("enableFlag",reportType.isEnableFlag());
        	map.put("endDate",reportType.getEndDate());
        	map.put("lastUpdatedBy",reportType.getLastUpdatedBy());
        	map.put("lasteUpdatedDate",reportType.getLasteUpdatedDate());
        	map.put("mode",reportType.getMode());
        	map.put("show",reportType.getShow());
        	map.put("startDate",reportType.getStartDate());
        	map.put("tenantId",reportType.getTenantId());
        	map.put("type",reportType.getType());
        	map.put("reconcile",reportType.getReconcile());
        	map.put("typeDisplayName",reportType.getDisplayName());
        	reportTypesMapList.add(map);
        }
        return reportTypesMapList;
    }
}
