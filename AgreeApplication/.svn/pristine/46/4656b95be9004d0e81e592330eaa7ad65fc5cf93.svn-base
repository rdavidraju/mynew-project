package com.nspl.app.domain;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;
import java.io.Serializable;
import java.time.ZonedDateTime;
import java.util.Objects;

/**
 * A DataViewsSrcMappings.
 */
@Entity
@Table(name = "t_data_views_src_mappings")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class DataViewsSrcMappings implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "data_view_id")
    private Long dataViewId;

    @Column(name = "template_id")
    private Long templateId;

    @Column(name = "base")
    private String base;

    @Column(name = "created_by")
    private Long createdBy;

    @Column(name = "creation_date")
    private ZonedDateTime creationDate;

    @Column(name = "last_updated_by")
    private Long lastUpdatedBy;

    @Column(name = "last_updated_date")
    private ZonedDateTime lastUpdatedDate;
    
    @Column(name = "relation")
    private String relation;

    public String getRelation() {
		return relation;
	}

	public void setRelation(String relation) {
		this.relation = relation;
	}

	public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getDataViewId() {
        return dataViewId;
    }

    public DataViewsSrcMappings dataViewId(Long dataViewId) {
        this.dataViewId = dataViewId;
        return this;
    }

    public void setDataViewId(Long dataViewId) {
        this.dataViewId = dataViewId;
    }

    public Long getTemplateId() {
        return templateId;
    }

    public DataViewsSrcMappings templateId(Long templateId) {
        this.templateId = templateId;
        return this;
    }

    public void setTemplateId(Long templateId) {
        this.templateId = templateId;
    }

    public String getBase() {
        return base;
    }

    public DataViewsSrcMappings base(String base) {
        this.base = base;
        return this;
    }

    public void setBase(String base) {
        this.base = base;
    }

    public Long getCreatedBy() {
        return createdBy;
    }

    public DataViewsSrcMappings createdBy(Long createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    public void setCreatedBy(Long createdBy) {
        this.createdBy = createdBy;
    }

    public ZonedDateTime getCreationDate() {
        return creationDate;
    }

    public DataViewsSrcMappings creationDate(ZonedDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }

    public void setCreationDate(ZonedDateTime creationDate) {
        this.creationDate = creationDate;
    }

    public Long getLastUpdatedBy() {
        return lastUpdatedBy;
    }

    public DataViewsSrcMappings lastUpdatedBy(Long lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
        return this;
    }

    public void setLastUpdatedBy(Long lastUpdatedBy) {
        this.lastUpdatedBy = lastUpdatedBy;
    }

    public ZonedDateTime getLastUpdatedDate() {
        return lastUpdatedDate;
    }

    public DataViewsSrcMappings lastUpdatedDate(ZonedDateTime lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
        return this;
    }

    public void setLastUpdatedDate(ZonedDateTime lastUpdatedDate) {
        this.lastUpdatedDate = lastUpdatedDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataViewsSrcMappings dataViewsSrcMappings = (DataViewsSrcMappings) o;
        if (dataViewsSrcMappings.id == null || id == null) {
            return false;
        }
        return Objects.equals(id, dataViewsSrcMappings.id);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(id);
    }

    @Override
    public String toString() {
        return "DataViewsSrcMappings{" +
            "id=" + id +
            ", dataViewId='" + dataViewId + "'" +
            ", templateId='" + templateId + "'" +
            ", base='" + base + "'" +
            ", createdBy='" + createdBy + "'" +
            ", creationDate='" + creationDate + "'" +
            ", lastUpdatedBy='" + lastUpdatedBy + "'" +
            ", lastUpdatedDate='" + lastUpdatedDate + "'" +
            '}';
    }
}
