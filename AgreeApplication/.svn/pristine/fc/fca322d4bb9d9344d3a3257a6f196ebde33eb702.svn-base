package com.nspl.app.web.rest;

import com.nspl.app.AgreeApplicationApp;

import com.nspl.app.domain.ApprovalGroupMembers;
import com.nspl.app.repository.ApprovalGroupMembersRepository;
import com.nspl.app.web.rest.errors.ExceptionTranslator;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDate;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.time.ZoneOffset;
import java.time.ZoneId;
import java.util.List;

import static com.nspl.app.web.rest.TestUtil.sameInstant;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the ApprovalGroupMembersResource REST controller.
 *
 * @see ApprovalGroupMembersResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = AgreeApplicationApp.class)
public class ApprovalGroupMembersResourceIntTest {

    private static final Long DEFAULT_GROUP_ID = 1L;
    private static final Long UPDATED_GROUP_ID = 2L;

    private static final Integer DEFAULT_SEQ = 1;
    private static final Integer UPDATED_SEQ = 2;

    private static final Long DEFAULT_USER_ID = 1L;
    private static final Long UPDATED_USER_ID = 2L;

    private static final LocalDate DEFAULT_START_DATE = LocalDate.ofEpochDay(0L);
    private static final LocalDate UPDATED_START_DATE = LocalDate.now(ZoneId.systemDefault());

    private static final LocalDate DEFAULT_END_DATE = LocalDate.ofEpochDay(0L);
    private static final LocalDate UPDATED_END_DATE = LocalDate.now(ZoneId.systemDefault());

    private static final Long DEFAULT_CREATED_BY = 1L;
    private static final Long UPDATED_CREATED_BY = 2L;

    private static final ZonedDateTime DEFAULT_CREATED_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_CREATED_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    private static final Long DEFAULT_LAST_UPDATED_BY = 1L;
    private static final Long UPDATED_LAST_UPDATED_BY = 2L;

    private static final ZonedDateTime DEFAULT_LAST_UPDATED_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_LAST_UPDATED_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    @Autowired
    private ApprovalGroupMembersRepository approvalGroupMembersRepository;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restApprovalGroupMembersMockMvc;

    private ApprovalGroupMembers approvalGroupMembers;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        ApprovalGroupMembersResource approvalGroupMembersResource = new ApprovalGroupMembersResource(approvalGroupMembersRepository);
        this.restApprovalGroupMembersMockMvc = MockMvcBuilders.standaloneSetup(approvalGroupMembersResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static ApprovalGroupMembers createEntity(EntityManager em) {
        ApprovalGroupMembers approvalGroupMembers = new ApprovalGroupMembers()
            .groupId(DEFAULT_GROUP_ID)
            .seq(DEFAULT_SEQ)
            .userId(DEFAULT_USER_ID)
            .startDate(DEFAULT_START_DATE)
            .endDate(DEFAULT_END_DATE)
            .createdBy(DEFAULT_CREATED_BY)
            .createdDate(DEFAULT_CREATED_DATE)
            .lastUpdatedBy(DEFAULT_LAST_UPDATED_BY)
            .lastUpdatedDate(DEFAULT_LAST_UPDATED_DATE);
        return approvalGroupMembers;
    }

    @Before
    public void initTest() {
        approvalGroupMembers = createEntity(em);
    }

    @Test
    @Transactional
    public void createApprovalGroupMembers() throws Exception {
        int databaseSizeBeforeCreate = approvalGroupMembersRepository.findAll().size();

        // Create the ApprovalGroupMembers
        restApprovalGroupMembersMockMvc.perform(post("/api/approval-group-members")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(approvalGroupMembers)))
            .andExpect(status().isCreated());

        // Validate the ApprovalGroupMembers in the database
        List<ApprovalGroupMembers> approvalGroupMembersList = approvalGroupMembersRepository.findAll();
        assertThat(approvalGroupMembersList).hasSize(databaseSizeBeforeCreate + 1);
        ApprovalGroupMembers testApprovalGroupMembers = approvalGroupMembersList.get(approvalGroupMembersList.size() - 1);
        assertThat(testApprovalGroupMembers.getGroupId()).isEqualTo(DEFAULT_GROUP_ID);
        assertThat(testApprovalGroupMembers.getSeq()).isEqualTo(DEFAULT_SEQ);
        assertThat(testApprovalGroupMembers.getUserId()).isEqualTo(DEFAULT_USER_ID);
        assertThat(testApprovalGroupMembers.getStartDate()).isEqualTo(DEFAULT_START_DATE);
        assertThat(testApprovalGroupMembers.getEndDate()).isEqualTo(DEFAULT_END_DATE);
        assertThat(testApprovalGroupMembers.getCreatedBy()).isEqualTo(DEFAULT_CREATED_BY);
        assertThat(testApprovalGroupMembers.getCreatedDate()).isEqualTo(DEFAULT_CREATED_DATE);
        assertThat(testApprovalGroupMembers.getLastUpdatedBy()).isEqualTo(DEFAULT_LAST_UPDATED_BY);
        assertThat(testApprovalGroupMembers.getLastUpdatedDate()).isEqualTo(DEFAULT_LAST_UPDATED_DATE);
    }

    @Test
    @Transactional
    public void createApprovalGroupMembersWithExistingId() throws Exception {
        int databaseSizeBeforeCreate = approvalGroupMembersRepository.findAll().size();

        // Create the ApprovalGroupMembers with an existing ID
        approvalGroupMembers.setId(1L);

        // An entity with an existing ID cannot be created, so this API call must fail
        restApprovalGroupMembersMockMvc.perform(post("/api/approval-group-members")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(approvalGroupMembers)))
            .andExpect(status().isBadRequest());

        // Validate the Alice in the database
        List<ApprovalGroupMembers> approvalGroupMembersList = approvalGroupMembersRepository.findAll();
        assertThat(approvalGroupMembersList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    public void getAllApprovalGroupMembers() throws Exception {
        // Initialize the database
        approvalGroupMembersRepository.saveAndFlush(approvalGroupMembers);

        // Get all the approvalGroupMembersList
        restApprovalGroupMembersMockMvc.perform(get("/api/approval-group-members?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(approvalGroupMembers.getId().intValue())))
            .andExpect(jsonPath("$.[*].groupId").value(hasItem(DEFAULT_GROUP_ID.intValue())))
            .andExpect(jsonPath("$.[*].seq").value(hasItem(DEFAULT_SEQ)))
            .andExpect(jsonPath("$.[*].userId").value(hasItem(DEFAULT_USER_ID.intValue())))
            .andExpect(jsonPath("$.[*].startDate").value(hasItem(DEFAULT_START_DATE.toString())))
            .andExpect(jsonPath("$.[*].endDate").value(hasItem(DEFAULT_END_DATE.toString())))
            .andExpect(jsonPath("$.[*].createdBy").value(hasItem(DEFAULT_CREATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].createdDate").value(hasItem(sameInstant(DEFAULT_CREATED_DATE))))
            .andExpect(jsonPath("$.[*].lastUpdatedBy").value(hasItem(DEFAULT_LAST_UPDATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].lastUpdatedDate").value(hasItem(sameInstant(DEFAULT_LAST_UPDATED_DATE))));
    }

    @Test
    @Transactional
    public void getApprovalGroupMembers() throws Exception {
        // Initialize the database
        approvalGroupMembersRepository.saveAndFlush(approvalGroupMembers);

        // Get the approvalGroupMembers
        restApprovalGroupMembersMockMvc.perform(get("/api/approval-group-members/{id}", approvalGroupMembers.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.id").value(approvalGroupMembers.getId().intValue()))
            .andExpect(jsonPath("$.groupId").value(DEFAULT_GROUP_ID.intValue()))
            .andExpect(jsonPath("$.seq").value(DEFAULT_SEQ))
            .andExpect(jsonPath("$.userId").value(DEFAULT_USER_ID.intValue()))
            .andExpect(jsonPath("$.startDate").value(DEFAULT_START_DATE.toString()))
            .andExpect(jsonPath("$.endDate").value(DEFAULT_END_DATE.toString()))
            .andExpect(jsonPath("$.createdBy").value(DEFAULT_CREATED_BY.intValue()))
            .andExpect(jsonPath("$.createdDate").value(sameInstant(DEFAULT_CREATED_DATE)))
            .andExpect(jsonPath("$.lastUpdatedBy").value(DEFAULT_LAST_UPDATED_BY.intValue()))
            .andExpect(jsonPath("$.lastUpdatedDate").value(sameInstant(DEFAULT_LAST_UPDATED_DATE)));
    }

    @Test
    @Transactional
    public void getNonExistingApprovalGroupMembers() throws Exception {
        // Get the approvalGroupMembers
        restApprovalGroupMembersMockMvc.perform(get("/api/approval-group-members/{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateApprovalGroupMembers() throws Exception {
        // Initialize the database
        approvalGroupMembersRepository.saveAndFlush(approvalGroupMembers);
        int databaseSizeBeforeUpdate = approvalGroupMembersRepository.findAll().size();

        // Update the approvalGroupMembers
        ApprovalGroupMembers updatedApprovalGroupMembers = approvalGroupMembersRepository.findOne(approvalGroupMembers.getId());
        updatedApprovalGroupMembers
            .groupId(UPDATED_GROUP_ID)
            .seq(UPDATED_SEQ)
            .userId(UPDATED_USER_ID)
            .startDate(UPDATED_START_DATE)
            .endDate(UPDATED_END_DATE)
            .createdBy(UPDATED_CREATED_BY)
            .createdDate(UPDATED_CREATED_DATE)
            .lastUpdatedBy(UPDATED_LAST_UPDATED_BY)
            .lastUpdatedDate(UPDATED_LAST_UPDATED_DATE);

        restApprovalGroupMembersMockMvc.perform(put("/api/approval-group-members")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(updatedApprovalGroupMembers)))
            .andExpect(status().isOk());

        // Validate the ApprovalGroupMembers in the database
        List<ApprovalGroupMembers> approvalGroupMembersList = approvalGroupMembersRepository.findAll();
        assertThat(approvalGroupMembersList).hasSize(databaseSizeBeforeUpdate);
        ApprovalGroupMembers testApprovalGroupMembers = approvalGroupMembersList.get(approvalGroupMembersList.size() - 1);
        assertThat(testApprovalGroupMembers.getGroupId()).isEqualTo(UPDATED_GROUP_ID);
        assertThat(testApprovalGroupMembers.getSeq()).isEqualTo(UPDATED_SEQ);
        assertThat(testApprovalGroupMembers.getUserId()).isEqualTo(UPDATED_USER_ID);
        assertThat(testApprovalGroupMembers.getStartDate()).isEqualTo(UPDATED_START_DATE);
        assertThat(testApprovalGroupMembers.getEndDate()).isEqualTo(UPDATED_END_DATE);
        assertThat(testApprovalGroupMembers.getCreatedBy()).isEqualTo(UPDATED_CREATED_BY);
        assertThat(testApprovalGroupMembers.getCreatedDate()).isEqualTo(UPDATED_CREATED_DATE);
        assertThat(testApprovalGroupMembers.getLastUpdatedBy()).isEqualTo(UPDATED_LAST_UPDATED_BY);
        assertThat(testApprovalGroupMembers.getLastUpdatedDate()).isEqualTo(UPDATED_LAST_UPDATED_DATE);
    }

    @Test
    @Transactional
    public void updateNonExistingApprovalGroupMembers() throws Exception {
        int databaseSizeBeforeUpdate = approvalGroupMembersRepository.findAll().size();

        // Create the ApprovalGroupMembers

        // If the entity doesn't have an ID, it will be created instead of just being updated
        restApprovalGroupMembersMockMvc.perform(put("/api/approval-group-members")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(approvalGroupMembers)))
            .andExpect(status().isCreated());

        // Validate the ApprovalGroupMembers in the database
        List<ApprovalGroupMembers> approvalGroupMembersList = approvalGroupMembersRepository.findAll();
        assertThat(approvalGroupMembersList).hasSize(databaseSizeBeforeUpdate + 1);
    }

    @Test
    @Transactional
    public void deleteApprovalGroupMembers() throws Exception {
        // Initialize the database
        approvalGroupMembersRepository.saveAndFlush(approvalGroupMembers);
        int databaseSizeBeforeDelete = approvalGroupMembersRepository.findAll().size();

        // Get the approvalGroupMembers
        restApprovalGroupMembersMockMvc.perform(delete("/api/approval-group-members/{id}", approvalGroupMembers.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate the database is empty
        List<ApprovalGroupMembers> approvalGroupMembersList = approvalGroupMembersRepository.findAll();
        assertThat(approvalGroupMembersList).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(ApprovalGroupMembers.class);
    }
}
