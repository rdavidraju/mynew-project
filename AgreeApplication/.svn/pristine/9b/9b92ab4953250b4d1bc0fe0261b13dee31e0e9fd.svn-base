package com.nspl.app.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.ApprovalRuleAssignment;
import com.nspl.app.domain.DataViews;
import com.nspl.app.domain.JobDetails;
import com.nspl.app.domain.LookUpCode;
import com.nspl.app.domain.NotificationBatch;
import com.nspl.app.domain.ReconciliationResult;
import com.nspl.app.domain.RuleGroup;
import com.nspl.app.domain.Rules;
import com.nspl.app.repository.ApprovalRuleAssignmentRepository;
import com.nspl.app.repository.DataViewsRepository;
import com.nspl.app.repository.LookUpCodeRepository;
import com.nspl.app.repository.NotificationBatchRepository;
import com.nspl.app.repository.ReconciliationResultRepository;
import com.nspl.app.repository.RuleGroupRepository;
import com.nspl.app.repository.RulesRepository;
import com.nspl.app.service.UserJdbcService;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;

import io.swagger.annotations.ApiParam;
import io.github.jhipster.web.util.ResponseUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

/**
 * REST controller for managing NotificationBatch.
 */
@RestController
@RequestMapping("/api")
public class NotificationBatchResource {

    private final Logger log = LoggerFactory.getLogger(NotificationBatchResource.class);

    private static final String ENTITY_NAME = "notificationBatch";
        
    private final NotificationBatchRepository notificationBatchRepository;
    
    @Inject
    RuleGroupRepository ruleGroupRepository;
    
    @Inject
    RulesRepository rulesRepository;
    
    @Inject
    DataViewsRepository dataViewsRepository;
    
    @Inject
    ReconciliationResultRepository reconciliationResultRepository;
    
    @Autowired
   	Environment env;
    
    @Inject
    ApprovalRuleAssignmentRepository approvalRuleAssignmentRepository;
    
    @Inject
    UserJdbcService userJdbcService;
    
    @Inject
    LookUpCodeRepository lookUpCodeRepository;

    public NotificationBatchResource(NotificationBatchRepository notificationBatchRepository) {
        this.notificationBatchRepository = notificationBatchRepository;
    }

    /**
     * POST  /notification-batches : Create a new notificationBatch.
     *
     * @param notificationBatch the notificationBatch to create
     * @return the ResponseEntity with status 201 (Created) and with body the new notificationBatch, or with status 400 (Bad Request) if the notificationBatch has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/notification-batches")
    @Timed
    public ResponseEntity<NotificationBatch> createNotificationBatch(@RequestBody NotificationBatch notificationBatch) throws URISyntaxException {
        log.debug("REST request to save NotificationBatch : {}", notificationBatch);
        if (notificationBatch.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new notificationBatch cannot already have an ID")).body(null);
        }
        NotificationBatch result = notificationBatchRepository.save(notificationBatch);
        return ResponseEntity.created(new URI("/api/notification-batches/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /notification-batches : Updates an existing notificationBatch.
     *
     * @param notificationBatch the notificationBatch to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated notificationBatch,
     * or with status 400 (Bad Request) if the notificationBatch is not valid,
     * or with status 500 (Internal Server Error) if the notificationBatch couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/notification-batches")
    @Timed
    public ResponseEntity<NotificationBatch> updateNotificationBatch(@RequestBody NotificationBatch notificationBatch) throws URISyntaxException {
        log.debug("REST request to update NotificationBatch : {}", notificationBatch);
        if (notificationBatch.getId() == null) {
            return createNotificationBatch(notificationBatch);
        }
        NotificationBatch result = notificationBatchRepository.save(notificationBatch);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, notificationBatch.getId().toString()))
            .body(result);
    }

    /**
     * GET  /notification-batches : get all the notificationBatches.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of notificationBatches in body
     */
    @GetMapping("/notification-batches")
    @Timed
    public ResponseEntity<List<NotificationBatch>> getAllNotificationBatches(@ApiParam Pageable pageable) {
        log.debug("REST request to get a page of NotificationBatches");
        Page<NotificationBatch> page = notificationBatchRepository.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/notification-batches");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /notification-batches/:id : get the "id" notificationBatch.
     *
     * @param id the id of the notificationBatch to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the notificationBatch, or with status 404 (Not Found)
     */
    @GetMapping("/notification-batches/{id}")
    @Timed
    public ResponseEntity<NotificationBatch> getNotificationBatch(@PathVariable Long id) {
        log.debug("REST request to get NotificationBatch : {}", id);
        NotificationBatch notificationBatch = notificationBatchRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(notificationBatch));
    }

    /**
     * DELETE  /notification-batches/:id : delete the "id" notificationBatch.
     *
     * @param id the id of the notificationBatch to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/notification-batches/{id}")
    @Timed
    public ResponseEntity<Void> deleteNotificationBatch(@PathVariable Long id) {
        log.debug("REST request to delete NotificationBatch : {}", id);
        notificationBatchRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }
    
    
    /**
     * author: ravali
     * Desc :API to fetch notification list based on tenantId and userId(currentApprover)
     * @param tenantId
     * @param userId
     * @param offset
     * @param limit
     * @return List<HashMap>
     */
    
    @GetMapping("/getNotificationBatchList")
    @Timed
    public  List<HashMap> getNotificationBatch(@RequestParam Long tenantId,@RequestParam Long userId,@RequestParam(value = "page" , required = false) Integer offset,
			@RequestParam(value = "per_page", required = false) Integer limit)
			{
    	log.info("Request Rest to get notification Batch by tenantId:"+tenantId +" and "+userId);

    	List<NotificationBatch> notBatchList=new ArrayList<NotificationBatch>();
    	PaginationUtil paginationUtil=new PaginationUtil();

    	int maxlmt=paginationUtil.MAX_LIMIT;
    	int minlmt=paginationUtil.MIN_OFFSET;
    	log.info("maxlmt: "+maxlmt);
    	Page<NotificationBatch> page = null;
    	HttpHeaders headers = null;

    	if(limit==null || limit<minlmt){
    		notBatchList = notificationBatchRepository.findByTenantIdAndCurrentApproverOrderById(tenantId,userId);

    		limit = notBatchList.size();
    	}
    	if(limit == 0 )
    	{
    		limit = paginationUtil.DEFAULT_LIMIT;
    	}
    	if(offset == null || offset == 0)
    	{
    		offset = paginationUtil.DEFAULT_OFFSET;
    	}
    	if(limit>maxlmt)
    	{
    		log.info("input limit exceeds maxlimit");
    		page = notificationBatchRepository.findByTenantIdAndCurrentApproverOrderById(tenantId,userId,PaginationUtil.generatePageRequest2(offset, limit));


    	}
    	else{
    		log.info("input limit is within maxlimit");
    		page = notificationBatchRepository.findByTenantIdAndCurrentApproverOrderById(tenantId,userId,PaginationUtil.generatePageRequest(offset, limit));

    	}


    	if(notBatchList.size()==0)
    	{

    		notBatchList=page.getContent();
    	}


    	List<HashMap> finalMap=new ArrayList<HashMap>();
    	for (NotificationBatch notBatch:notBatchList)
    	{
    		HashMap batchMap=new HashMap();
    		batchMap.put("id", notBatch.getId());
    		if(notBatch.getNotificationName()!=null)
    			batchMap.put("notificationName", notBatch.getNotificationName());
    		else
    			batchMap.put("notificationName","");
    		if(notBatch.getCreatedDate()!=null)
    			batchMap.put("notificationDate", notBatch.getCreatedDate());
    		else
    			batchMap.put("notificationDate", "");
    		if(notBatch.getRuleGroupId()!=null)
    		{
    			RuleGroup ruleGrp=ruleGroupRepository.findOne(notBatch.getRuleGroupId());
    			batchMap.put("ruleGroupName", ruleGrp.getName());
    		}
    		else
    			batchMap.put("ruleGroupName", "");
    		if(notBatch.getRuleId()!=null)
    		{
    			Rules rule=rulesRepository.findOne(notBatch.getRuleId());
    			batchMap.put("ruleName", rule.getRuleCode());
    			DataViews dvName=dataViewsRepository.findOne(rule.getSourceDataViewId());
    			batchMap.put("dataViewName", dvName.getDataViewName());
    		}
    		else
    		{
    			batchMap.put("ruleName", "");	
    			batchMap.put("dataViewName", "");
    		}
    		if(notBatch.getStatus()!=null)
    			batchMap.put("status", notBatch.getStatus());
    		else
    			batchMap.put("status", "");
    		batchMap.put("dueDate", null);
    		finalMap.add(batchMap);

    	}
    	return finalMap;


			}
    
    
    @GetMapping("/getApprovalHistory")
    @Timed
    public List<HashMap> getApprovalHistory(@RequestParam Long notificationId,@RequestParam(value = "status", required = false) String status) throws SQLException
    {
    	log.info("Request Rest to get Approval history based on notification id :"+notificationId);
    	NotificationBatch notBatch=notificationBatchRepository.findOne(notificationId);
    	Integer I = null;
    	if(notBatch.getRefLevel()!=null)
    	{
    		I=notBatch.getRefLevel();
    	}
    	String refNum=String.valueOf(I);
    	if(refNum.length()<=1)
    		refNum="0"+refNum;
    	log.info("refNum :"+refNum);
    	List<HashMap> finalMap=new ArrayList<HashMap>();
    	String dbUrl=env.getProperty("spring.datasource.url");
    	String[] parts=dbUrl.split("[\\s@&?$+-]+");
    	String host = parts[0].split("/")[2].split(":")[0];
    	log.info("host :"+host);
    	String schemaName=parts[0].split("/")[3];
    	log.info("schemaName :"+schemaName);
    	String userName = env.getProperty("spring.datasource.username");
    	String password = env.getProperty("spring.datasource.password");
    	String jdbcDriver = env.getProperty("spring.datasource.jdbcdriver");

    	Connection conn = null;
    	Statement stmt = null;
    	conn = DriverManager.getConnection(dbUrl, userName, password);
    	log.info("Connected database successfully...");
    	stmt = conn.createStatement();
    	ResultSet result2=null;
    	//Class.forName("com.mysql.jdbc.Driver");
    	if(status!=null)
    	{
    		String userAndBatchId =notBatch.getCurrentApprover()+"|"+notBatch.getId()+"|"+status;
    		log.info("userAndBatchId :"+userAndBatchId);
    		String query="select * from "+schemaName+".t_reconciliation_result where appr_ref_"+refNum+" LIKE '"+userAndBatchId+"%'";
    		log.info("query :"+query);
    		result2=stmt.executeQuery("select * from "+schemaName+".t_reconciliation_result where appr_ref_"+refNum+" LIKE '"+userAndBatchId+"%'");
    	}
    	else
    	{
    		String userAndBatchId =notBatch.getCurrentApprover()+"|"+notBatch.getId();
    		log.info("userAndBatchId :"+userAndBatchId);
    		String query="select * from "+schemaName+".t_reconciliation_result where appr_ref_"+refNum+" LIKE '"+userAndBatchId+"%'";
    		log.info("query :"+query);
    		result2=stmt.executeQuery(query);
    	}
    	while(result2.next())
    	{
    		HashMap app=new HashMap();
    		if(result2.getString("id")!=null)
    			app.put("id", result2.getString("id"));
    		if(result2.getString("original_view_id")!=null)
    		{
    			app.put("recordType", "Source");
    			DataViews dvName=dataViewsRepository.findOne(Long.valueOf(result2.getString("original_view_id")));
    			app.put("viewId", Long.valueOf(result2.getString("original_view_id")));
    			app.put("viewName", dvName.getDataViewName());
    		}
    		else if(result2.getString("target_view_id")!=null)
    		{
    			app.put("recordType", "Target");
    			DataViews dvName=dataViewsRepository.findOne(Long.valueOf(result2.getString("target_view_id")));
    			app.put("viewId", Long.valueOf(result2.getString("target_view_id")));
    			app.put("viewName", dvName.getDataViewName());
    		}
    		if(result2.getString("reconciled_date")!=null)
    			app.put("reconciledDate", result2.getString("reconciled_date"));
    		else
    			app.put("reconciledDate", "");
    		if(result2.getString("recon_reference")!=null)
    			app.put("recReference", result2.getString("recon_reference"));
    		else
    			app.put("recReference", "");
    		if(result2.getString("recon_job_reference")!=null)
    			app.put("jobReference", result2.getString("recon_job_reference"));
    		else
    			app.put("jobReference", "");
    		if(result2.getString("approval_initiation_date")!=null)
    			app.put("approvalInitiationDate", result2.getString("approval_initiation_date"));
    		else
    			app.put("approvalInitiationDate", "");
    		finalMap.add(app);
    	}

    	if(conn!=null)
    		conn.close();
    	if(stmt!=null)
    		stmt.close();
    	if(result2!=null)
    		result2.close();
    	return finalMap;

    }
    
    @GetMapping("/getApprovalAssmtDetails")
    @Timed
    public HashMap getApprovalAssmtDetails(@RequestParam Long notificationId,@RequestParam Long tenantId) throws ClassNotFoundException, SQLException
    {
    	log.info("Request Rest to get approval Assngmt details with notification id :"+notificationId);
    	NotificationBatch notBtc=notificationBatchRepository.findOne(notificationId);
    	HashMap batchMap=new HashMap();
    	if(notBtc!=null)
    	{

    		batchMap.put("batchId", notBtc.getId());
    		batchMap.put("batchName", notBtc.getNotificationName());
    		batchMap.put("currentApprover",notBtc.getCurrentApprover());
    		batchMap.put("level", notBtc.getRefLevel());

    		List<HashMap> appInfoList=new ArrayList<HashMap>();
    		List<ApprovalRuleAssignment> appRuleAsnmtList=approvalRuleAssignmentRepository.findByRuleId(notBtc.getRuleId());
    		log.info("appRuleAsnmtList.size() :"+appRuleAsnmtList.size());
    		Integer seq=0;
    		List<String> status=new ArrayList<String>();
    		for(int j=0;j<appRuleAsnmtList.size();j++)
    		{
    			HashMap appInfo=new HashMap();
    			

    			if(j+1<notBtc.getRefLevel())
    			{
    				log.info("notBtc.getRefLevel() in if");
    				appInfo.put("approvalStatus", "Approved");
    				status.add("Approved");
    			}
    			else
    			{
    				log.info("notBtc.getRefLevel() in else");
    				appInfo.put("approvalStatus", "InProcess");
    				status.add("InProcess");
    			}
    			appInfo.put("seq",seq+1);
    			if(appRuleAsnmtList.get(j).getAssignType().equalsIgnoreCase("USER"))
    			{
    				HashMap map=userJdbcService.jdbcConnc(appRuleAsnmtList.get(j).getAssigneeId());
    			if(map!=null && map.get("assigneeName")!=null)
    				appInfo.put("name",map.get("assigneeName"));
    			}
    			//Set Approval Date
    			appInfo.put("approvalDate", "");
    			log.info("appInfo :"+appInfo);
    			appInfoList.add(appInfo);
    		}
    		if(status.contains("InProcess"))
				batchMap.put("approvalStatus", "InProcess");
			else
				batchMap.put("approvalStatus", "Approved");
    		batchMap.put("approversInfo", appInfoList)	;

    		List<HashMap> childList=new ArrayList<HashMap>();
    		List<NotificationBatch> parentBatchList=notificationBatchRepository.findByParentBatch(notificationId);
    		for(NotificationBatch parentBatch:parentBatchList)
    		{
    			HashMap child=new HashMap();
    			child.put("batchId", parentBatch.getId());
    			child.put("batchName", parentBatch.getNotificationName());
    			child.put("currentApprover",parentBatch.getCurrentApprover());
    			child.put("level", parentBatch.getRefLevel());
    			child.put("approvalStatus", parentBatch.getStatus());
    			childList.add(child);

    		}
    		batchMap.put("childInfo",childList);

    		String dbUrl=env.getProperty("spring.datasource.url");
    		String[] parts=dbUrl.split("[\\s@&?$+-]+");
    		String host = parts[0].split("/")[2].split(":")[0];
    		log.info("host :"+host);
    		String schemaName=parts[0].split("/")[3];
    		log.info("schemaName :"+schemaName);
    		String userName = env.getProperty("spring.datasource.username");
    		String password = env.getProperty("spring.datasource.password");
    		String jdbcDriver = env.getProperty("spring.datasource.jdbcdriver");

    		Connection conn = null;
    		Statement stmt = null;
    		conn = DriverManager.getConnection(dbUrl, userName, password);
    		log.info("Connected database successfully...");
    		stmt = conn.createStatement();
    		ResultSet result2=null;
    		//Class.forName("com.mysql.jdbc.Driver");
    		Integer I = null;
    		if(notBtc.getRefLevel()!=null)
    		{
    			I=notBtc.getRefLevel();
    		}
    		String refNum=String.valueOf(I);
    		if(refNum.length()<=1)
    			refNum="0"+refNum;
    		log.info("refNum :"+refNum);
    		List<LookUpCode> lookUpCodes=lookUpCodeRepository.findByTenantIdAndLookUpType(tenantId, "APPROVAL_STATUS");
    		if(lookUpCodes.size()>0)
    		{
    			HashMap detail=new HashMap();
    			Long total=0l;
    			for(int i=0;i<lookUpCodes.size();i++)
    			{
    				String userAndBatchId =notBtc.getCurrentApprover()+"|"+notBtc.getId()+"|"+lookUpCodes.get(i).getMeaning();
    				log.info("userAndBatchId :"+userAndBatchId);
    				String query="select count(*) from "+schemaName+".t_reconciliation_result where appr_ref_"+refNum+" LIKE '"+userAndBatchId+"%'";
    				log.info("query :"+query);
    				result2=stmt.executeQuery(query);
    				while(result2.next())
    				{
    					if(result2.getString("count(*)")!=null)
    						detail.put(lookUpCodes.get(i).getMeaning(), result2.getString("count(*)"));
    					total=total+Long.valueOf(result2.getString("count(*)"));

    				}
    				log.info("detail :"+detail);
    				detail.put("total", total);
    				batchMap.put("details",detail);
    			}
    		}
    		
    		if(conn!=null)
    			conn.close();
    		if(stmt!=null)
    			stmt.close();
    		if(result2!=null)
    			result2.close();
    	}

    	return batchMap;
    }

}
