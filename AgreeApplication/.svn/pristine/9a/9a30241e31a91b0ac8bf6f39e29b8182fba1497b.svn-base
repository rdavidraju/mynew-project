package com.nspl.app.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.ApprovalGroups;

import com.nspl.app.repository.ApprovalGroupsRepository;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;
import io.swagger.annotations.ApiParam;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing ApprovalGroups.
 */
@RestController
@RequestMapping("/api")
public class ApprovalGroupsResource {

    private final Logger log = LoggerFactory.getLogger(ApprovalGroupsResource.class);

    private static final String ENTITY_NAME = "approvalGroups";
        
    private final ApprovalGroupsRepository approvalGroupsRepository;

    public ApprovalGroupsResource(ApprovalGroupsRepository approvalGroupsRepository) {
        this.approvalGroupsRepository = approvalGroupsRepository;
    }

    /**
     * POST  /approval-groups : Create a new approvalGroups.
     *
     * @param approvalGroups the approvalGroups to create
     * @return the ResponseEntity with status 201 (Created) and with body the new approvalGroups, or with status 400 (Bad Request) if the approvalGroups has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/approval-groups")
    @Timed
    public ResponseEntity<ApprovalGroups> createApprovalGroups(@RequestBody ApprovalGroups approvalGroups) throws URISyntaxException {
        log.debug("REST request to save ApprovalGroups : {}", approvalGroups);
        if (approvalGroups.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new approvalGroups cannot already have an ID")).body(null);
        }
        ApprovalGroups result = approvalGroupsRepository.save(approvalGroups);
        return ResponseEntity.created(new URI("/api/approval-groups/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /approval-groups : Updates an existing approvalGroups.
     *
     * @param approvalGroups the approvalGroups to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated approvalGroups,
     * or with status 400 (Bad Request) if the approvalGroups is not valid,
     * or with status 500 (Internal Server Error) if the approvalGroups couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/approval-groups")
    @Timed
    public ResponseEntity<ApprovalGroups> updateApprovalGroups(@RequestBody ApprovalGroups approvalGroups) throws URISyntaxException {
        log.debug("REST request to update ApprovalGroups : {}", approvalGroups);
        if (approvalGroups.getId() == null) {
            return createApprovalGroups(approvalGroups);
        }
        ApprovalGroups result = approvalGroupsRepository.save(approvalGroups);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, approvalGroups.getId().toString()))
            .body(result);
    }

    /**
     * GET  /approval-groups : get all the approvalGroups.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of approvalGroups in body
     */
    @GetMapping("/approval-groups")
    @Timed
    public ResponseEntity<List<ApprovalGroups>> getAllApprovalGroups(@ApiParam Pageable pageable) {
        log.debug("REST request to get a page of ApprovalGroups");
        Page<ApprovalGroups> page = approvalGroupsRepository.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/approval-groups");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }
    
    @GetMapping("/approvalGroupsForTenant/{tenantId}")
    @Timed
    public List<ApprovalGroups>  getApprovalGroupsForTenant(@PathVariable Long tenantId) {
        log.debug("REST request to get a page of ApprovalGroups");
        List<ApprovalGroups> aprovalGroups = approvalGroupsRepository.findByTenantId(tenantId);
        return aprovalGroups;
    }

    /**
     * GET  /approval-groups/:id : get the "id" approvalGroups.
     *
     * @param id the id of the approvalGroups to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the approvalGroups, or with status 404 (Not Found)
     */
    @GetMapping("/approval-groups/{id}")
    @Timed
    public ResponseEntity<ApprovalGroups> getApprovalGroups(@PathVariable Long id) {
        log.debug("REST request to get ApprovalGroups : {}", id);
        ApprovalGroups approvalGroups = approvalGroupsRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(approvalGroups));
    }

    /**
     * DELETE  /approval-groups/:id : delete the "id" approvalGroups.
     *
     * @param id the id of the approvalGroups to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/approval-groups/{id}")
    @Timed
    public ResponseEntity<Void> deleteApprovalGroups(@PathVariable Long id) {
        log.debug("REST request to delete ApprovalGroups : {}", id);
        approvalGroupsRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
