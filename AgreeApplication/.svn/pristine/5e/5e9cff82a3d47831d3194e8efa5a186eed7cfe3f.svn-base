package com.nspl.app.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.Periods;

import com.nspl.app.repository.PeriodsRepository;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;
import io.swagger.annotations.ApiParam;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing Periods.
 */
@RestController
@RequestMapping("/api")
public class PeriodsResource {

    private final Logger log = LoggerFactory.getLogger(PeriodsResource.class);

    private static final String ENTITY_NAME = "periods";
        
    private final PeriodsRepository periodsRepository;

    public PeriodsResource(PeriodsRepository periodsRepository) {
        this.periodsRepository = periodsRepository;
    }

    /**
     * POST  /periods : Create a new periods.
     *
     * @param periods the periods to create
     * @return the ResponseEntity with status 201 (Created) and with body the new periods, or with status 400 (Bad Request) if the periods has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/periods")
    @Timed
    public ResponseEntity<Periods> createPeriods(@RequestBody Periods periods) throws URISyntaxException {
        log.debug("REST request to save Periods : {}", periods);
        if (periods.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new periods cannot already have an ID")).body(null);
        }
        Periods result = periodsRepository.save(periods);
        return ResponseEntity.created(new URI("/api/periods/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /periods : Updates an existing periods.
     *
     * @param periods the periods to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated periods,
     * or with status 400 (Bad Request) if the periods is not valid,
     * or with status 500 (Internal Server Error) if the periods couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/periods")
    @Timed
    public ResponseEntity<Periods> updatePeriods(@RequestBody Periods periods) throws URISyntaxException {
        log.debug("REST request to update Periods : {}", periods);
        if (periods.getId() == null) {
            return createPeriods(periods);
        }
        Periods result = periodsRepository.save(periods);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, periods.getId().toString()))
            .body(result);
    }

    /**
     * GET  /periods : get all the periods.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of periods in body
     */
    @GetMapping("/periods")
    @Timed
    public ResponseEntity<List<Periods>> getAllPeriods(@ApiParam Pageable pageable) {
        log.debug("REST request to get a page of Periods");
        Page<Periods> page = periodsRepository.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/periods");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /periods/:id : get the "id" periods.
     *
     * @param id the id of the periods to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the periods, or with status 404 (Not Found)
     */
    @GetMapping("/periods/{id}")
    @Timed
    public ResponseEntity<Periods> getPeriods(@PathVariable Long id) {
        log.debug("REST request to get Periods : {}", id);
        Periods periods = periodsRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(periods));
    }

    /**
     * DELETE  /periods/:id : delete the "id" periods.
     *
     * @param id the id of the periods to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/periods/{id}")
    @Timed
    public ResponseEntity<Void> deletePeriods(@PathVariable Long id) {
        log.debug("REST request to delete Periods : {}", id);
        periodsRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }

}
