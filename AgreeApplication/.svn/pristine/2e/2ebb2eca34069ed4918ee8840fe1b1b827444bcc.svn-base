package com.nspl.app.web.rest;

import com.nspl.app.AgreeApplicationApp;

import com.nspl.app.domain.Rules;
import com.nspl.app.repository.RulesRepository;
import com.nspl.app.repository.search.RulesSearchRepository;
import com.nspl.app.web.rest.errors.ExceptionTranslator;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDate;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.time.ZoneOffset;
import java.time.ZoneId;
import java.util.List;

import static com.nspl.app.web.rest.TestUtil.sameInstant;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the RulesResource REST controller.
 *
 * @see RulesResource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = AgreeApplicationApp.class)
public class RulesResourceIntTest {

    private static final Long DEFAULT_TENANT_ID = 1L;
    private static final Long UPDATED_TENANT_ID = 2L;

    private static final String DEFAULT_RULE_CODE = "AAAAAAAAAA";
    private static final String UPDATED_RULE_CODE = "BBBBBBBBBB";

    private static final LocalDate DEFAULT_START_DATE = LocalDate.ofEpochDay(0L);
    private static final LocalDate UPDATED_START_DATE = LocalDate.now(ZoneId.systemDefault());

    private static final LocalDate DEFAULT_END_DATE = LocalDate.ofEpochDay(0L);
    private static final LocalDate UPDATED_END_DATE = LocalDate.now(ZoneId.systemDefault());

    private static final Boolean DEFAULT_ENABLED_FLAG = false;
    private static final Boolean UPDATED_ENABLED_FLAG = true;

    private static final String DEFAULT_RULE_TYPE = "AAAAAAAAAA";
    private static final String UPDATED_RULE_TYPE = "BBBBBBBBBB";

    private static final Long DEFAULT_CREATED_BY = 1L;
    private static final Long UPDATED_CREATED_BY = 2L;

    private static final Long DEFAULT_LAST_UPDATED_BY = 1L;
    private static final Long UPDATED_LAST_UPDATED_BY = 2L;

    private static final ZonedDateTime DEFAULT_CREATION_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_CREATION_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    private static final ZonedDateTime DEFAULT_LAST_UPDATED_DATE = ZonedDateTime.ofInstant(Instant.ofEpochMilli(0L), ZoneOffset.UTC);
    private static final ZonedDateTime UPDATED_LAST_UPDATED_DATE = ZonedDateTime.now(ZoneId.systemDefault()).withNano(0);

    private static final Long DEFAULT_SOURCE_DATA_VIEW_ID = 1L;
    private static final Long UPDATED_SOURCE_DATA_VIEW_ID = 2L;

    private static final Long DEFAULT_TARGET_DATA_VIEW_ID = 1L;
    private static final Long UPDATED_TARGET_DATA_VIEW_ID = 2L;

    @Autowired
    private RulesRepository rulesRepository;

    @Autowired
    private RulesSearchRepository rulesSearchRepository;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private EntityManager em;

    private MockMvc restRulesMockMvc;

    private Rules rules;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        RulesResource rulesResource = new RulesResource(rulesRepository, rulesSearchRepository);
        this.restRulesMockMvc = MockMvcBuilders.standaloneSetup(rulesResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setControllerAdvice(exceptionTranslator)
            .setMessageConverters(jacksonMessageConverter).build();
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Rules createEntity(EntityManager em) {
        Rules rules = new Rules()
            .tenantId(DEFAULT_TENANT_ID)
            .ruleCode(DEFAULT_RULE_CODE)
            .startDate(DEFAULT_START_DATE)
            .endDate(DEFAULT_END_DATE)
            .enabledFlag(DEFAULT_ENABLED_FLAG)
            .ruleType(DEFAULT_RULE_TYPE)
            .createdBy(DEFAULT_CREATED_BY)
            .lastUpdatedBy(DEFAULT_LAST_UPDATED_BY)
            .creationDate(DEFAULT_CREATION_DATE)
            .lastUpdatedDate(DEFAULT_LAST_UPDATED_DATE)
            .sourceDataViewId(DEFAULT_SOURCE_DATA_VIEW_ID)
            .targetDataViewId(DEFAULT_TARGET_DATA_VIEW_ID);
        return rules;
    }

    @Before
    public void initTest() {
        rulesSearchRepository.deleteAll();
        rules = createEntity(em);
    }

    @Test
    @Transactional
    public void createRules() throws Exception {
        int databaseSizeBeforeCreate = rulesRepository.findAll().size();

        // Create the Rules
        restRulesMockMvc.perform(post("/api/rules")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(rules)))
            .andExpect(status().isCreated());

        // Validate the Rules in the database
        List<Rules> rulesList = rulesRepository.findAll();
        assertThat(rulesList).hasSize(databaseSizeBeforeCreate + 1);
        Rules testRules = rulesList.get(rulesList.size() - 1);
        assertThat(testRules.getTenantId()).isEqualTo(DEFAULT_TENANT_ID);
        assertThat(testRules.getRuleCode()).isEqualTo(DEFAULT_RULE_CODE);
        assertThat(testRules.getStartDate()).isEqualTo(DEFAULT_START_DATE);
        assertThat(testRules.getEndDate()).isEqualTo(DEFAULT_END_DATE);
        assertThat(testRules.isEnabledFlag()).isEqualTo(DEFAULT_ENABLED_FLAG);
        assertThat(testRules.getRuleType()).isEqualTo(DEFAULT_RULE_TYPE);
        assertThat(testRules.getCreatedBy()).isEqualTo(DEFAULT_CREATED_BY);
        assertThat(testRules.getLastUpdatedBy()).isEqualTo(DEFAULT_LAST_UPDATED_BY);
        assertThat(testRules.getCreationDate()).isEqualTo(DEFAULT_CREATION_DATE);
        assertThat(testRules.getLastUpdatedDate()).isEqualTo(DEFAULT_LAST_UPDATED_DATE);
        assertThat(testRules.getSourceDataViewId()).isEqualTo(DEFAULT_SOURCE_DATA_VIEW_ID);
        assertThat(testRules.getTargetDataViewId()).isEqualTo(DEFAULT_TARGET_DATA_VIEW_ID);

        // Validate the Rules in Elasticsearch
        Rules rulesEs = rulesSearchRepository.findOne(testRules.getId());
        assertThat(rulesEs).isEqualToComparingFieldByField(testRules);
    }

    @Test
    @Transactional
    public void createRulesWithExistingId() throws Exception {
        int databaseSizeBeforeCreate = rulesRepository.findAll().size();

        // Create the Rules with an existing ID
        rules.setId(1L);

        // An entity with an existing ID cannot be created, so this API call must fail
        restRulesMockMvc.perform(post("/api/rules")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(rules)))
            .andExpect(status().isBadRequest());

        // Validate the Alice in the database
        List<Rules> rulesList = rulesRepository.findAll();
        assertThat(rulesList).hasSize(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    public void getAllRules() throws Exception {
        // Initialize the database
        rulesRepository.saveAndFlush(rules);

        // Get all the rulesList
        restRulesMockMvc.perform(get("/api/rules?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(rules.getId().intValue())))
            .andExpect(jsonPath("$.[*].tenantId").value(hasItem(DEFAULT_TENANT_ID.intValue())))
            .andExpect(jsonPath("$.[*].ruleCode").value(hasItem(DEFAULT_RULE_CODE.toString())))
            .andExpect(jsonPath("$.[*].startDate").value(hasItem(DEFAULT_START_DATE.toString())))
            .andExpect(jsonPath("$.[*].endDate").value(hasItem(DEFAULT_END_DATE.toString())))
            .andExpect(jsonPath("$.[*].enabledFlag").value(hasItem(DEFAULT_ENABLED_FLAG.booleanValue())))
            .andExpect(jsonPath("$.[*].ruleType").value(hasItem(DEFAULT_RULE_TYPE.toString())))
            .andExpect(jsonPath("$.[*].createdBy").value(hasItem(DEFAULT_CREATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].lastUpdatedBy").value(hasItem(DEFAULT_LAST_UPDATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].creationDate").value(hasItem(sameInstant(DEFAULT_CREATION_DATE))))
            .andExpect(jsonPath("$.[*].lastUpdatedDate").value(hasItem(sameInstant(DEFAULT_LAST_UPDATED_DATE))))
            .andExpect(jsonPath("$.[*].sourceDataViewId").value(hasItem(DEFAULT_SOURCE_DATA_VIEW_ID.intValue())))
            .andExpect(jsonPath("$.[*].targetDataViewId").value(hasItem(DEFAULT_TARGET_DATA_VIEW_ID.intValue())));
    }

    @Test
    @Transactional
    public void getRules() throws Exception {
        // Initialize the database
        rulesRepository.saveAndFlush(rules);

        // Get the rules
        restRulesMockMvc.perform(get("/api/rules/{id}", rules.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.id").value(rules.getId().intValue()))
            .andExpect(jsonPath("$.tenantId").value(DEFAULT_TENANT_ID.intValue()))
            .andExpect(jsonPath("$.ruleCode").value(DEFAULT_RULE_CODE.toString()))
            .andExpect(jsonPath("$.startDate").value(DEFAULT_START_DATE.toString()))
            .andExpect(jsonPath("$.endDate").value(DEFAULT_END_DATE.toString()))
            .andExpect(jsonPath("$.enabledFlag").value(DEFAULT_ENABLED_FLAG.booleanValue()))
            .andExpect(jsonPath("$.ruleType").value(DEFAULT_RULE_TYPE.toString()))
            .andExpect(jsonPath("$.createdBy").value(DEFAULT_CREATED_BY.intValue()))
            .andExpect(jsonPath("$.lastUpdatedBy").value(DEFAULT_LAST_UPDATED_BY.intValue()))
            .andExpect(jsonPath("$.creationDate").value(sameInstant(DEFAULT_CREATION_DATE)))
            .andExpect(jsonPath("$.lastUpdatedDate").value(sameInstant(DEFAULT_LAST_UPDATED_DATE)))
            .andExpect(jsonPath("$.sourceDataViewId").value(DEFAULT_SOURCE_DATA_VIEW_ID.intValue()))
            .andExpect(jsonPath("$.targetDataViewId").value(DEFAULT_TARGET_DATA_VIEW_ID.intValue()));
    }

    @Test
    @Transactional
    public void getNonExistingRules() throws Exception {
        // Get the rules
        restRulesMockMvc.perform(get("/api/rules/{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateRules() throws Exception {
        // Initialize the database
        rulesRepository.saveAndFlush(rules);
        rulesSearchRepository.save(rules);
        int databaseSizeBeforeUpdate = rulesRepository.findAll().size();

        // Update the rules
        Rules updatedRules = rulesRepository.findOne(rules.getId());
        updatedRules
            .tenantId(UPDATED_TENANT_ID)
            .ruleCode(UPDATED_RULE_CODE)
            .startDate(UPDATED_START_DATE)
            .endDate(UPDATED_END_DATE)
            .enabledFlag(UPDATED_ENABLED_FLAG)
            .ruleType(UPDATED_RULE_TYPE)
            .createdBy(UPDATED_CREATED_BY)
            .lastUpdatedBy(UPDATED_LAST_UPDATED_BY)
            .creationDate(UPDATED_CREATION_DATE)
            .lastUpdatedDate(UPDATED_LAST_UPDATED_DATE)
            .sourceDataViewId(UPDATED_SOURCE_DATA_VIEW_ID)
            .targetDataViewId(UPDATED_TARGET_DATA_VIEW_ID);

        restRulesMockMvc.perform(put("/api/rules")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(updatedRules)))
            .andExpect(status().isOk());

        // Validate the Rules in the database
        List<Rules> rulesList = rulesRepository.findAll();
        assertThat(rulesList).hasSize(databaseSizeBeforeUpdate);
        Rules testRules = rulesList.get(rulesList.size() - 1);
        assertThat(testRules.getTenantId()).isEqualTo(UPDATED_TENANT_ID);
        assertThat(testRules.getRuleCode()).isEqualTo(UPDATED_RULE_CODE);
        assertThat(testRules.getStartDate()).isEqualTo(UPDATED_START_DATE);
        assertThat(testRules.getEndDate()).isEqualTo(UPDATED_END_DATE);
        assertThat(testRules.isEnabledFlag()).isEqualTo(UPDATED_ENABLED_FLAG);
        assertThat(testRules.getRuleType()).isEqualTo(UPDATED_RULE_TYPE);
        assertThat(testRules.getCreatedBy()).isEqualTo(UPDATED_CREATED_BY);
        assertThat(testRules.getLastUpdatedBy()).isEqualTo(UPDATED_LAST_UPDATED_BY);
        assertThat(testRules.getCreationDate()).isEqualTo(UPDATED_CREATION_DATE);
        assertThat(testRules.getLastUpdatedDate()).isEqualTo(UPDATED_LAST_UPDATED_DATE);
        assertThat(testRules.getSourceDataViewId()).isEqualTo(UPDATED_SOURCE_DATA_VIEW_ID);
        assertThat(testRules.getTargetDataViewId()).isEqualTo(UPDATED_TARGET_DATA_VIEW_ID);

        // Validate the Rules in Elasticsearch
        Rules rulesEs = rulesSearchRepository.findOne(testRules.getId());
        assertThat(rulesEs).isEqualToComparingFieldByField(testRules);
    }

    @Test
    @Transactional
    public void updateNonExistingRules() throws Exception {
        int databaseSizeBeforeUpdate = rulesRepository.findAll().size();

        // Create the Rules

        // If the entity doesn't have an ID, it will be created instead of just being updated
        restRulesMockMvc.perform(put("/api/rules")
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(rules)))
            .andExpect(status().isCreated());

        // Validate the Rules in the database
        List<Rules> rulesList = rulesRepository.findAll();
        assertThat(rulesList).hasSize(databaseSizeBeforeUpdate + 1);
    }

    @Test
    @Transactional
    public void deleteRules() throws Exception {
        // Initialize the database
        rulesRepository.saveAndFlush(rules);
        rulesSearchRepository.save(rules);
        int databaseSizeBeforeDelete = rulesRepository.findAll().size();

        // Get the rules
        restRulesMockMvc.perform(delete("/api/rules/{id}", rules.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate Elasticsearch is empty
        boolean rulesExistsInEs = rulesSearchRepository.exists(rules.getId());
        assertThat(rulesExistsInEs).isFalse();

        // Validate the database is empty
        List<Rules> rulesList = rulesRepository.findAll();
        assertThat(rulesList).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void searchRules() throws Exception {
        // Initialize the database
        rulesRepository.saveAndFlush(rules);
        rulesSearchRepository.save(rules);

        // Search the rules
        restRulesMockMvc.perform(get("/api/_search/rules?query=id:" + rules.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(rules.getId().intValue())))
            .andExpect(jsonPath("$.[*].tenantId").value(hasItem(DEFAULT_TENANT_ID.intValue())))
            .andExpect(jsonPath("$.[*].ruleCode").value(hasItem(DEFAULT_RULE_CODE.toString())))
            .andExpect(jsonPath("$.[*].startDate").value(hasItem(DEFAULT_START_DATE.toString())))
            .andExpect(jsonPath("$.[*].endDate").value(hasItem(DEFAULT_END_DATE.toString())))
            .andExpect(jsonPath("$.[*].enabledFlag").value(hasItem(DEFAULT_ENABLED_FLAG.booleanValue())))
            .andExpect(jsonPath("$.[*].ruleType").value(hasItem(DEFAULT_RULE_TYPE.toString())))
            .andExpect(jsonPath("$.[*].createdBy").value(hasItem(DEFAULT_CREATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].lastUpdatedBy").value(hasItem(DEFAULT_LAST_UPDATED_BY.intValue())))
            .andExpect(jsonPath("$.[*].creationDate").value(hasItem(sameInstant(DEFAULT_CREATION_DATE))))
            .andExpect(jsonPath("$.[*].lastUpdatedDate").value(hasItem(sameInstant(DEFAULT_LAST_UPDATED_DATE))))
            .andExpect(jsonPath("$.[*].sourceDataViewId").value(hasItem(DEFAULT_SOURCE_DATA_VIEW_ID.intValue())))
            .andExpect(jsonPath("$.[*].targetDataViewId").value(hasItem(DEFAULT_TARGET_DATA_VIEW_ID.intValue())));
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(Rules.class);
    }
}
