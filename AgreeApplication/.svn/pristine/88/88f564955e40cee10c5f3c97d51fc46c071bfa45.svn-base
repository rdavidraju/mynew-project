


package com.nspl.app.repository;

import java.math.BigInteger;
import java.sql.Date;
import java.time.LocalDate;
import java.util.List;

import com.nspl.app.domain.AppModuleSummary;

import org.springframework.stereotype.Repository;
import org.springframework.data.jpa.repository.*;
import org.springframework.data.repository.query.Param;


/**
 * Spring Data JPA repository for the AppModuleSummary entity.
 */
@SuppressWarnings("unused")
@Repository
public interface AppModuleSummaryRepository extends JpaRepository<AppModuleSummary,Long> {

	@Query(value =  "SELECT sum(dv_count),sum(type_count),round((sum(dv_count)-sum(type_count)),2) as unProcessedCount,"
			+ "case when round((sum(type_count)/sum(dv_count) * 100),2) is null then 0 else round((sum(type_count)/sum(dv_count) * 100),2) end as processedPercent,"
			+ "case when round(100-(sum(type_count)/sum(dv_count) * 100),2) is null then 0 else round(100-(sum(type_count)/sum(dv_count) * 100),2) end as unProcessedPer,view_id,"
			+ "case when round((sum(dv_amt)-sum(type_amt)),2) is null then 0 else round((sum(dv_amt)-sum(type_amt)),2) end as unProcessedAmt,"
			+ "case when round((sum(type_count)-sum(approval_count)),2) is null then 0 else round((sum(type_count)-sum(approval_count)),2) end as unApprovedCount,"
			+ "case when round(sum(type_amt),2) is null then 0 else  round(sum(type_amt),2) end as processedAmt,"
			+ "case when round(sum(approval_count),2) is null then 0 else round(sum(approval_count),2) end as approvalCount,"
			+ "case when round(sum(dv_amt),2) is null then 0 else round(sum(dv_amt),2) end as totalReconAmt"
			+ " FROM t_app_module_summary where rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate)"
			+ " group by view_id",nativeQuery=true)
	List<Object[]> fetchRecCountsByGroupIdAndFileDate(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
	
	
	@Query(value =  "SELECT sum(dv_count),sum(dv_amt) FROM t_app_module_summary where rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate)",nativeQuery=true)
	List<Object[]> fetchTotalDvCountAndAmount(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
	
	
	@Query(value =  "SELECT sum(type_count),case when sum(type_amt) is null then 0 else  sum(type_amt) end as typeAmount FROM t_app_module_summary where rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate)",nativeQuery=true)
	List<Object[]> fetchTotalReconciledCountAndAmount(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
	
	
	
	@Query(value =  "SELECT (sum(dv_count)-sum(type_count)) as unProcessedCount FROM t_app_module_summary where rule_group_id=:groupId and file_date between :fmDate and :toDate",nativeQuery=true)
	Object[] fetchUnRecCountsByGroupIdAndFileDate(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
	
	
	
	@Query(value =  "SELECT sum(type_count) FROM t_app_module_summary where rule_group_id=:groupId and type='Not accounted' and file_date between :fmDate and :toDate",nativeQuery=true)
	Object[] fetchUnActCountsByGroupIdAndFileDate(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);



	@Query(value =  "SELECT sum(distinct(dv_count)),sum(type_count),round(sum(type_count)/sum(distinct(dv_count))*100,2) as percet,type,rule_id,view_id,case when (sum(type_count)-sum(approval_count)) is null then 0 else (sum(type_count)-sum(approval_count)) end as unApprovedCount"
			+ " FROM t_app_module_summary where rule_group_id=:groupId and type=:type and "
			+ "file_date between :fmDate and :toDate group by rule_id,view_id,type",nativeQuery=true)
	List<Object[]> fetchActCountsByGroupIdAndFileDate(@Param("groupId") Long groupId,@Param("type") String type,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);

	@Query(value =  "SELECT (select sum(dv_count) from (select distinct(view_id),dv_count FROM t_app_module_summary where view_id =:viewId and rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate) ) a) as dvCount,sum(type_count),"
			+ "case when round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id),dv_count FROM t_app_module_summary where view_id =:viewId and rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate) ) a)*100,2) is null then 0 else round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id),dv_count FROM t_app_module_summary where view_id =:viewId and rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate) ) a)*100,2) end as percet,type,view_id,"
			+ "case when (select sum(dv_amt) from (select distinct(view_id),dv_amt FROM t_app_module_summary where view_id =:viewId and rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate) ) a)-sum(type_amt) is null then 0 else (select sum(dv_amt) from (select distinct(view_id),dv_amt FROM t_app_module_summary where view_id =:viewId and rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate) ) a)-sum(type_amt) end as amount,"
			+ "case when (sum(type_count)-sum(approval_count)) is null then 0 else (sum(type_count)-sum(approval_count)) end as unApprovedCount,"
			+ "case when sum(approval_count) is  null then 0 else sum(approval_count) end as approvalCt,"
			+ "case when (select sum(dv_amt) from (select distinct(view_id),dv_amt FROM t_app_module_summary where view_id =:viewId and rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate) ) a) is  null then 0 else (select sum(dv_amt) from (select distinct(view_id),dv_amt FROM t_app_module_summary where view_id =:viewId and rule_group_id=:groupId and (file_date>=:fmDate and file_date<=:toDate) ) a) end as totalDvAmt,"
			+ "case when sum(type_amt) is  null then 0 else sum(type_amt) end as totalTypeAmt"
			+ " FROM t_app_module_summary where view_id =:viewId and rule_group_id=:groupId and "
			+ "file_date>=:fmDate and file_date<=:toDate group by view_id,type",nativeQuery=true)
	List<Object[]> fetchActCountsByGroupIdAndViewIdAndFileDate(@Param("groupId") Long groupId,@Param("viewId") Long viewId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);


	@Query(value =  "SELECT case when sum(type_amt) is null then 0 else sum(type_amt) end as totalTypeamt FROM t_app_module_summary where rule_group_id=:groupId and view_id =:viewId and type='final accounted' and "
			+ "file_date between :fmDate and :toDate group by view_id",nativeQuery=true)
	BigInteger fetchFinalActAmtByGroupIdAndViewIdAndFileDate(@Param("groupId") Long groupId,@Param("viewId") Long viewId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);


	@Query(value =  "select DATEDIFF(:toDate,file_date) as `rule_age`, sum(dv_count),(sum(dv_count)-sum(type_count)) as unreconcilied,round((sum(dv_count)-sum(type_count))/sum(dv_count) *100,2) as unReconciledPer,"
			+ " concat((DATEDIFF(:toDate,file_date)-1),'-' ,DATEDIFF(:toDate,file_date)) as period from "
			+ "t_app_module_summary where file_date between :fmDate and :toDate and   rule_group_id =:groupId and rule_id =:ruleId and view_id =:viewId group by rule_age, period",nativeQuery=true)
	List<Object[]> fetchAgingForUnReconCount(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate,@Param("ruleId") Long ruleId,@Param("viewId") Long viewId);





	@Query(value =  "SELECT sum(dv_count),sum(type_count),case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else round(sum(type_count)/sum(dv_count) *100,2) end as reconciledPer,round(100-(sum(type_count)/sum(dv_count) * 100),2) as unRecPer FROM "
			+ "t_app_module_summary where rule_group_id =:groupId and file_date=:fmDate",nativeQuery=true)
	List< Object[]> fetchReconCountAndUnReconciledCountPerDay(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate);
	

	
	
	@Query(value =  "SELECT sum(dv_count),sum(type_count),case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else round(sum(type_count)/sum(dv_count) *100,2) end as reconciledPer,round(100-(sum(type_count)/sum(dv_count) * 100),2) as unRecPer,"
			+ "sum(dv_amt),sum(type_amt),case when round(sum(type_amt)/sum(dv_amt) *100,2) is null then 0 else round(sum(type_amt)/sum(dv_amt) *100,2) end as reconciledAmtPer,round(100-(sum(type_amt)/sum(dv_amt) * 100),2) as unRecAmtPer FROM "
			+ "t_app_module_summary where rule_group_id =:groupId and file_date >= :fDate and file_date <=:tDate",nativeQuery=true)
	List< Object[]> fetchReconCountAndUnReconciledCountBetweenGivenDates(@Param("groupId") Long groupId,@Param("fDate") LocalDate fDate,@Param("tDate") LocalDate tDate);



	@Query(value =  "select distinct type from t_app_module_summary where rule_group_id=:groupId",nativeQuery=true)
	List<String> findDistinctTypeByRuleGroupId(
			@Param("groupId") Long groupId);
	
	
	
	@Query(value =  "select distinct view_id from t_app_module_summary where rule_group_id=:groupId and file_date between :fmDate and :toDate",nativeQuery=true)
	List<BigInteger> findDistinctViewIdByRuleGroupId(
			@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);

	
	@Query(value =  "select view_id,avg(dv_amt),avg(dv_count) from t_app_module_summary where rule_group_id=:groupId and (file_date >=:fmDate and file_date<=:toDate) group by view_id",nativeQuery=true)
	List<Object[]> findToatlDvAmountAndDvCount(
			@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
	
	@Query(value =  "select view_id,case when sum(type_amt) is null then 0 else sum(type_amt) end as typeAmt,case when sum(type_count) is null then 0 else sum(type_count) end as typecount from t_app_module_summary where rule_group_id=:groupId and (file_date >=:fmDate and file_date<=:toDate) and type in (:type) group by view_id",nativeQuery=true)
	List<Object[]> findToatlTypeAmountAndTypeCountByType(
			@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate,@Param("type") List<String> type);
	
	

	@Query(value =  "select DATEDIFF(:toDate,file_date) as `rule_age`, sum(dv_count),sum(type_count),round((sum(dv_count)-sum(type_count))/sum(dv_count) *100,2) as actPer,"
			+ " concat((DATEDIFF(:toDate,file_date)-1),'-' ,DATEDIFF(:toDate,file_date)) as period from "
			+ "t_app_module_summary where file_date between :fmDate and :toDate and  rule_group_id =:groupId and type =:type group by rule_age, period",nativeQuery=true)
	List<Object[]> fetchAgingForAccountingSummary(@Param("groupId") Long groupId,@Param("type") String type,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);


	
	/**Each Day analysis for accted summary
	 */

	@Query(value =  "SELECT sum(dv_count),sum(type_count),case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else round(sum(type_count)/sum(dv_count) *100,2) end as per FROM "
			+ "t_app_module_summary where rule_group_id =:groupId and type=:type and file_date=:fmDate",nativeQuery=true)
	List<Object[]> fetchProcessedAndUnProcessedCountPerDay(@Param("groupId") Long groupId,@Param("type") String type,@Param("fmDate") LocalDate fmDate);
	
	@Query(value =  "SELECT (select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >=:fDate and file_date <=:tDate)) a) as dv_count,"
             +" sum(type_count),"
             +" case when round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >=:fDate and file_date <=:tDate)) a) *100,2) is null then 0 else round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >=:fDate and file_date <=:tDate)) a) *100,2) end as per,"
             +" sum(type_amt),"
             +" case when round(sum(type_amt)/(select sum(dv_amt) from (select distinct(view_id), dv_amt  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >=:fDate and file_date <=:tDate)) a) *100,2) is null then 0 else round(sum(type_amt)/(select sum(dv_amt) from (select distinct(view_id), dv_amt  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >=:fDate and file_date <=:tDate)) a) *100,2) end as amtPer FROM "
			+ "t_app_module_summary where rule_group_id =:groupId and type=:type and (file_date>=:fDate and file_date<=:tDate)",nativeQuery=true)
	List<Object[]> fetchProcessedAndUnProcessedCountBetweenGivenDates(@Param("groupId") Long groupId,@Param("type") String type,@Param("fDate") LocalDate fDate,@Param("tDate") LocalDate tDate);
	
	
	
	
	@Query(value =  "SELECT case when sum(dv_count) is null then 0 else sum(dv_count) end as dv_count,"
			+ "case when sum(type_count) is null then 0 else sum(type_count) end as type_count,"
			+ "case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else round(sum(type_count)/sum(dv_count) *100,2) end as reconciledPer,"
			+ "case when round((sum(dv_count)-sum(type_count))/sum(dv_count) * 100,2) is null then 0 else round((sum(dv_count)-sum(type_count))/sum(dv_count) * 100,2) end as unRecPer,"
			+ "case when sum(dv_amt) is null then 0 else sum(dv_amt) end as dvAmt,"
			+ "case when sum(type_amt) is null then 0 else sum(type_amt) end as typeAmt,"
			+ "case when round(sum(type_amt)/sum(dv_amt) *100,2) is null then 0 else round(sum(type_amt)/sum(dv_amt) *100,2) end as reconcileAmtPer,"
			//+ "case when round(100-(sum(type_amt)/sum(dv_amt) * 100),2) is null then 0 else round(100-(sum(type_amt)/sum(dv_amt) * 100),2) end as unRecAmtPer,"
		    //+ "case when round((sum(dv_amt)-sum(type_amt))/sum(dv_amt) * 100),2) is null then 0 else round(sum(dv_amt)-sum(type_amt))/sum(dv_amt) * 100),2) end as unRecAmtPer,"
	        + "case when round((sum(dv_amt)-sum(type_amt))/sum(dv_amt) * 100,2) is null then 0 else round((sum(dv_amt)-sum(type_amt))/sum(dv_amt) * 100,2) end as unRecAmtPer,"
			+ "DATE(file_date) as date FROM "
			+ "t_app_module_summary where rule_group_id =:groupId and file_date>:fmDate and file_date<=:toDate GROUP BY DATE(file_date)",nativeQuery=true)
	List< Object[]> fetchReconCountAndUnReconciledCountWithDates(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
	
	
	
	@Query(value =  "SELECT case when sum(dv_count) is null then 0 else sum(dv_count) end as dv_count,"
			+ "case when sum(type_count) is null then 0 else sum(type_count) end as type_count,"
			+ "case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else round(sum(type_count)/sum(dv_count) *100,2) end as reconciledPer,"
			+ "case when round((sum(dv_count)-sum(type_count))/sum(dv_count) * 100,2) is null then 0 else round((sum(dv_count)-sum(type_count))/sum(dv_count) * 100,2) end as unRecPer,"
			+ "case when sum(dv_amt) is null then 0 else sum(dv_amt) end as dvAmt,"
			+ "case when sum(type_amt) is null then 0 else sum(type_amt) end as typeAmt,"
			+ "case when round(sum(type_amt)/sum(dv_amt) *100,2) is null then 0 else round(sum(type_amt)/sum(dv_amt) *100,2) end as reconcileAmtPer,"
	        + "case when round((sum(dv_amt)-sum(type_amt))/sum(dv_amt) * 100,2) is null then 0 else round((sum(dv_amt)-sum(type_amt))/sum(dv_amt) * 100,2) end as unRecAmtPer FROM "
			+ "t_app_module_summary where rule_group_id =:groupId and file_date=:fmDate",nativeQuery=true)
	List< Object[]> fetchReconCountAndUnReconciledCountForDate(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate);
	
	
	
	
	
	
	@Query(value =  "SELECT sum(dv_count),sum(type_count),"
			+ "case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else round(sum(type_count)/sum(dv_count) *100,2) end as reconciledPer,"
			+ "case when round((sum(dv_count)-sum(type_count))/sum(dv_count) * 100,2) is null then 0 else round((sum(dv_count)-sum(type_count))/sum(dv_count) * 100,2) end as unRecPer,"
			+ "case when sum(dv_amt) is null then 0 else sum(dv_amt) end as dvAmt,"
			+ "case when sum(type_amt) is null then 0 else sum(type_amt) end as typeAmt,"
			+ "case when round(sum(dv_amt)/sum(dv_amt) *100,2) is null then 0 else round(sum(dv_amt)/sum(dv_amt) *100,2) end as reconcileAmtPer,"
			+ "case when round((sum(dv_amt)-sum(type_amt))/sum(dv_amt) * 100),2) is null then 0 else round(sum(dv_amt)-sum(type_amt))/sum(dv_amt) * 100),2) end as unRecAmtPer,"
			+ "FLOOR((DayOfMonth(file_date)-1)/7)+1 as week FROM "
			+ "t_app_module_summary where rule_group_id =:groupId and file_date between :fmDate and :toDate GROUP BY FLOOR((DayOfMonth(file_date)-1)/7)+1",nativeQuery=true)
	List< Object[]> fetchReconCountAndUnReconciledCountWithweeks(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
	
	
	
	/*@Query(value =  "select type,Date(file_date), sum(dv_count),sum(type_count),sum(dv_amt),sum(type_amt),case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else  round(sum(type_count)/sum(dv_count) *100,2) end as countPer, case when round(sum(type_amt)/sum(dv_amt) *100,2) is null then 0 else  round(sum(type_count)/sum(dv_count) *100,2) end as amtPer from t_app_module_summary where rule_group_id =216 and file_date between '2018-01-30' and '2018-02-28' group by type,Date(file_date)",nativeQuery=true)
	List<Object[]> fetchAccountingAnalysisWithDates();*/
	
	
/*	@Query(value = "select type,Date(file_date), sum(dv_count),sum(type_count),sum(dv_amt),sum(type_amt),"
			+ "case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else round(sum(type_count)/sum(dv_count) *100,2) end as countPer,"
			+ "case when round(sum(type_amt)/sum(dv_amt) *100,2) is null then 0 else round(sum(type_amt)/sum(dv_amt) *100,2) end as amtPer "
			+ "from t_app_module_summary where rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate) group by type,Date(file_date)",nativeQuery=true)
			List<Object[]> fetchAccountingAnalysisWithDates(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);*/
			
			
			
			
			
			@Query(value = "select type,Date(file_date),(select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate)) a) as dv_count,sum(type_count),(select sum(dv_amt) from (select distinct(view_id),dv_amt"
             +" FROM t_app_module_summary where rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate)) a) as dvAmt,sum(type_amt),case when round(sum(type_count) / (select"
             +" sum(dv_count) from (select distinct(view_id),dv_count FROM t_app_module_summary where rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate)) a) *100,2) is null"
             +" then 0 else round(sum(type_count) / (select sum(dv_count) from (select distinct(view_id),dv_count FROM t_app_module_summary where rule_group_id =:groupId  and (file_date >:fmDate and file_date <=:toDate))"
             +"  a) *100,2) end as countPer,case when round(sum(type_amt) / (select sum(dv_amt) from (select distinct (view_id), dv_amt FROM t_app_module_summary where rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate) ) a) *100, 2) is null then 0 else"
             +" round(sum(type_amt) / (select sum(dv_amt) from (select distinct(view_id),dv_amt FROM t_app_module_summary where rule_group_id =:groupId  and (file_date >:fmDate and file_date <=:toDate))"
             +"  a) *100,2) end as amtPer from  t_app_module_summary where rule_group_id =:groupId  and (file_date >:fmDate and file_date <=:toDate)"
             +" group by type, Date(file_date)",nativeQuery=true)
					List<Object[]> fetchAccountingAnalysisWithDates(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
			
			
			
			
			
			@Query(value = "select type,case when (select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate)) a) is null then 0 else (select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate)) a) end as dvCount,"
					+ "case when sum(type_count) is null then 0 else sum(type_count) end as typeCount,"
					+ "case when (select sum(dv_amt) from (select distinct (view_id), dv_amt FROM t_app_module_summary where rule_group_id =:groupId and (file_date between :fmDate and :toDate)) a) is null then 0 else "
					+ "(select sum(dv_amt) from (select distinct (view_id), dv_amt FROM t_app_module_summary where rule_group_id =:groupId and (file_date between :fmDate and :toDate)) a) end as dvAmt,"
					+ "case when sum(type_amt) is null then 0 else sum(type_amt) end as typeAmt,"
					+ "case when round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate)) a) *100,2) is null then 0 else "
             + "round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate)) a) *100,2) end as countPer,"
					+ "case when round(sum(type_amt)/(select sum(dv_amt) from (select distinct(view_id), dv_amt  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate)) a) *100,2) is null then 0 else "
             + "round(sum(type_amt)/(select sum(dv_amt) from (select distinct(view_id), dv_amt  FROM t_app_module_summary  where"
             +" rule_group_id =:groupId and (file_date >:fmDate and file_date <=:toDate)) a) *100,2) end as amtPer "
					+ "from t_app_module_summary where rule_group_id =:groupId and file_date>:fmDate and file_date<=:toDate group by type",nativeQuery=true)
					List<Object[]> fetchAccountingAnalysisWithWeeks(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
					
				
					
					
					/**for dashboard v3**/
					
					
					@Query(value = "select type,case when (select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date >=:fmDate and file_date <=:toDate)) a) is null then 0 else (select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date >=:fmDate and file_date <=:toDate)) a) end as dvCount,"
									+ "case when sum(type_count) is null then 0 else sum(type_count) end as typeCount,"
									+ "case when (select sum(dv_amt) from (select distinct (view_id), dv_amt FROM t_app_module_summary where rule_group_id =:groupId and (file_date >=:fmDate and file_date <=:toDate)) a) is null then 0 else "
									+ "(select sum(dv_amt) from (select distinct (view_id), dv_amt FROM t_app_module_summary where rule_group_id =:groupId and (file_date >=:fmDate and file_date <=:toDate)) a) end as dvAmt,"
									+ "case when sum(type_amt) is null then 0 else sum(type_amt) end as typeAmt,"
									+ "case when round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date >=:fmDate and file_date <=:toDate)) a) *100,2) is null then 0 else "
				             + "round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date >=:fmDate and file_date <=:toDate)) a) *100,2) end as countPer,"
									+ "case when round(sum(type_amt)/(select sum(dv_amt) from (select distinct(view_id), dv_amt  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date >=:fmDate and file_date <=:toDate)) a) *100,2) is null then 0 else "
				             + "round(sum(type_amt)/(select sum(dv_amt) from (select distinct(view_id), dv_amt  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date >=:fmDate and file_date <=:toDate)) a) *100,2) end as amtPer "
									+ "from t_app_module_summary where rule_group_id =:groupId and file_date>=:fmDate and file_date<=:toDate group by type",nativeQuery=true)
									List<Object[]> fetchAccountingAnalysisFromAndToDate(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
					
					
					
					@Query(value = "select type,case when (select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date=:fmDate)) a) is null then 0 else (select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date =:fmDate)) a) end as dvCount,"
									+ "case when sum(type_count) is null then 0 else sum(type_count) end as typeCount,"
									+ "case when (select sum(dv_amt) from (select distinct (view_id), dv_amt FROM t_app_module_summary where rule_group_id =:groupId and (file_date =:fmDate)) a) is null then 0 else "
									+ "(select sum(dv_amt) from (select distinct (view_id), dv_amt FROM t_app_module_summary where rule_group_id =:groupId and (file_date=:fmDate)) a) end as dvAmt,"
									+ "case when round(sum(type_amt)*100,2) is null then 0 else round(sum(type_amt)*100,2) end as typeAmt,"
									+ "case when round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date=:fmDate)) a) *100,2) is null then 0 else "
				             + "round(sum(type_count)/(select sum(dv_count) from (select distinct(view_id), dv_count  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date =:fmDate)) a) *100,2) end as countPer,"
									+ "case when round(sum(type_amt)/(select sum(dv_amt) from (select distinct(view_id), dv_amt  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date =:fmDate)) a) *100,2) is null then 0 else "
				             + "round(sum(type_amt)/(select sum(dv_amt) from (select distinct(view_id), dv_amt  FROM t_app_module_summary  where"
				             +" rule_group_id =:groupId and (file_date =:fmDate)) a) *100,2) end as amtPer "
									+ "from t_app_module_summary where rule_group_id =:groupId and file_date=:fmDate group by type",nativeQuery=true)
									List<Object[]> fetchAccountingAnalysisForADate(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate);
	
	
	



	AppModuleSummary findByFileDateAndModule(LocalDate parse, String string);



	AppModuleSummary findByFileDateAndModuleAndRuleGroupId(LocalDate parse,
			String string, Long id);



	AppModuleSummary findByFileDateAndModuleAndRuleGroupIdAndRuleId(
			LocalDate parse, String string, Long id, Long valueOf);


	@Query(value =  "select * from t_app_module_summary where file_date =:fileDate and module =:module and rule_group_id=:groupId and rule_id =:ruleId and view_id=:viewId",nativeQuery=true)
	AppModuleSummary findByFileDateAndModuleAndRuleGroupIdAndRuleIdAndViewId(
			@Param("fileDate")	LocalDate fileDate,@Param("module") String module,@Param("groupId") Long groupId,@Param("ruleId") Long ruleId,@Param("viewId") Long viewId);



	AppModuleSummary findByFileDateAndModuleAndRuleGroupIdAndRuleIdAndViewIdAndType(
			LocalDate parse, String string, Long id, Long valueOf,
			Long valueOf2, String acct);







/*	AppModuleSummary findByFileDateAndModuleAndRuleGroupIdAndRuleIdAndTypeAndViewId(
			LocalDate parse, String string2, Long id, Long longValue,
			Long longValue2);*/

	AppModuleSummary findByModuleAndRuleGroupIdAndRuleIdAndTypeAndViewId(String module, Long ruleGroupId, Long ruleId, String type, Long viewId);

	@Query(value =  "SELECT case when sum(dv_count) is null then 0 else sum(dv_count) end totalDVCount,"
			+ "case when sum(type_count) is null then 0 else sum(type_count) end as totalTypeCount,"
			+ "case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else round(sum(type_count)/sum(dv_count) *100,2) end as reconciledPer,"
			+ "case when round(100-(sum(type_count)/sum(dv_count) * 100),2) is null then 0 else round(100-(sum(type_count)/sum(dv_count) * 100),2) end as unRecPer,"
			+ "case when sum(dv_amt) is null then 0 else sum(dv_amt) end as dvAmt,"
			+ "case when sum(type_amt) is null then 0 else sum(type_amt) end as typeAmt,"
			+ "case when round(sum(type_amt)/sum(dv_amt) *100,2) is null then 0 else round(sum(type_amt)/sum(dv_amt) *100,2) end as reconcileAmtPer,"
			+ "case when round(100-(sum(type_amt)/sum(dv_amt) * 100),2) is null then 0 else round(100-(sum(type_amt)/sum(dv_amt) * 100),2) end as unRecAmtPer"
			+ " FROM "
			+ "t_app_module_summary where rule_group_id =:groupId and file_date>:fmDate and file_date<=:toDate",nativeQuery=true)
	List<Object[]> fetchReconCountAndUnReconciledCountForWeek(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate,@Param("toDate") LocalDate toDate);
	
	
	
	@Query(value =  "SELECT case when sum(dv_count) is null then 0 else sum(dv_count) end totalDVCount,"
			+ "case when sum(type_count) is null then 0 else sum(type_count) end as totalTypeCount,"
			+ "case when round(sum(type_count)/sum(dv_count) *100,2) is null then 0 else round(sum(type_count)/sum(dv_count) *100,2) end as reconciledPer,"
			+ "case when round(100-(sum(type_count)/sum(dv_count) * 100),2) is null then 0 else round(100-(sum(type_count)/sum(dv_count) * 100),2) end as unRecPer,"
			+ "case when sum(dv_amt) is null then 0 else sum(dv_amt) end as dvAmt,"
			+ "case when sum(type_amt) is null then 0 else sum(type_amt) end as typeAmt,"
			+ "case when round(sum(type_amt)/sum(dv_amt) *100,2) is null then 0 else round(sum(type_amt)/sum(dv_amt) *100,2) end as reconcileAmtPer,"
			+ "case when round(100-(sum(type_amt)/sum(dv_amt) * 100),2) is null then 0 else round(100-(sum(type_amt)/sum(dv_amt) * 100),2) end as unRecAmtPer"
			+ " FROM "
			+ "t_app_module_summary where rule_group_id =:groupId and file_date=:fmDate",nativeQuery=true)
	List<Object[]> fetchReconCountAndUnReconciledCountForADate(@Param("groupId") Long groupId,@Param("fmDate") LocalDate fmDate);
	

	
	@Query(value = "select distinct file_date from t_app_module_summary where module=:module and rule_group_id=:groupId and file_date is not null",nativeQuery=true)
	List<Date> findDistinctFileDateByModuleAndRuleGroupId(@Param("module") String module,
			@Param("groupId") Long groupId);


	AppModuleSummary findByFileDateAndModuleAndRuleGroupIdAndViewIdAndTypeAndRuleIdIsNull(LocalDate fileDate, String module, Long ruleGroupId, Long viewId, String type);


	List<AppModuleSummary> findByModuleAndRuleGroupIdAndViewIdAndType(String module, Long ruleGroupId, Long viewId, String type);

	
	@Query(value = "SELECT rule_id,type FROM t_app_module_summary where rule_group_id=:groupId and view_id=:viewId "
			+ "and (file_date>=:fDate and file_date<=:tDate) group by rule_id,type",nativeQuery=true)
	List<Object[]> findRuleIdAndTypeIdByRuleGroupIdAndViewId(@Param("groupId") Long groupId,
			@Param("viewId")Long viewId,@Param("fDate") LocalDate fDate,@Param("tDate") LocalDate tDate);
	
	
	
	@Query(value = "SELECT rule_id FROM t_app_module_summary where rule_group_id=:groupId and view_id=:viewId and rule_id is not null "
			+ "and (file_date>=:fDate and file_date<=:tDate) group by rule_id",nativeQuery=true)
	List<BigInteger> findRuleIdByRuleGroupIdAndViewId(@Param("groupId") Long groupId,
			@Param("viewId")Long viewId,@Param("fDate") LocalDate fDate,@Param("tDate") LocalDate tDate);
}




/*select type,Date(file_date), sum(dv_count),sum(type_count),sum(dv_amt),sum(type_amt),
case when round(sum(type_count)/(select sum(dv_count) from (select distinct (view_id), dv_count FROM agree_app_beta_0310.t_app_module_summary where rule_group_id=191 and file_date='2018-04-27' ) a) *100) is null then 0 else round(sum(type_count)/sum(dv_count) *100) end as countPer,
case when round(sum(type_amt)/sum(dv_amt) *100,2) is null then 0 else round(sum(type_amt)/(select sum(dv_amt) from (select distinct (view_id), dv_amt FROM agree_app_beta_0310.t_app_module_summary where rule_group_id=191 and file_date='2018-04-27' ) a) *100) end as amtPer 
from agree_app_beta_0310.t_app_module_summary where rule_group_id =191 and (file_date >'2018-04-21' and file_date <='2018-04-27') group by type,Date(file_date);*/