package com.nspl.app.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.RoleFunctionAssignment;

import com.nspl.app.repository.RoleFunctionAssignmentRepository;
import com.nspl.app.web.rest.util.HeaderUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing RoleFunctionAssignment.
 */
@RestController
@RequestMapping("/api")
public class RoleFunctionAssignmentResource {

    private final Logger log = LoggerFactory.getLogger(RoleFunctionAssignmentResource.class);

    private static final String ENTITY_NAME = "roleFunctionAssignment";

    private final RoleFunctionAssignmentRepository roleFunctionAssignmentRepository;

    public RoleFunctionAssignmentResource(RoleFunctionAssignmentRepository roleFunctionAssignmentRepository) {
        this.roleFunctionAssignmentRepository = roleFunctionAssignmentRepository;
    }

    /**
     * POST  /role-function-assignments : Create a new roleFunctionAssignment.
     *
     * @param roleFunctionAssignment the roleFunctionAssignment to create
     * @return the ResponseEntity with status 201 (Created) and with body the new roleFunctionAssignment, or with status 400 (Bad Request) if the roleFunctionAssignment has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/role-function-assignments")
    @Timed
    public ResponseEntity<RoleFunctionAssignment> createRoleFunctionAssignment(@RequestBody RoleFunctionAssignment roleFunctionAssignment) throws URISyntaxException {
        log.debug("REST request to save RoleFunctionAssignment : {}", roleFunctionAssignment);
        if (roleFunctionAssignment.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new roleFunctionAssignment cannot already have an ID")).body(null);
        }
        RoleFunctionAssignment result = roleFunctionAssignmentRepository.save(roleFunctionAssignment);
        return ResponseEntity.created(new URI("/api/role-function-assignments/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /role-function-assignments : Updates an existing roleFunctionAssignment.
     *
     * @param roleFunctionAssignment the roleFunctionAssignment to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated roleFunctionAssignment,
     * or with status 400 (Bad Request) if the roleFunctionAssignment is not valid,
     * or with status 500 (Internal Server Error) if the roleFunctionAssignment couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/role-function-assignments")
    @Timed
    public ResponseEntity<RoleFunctionAssignment> updateRoleFunctionAssignment(@RequestBody RoleFunctionAssignment roleFunctionAssignment) throws URISyntaxException {
        log.debug("REST request to update RoleFunctionAssignment : {}", roleFunctionAssignment);
        if (roleFunctionAssignment.getId() == null) {
            return createRoleFunctionAssignment(roleFunctionAssignment);
        }
        RoleFunctionAssignment result = roleFunctionAssignmentRepository.save(roleFunctionAssignment);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, roleFunctionAssignment.getId().toString()))
            .body(result);
    }

    /**
     * GET  /role-function-assignments : get all the roleFunctionAssignments.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of roleFunctionAssignments in body
     */
    @GetMapping("/role-function-assignments")
    @Timed
    public List<RoleFunctionAssignment> getAllRoleFunctionAssignments() {
        log.debug("REST request to get all RoleFunctionAssignments");
        return roleFunctionAssignmentRepository.findAll();
    }

    /**
     * GET  /role-function-assignments/:id : get the "id" roleFunctionAssignment.
     *
     * @param id the id of the roleFunctionAssignment to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the roleFunctionAssignment, or with status 404 (Not Found)
     */
    @GetMapping("/role-function-assignments/{id}")
    @Timed
    public ResponseEntity<RoleFunctionAssignment> getRoleFunctionAssignment(@PathVariable Long id) {
        log.debug("REST request to get RoleFunctionAssignment : {}", id);
        RoleFunctionAssignment roleFunctionAssignment = roleFunctionAssignmentRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(roleFunctionAssignment));
    }

    /**
     * DELETE  /role-function-assignments/:id : delete the "id" roleFunctionAssignment.
     *
     * @param id the id of the roleFunctionAssignment to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/role-function-assignments/{id}")
    @Timed
    public ResponseEntity<Void> deleteRoleFunctionAssignment(@PathVariable Long id) {
        log.debug("REST request to delete RoleFunctionAssignment : {}", id);
        roleFunctionAssignmentRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }
}
