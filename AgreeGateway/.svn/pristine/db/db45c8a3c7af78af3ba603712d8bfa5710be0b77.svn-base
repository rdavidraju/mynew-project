package com.nspl.app.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.Functionality;
import com.nspl.app.domain.RoleFunctionAssignment;
import com.nspl.app.domain.Roles;
import com.nspl.app.domain.User;
import com.nspl.app.domain.UserRoleAssignment;
import com.nspl.app.repository.FunctionalityRepository;
import com.nspl.app.repository.RoleFunctionAssignmentRepository;
import com.nspl.app.repository.RolesRepository;
import com.nspl.app.repository.UserRoleAssignmentRepository;
import com.nspl.app.service.UserService;
import com.nspl.app.web.rest.dto.FunctionalityDTO;
import com.nspl.app.web.rest.dto.RolesDTO;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;

import io.swagger.annotations.ApiParam;
import io.github.jhipster.web.util.ResponseUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing Roles.
 */
@RestController
@RequestMapping("/api")
public class RolesResource {

    private final Logger log = LoggerFactory.getLogger(RolesResource.class);

    private static final String ENTITY_NAME = "roles";

    private final RolesRepository rolesRepository;
    private final UserService userService;
    private final FunctionalityRepository functionalityRepository;
    private final RoleFunctionAssignmentRepository roleFunctionAssignmentRepository;

    public RolesResource(RolesRepository rolesRepository,
    		UserService userService,FunctionalityRepository functionalityRepository,
    		RoleFunctionAssignmentRepository roleFunctionsAssignmentRepository) {
        this.rolesRepository = rolesRepository;
        this.userService = userService;
        this.functionalityRepository =functionalityRepository;
        this.roleFunctionAssignmentRepository = roleFunctionsAssignmentRepository;
    }

    /**
     * POST  /roles : Create a new roles.
     *
     * @param roles the roles to create
     * @return the ResponseEntity with status 201 (Created) and with body the new roles, or with status 400 (Bad Request) if the roles has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/roles")
    @Timed
    public ResponseEntity<Roles> createRoles(@RequestBody Roles roles) throws URISyntaxException {
        log.debug("REST request to save Roles : {}", roles);
        if (roles.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new roles cannot already have an ID")).body(null);
        }
        Roles result = rolesRepository.save(roles);
        return ResponseEntity.created(new URI("/api/roles/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /roles : Updates an existing roles.
     *
     * @param roles the roles to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated roles,
     * or with status 400 (Bad Request) if the roles is not valid,
     * or with status 500 (Internal Server Error) if the roles couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/roles")
    @Timed
    public ResponseEntity<Roles> updateRoles(@RequestBody Roles roles) throws URISyntaxException {
        log.debug("REST request to update Roles : {}", roles);
        if (roles.getId() == null) {
            return createRoles(roles);
        }
        Roles result = rolesRepository.save(roles);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, roles.getId().toString()))
            .body(result);
    }

    /**
     * GET  /roles : get all the roles.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and the list of roles in body
     */
    @GetMapping("/roles")
    @Timed
    public ResponseEntity<List<Roles>> getAllRoles(@ApiParam Pageable pageable) {
        log.debug("REST request to get a page of Roles");
        Page<Roles> page = rolesRepository.findAll(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/roles");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * GET  /roles/:id : get the "id" roles.
     *
     * @param id the id of the roles to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the roles, or with status 404 (Not Found)
     */
    @GetMapping("/roles/{id}")
    @Timed
    public ResponseEntity<Roles> getRoles(@PathVariable Long id) {
        log.debug("REST request to get Roles : {}", id);
        Roles roles = rolesRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(roles));
    }

    /**
     * DELETE  /roles/:id : delete the "id" roles.
     *
     * @param id the id of the roles to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/roles/{id}")
    @Timed
    public ResponseEntity<Void> deleteRoles(@PathVariable Long id) {
        log.debug("REST request to delete Roles : {}", id);
        rolesRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }
    
    /**
     * GET  /rolesAndFunctionsByUserId : get roles for input user
     * 
     */
    @GetMapping("/rolesAndFunctionsByUserId")
    @Timed
    public List<RolesDTO> fetchRolesAndFunctionsByUserId(@RequestParam Long userId) {
        log.debug("REST request to get a page of Roles");
        User currentUser = userService.getCurrentUser();
        List<RolesDTO> rolesAndFunctions = new ArrayList<RolesDTO>();
        
        List<Roles> roles = rolesRepository.fetchAssignedRolesByUserId(userId);
        for(Roles role : roles)
        {
        	RolesDTO roleDTO = new RolesDTO();
        	roleDTO.setRoleName(role.getRoleName());
        	roleDTO.setRoleDesc(role.getRoleDesc());
        	roleDTO.setStartDate(role.getStartDate());
        	roleDTO.setEndDate(role.getEndDate());
        	roleDTO.setActiveInd(role.getActiveInd());
        	roleDTO.setId(role.getId());
        	
        	List<RoleFunctionAssignment> roleFunctionAssignments = new ArrayList<RoleFunctionAssignment>();
        	roleFunctionAssignments = roleFunctionAssignmentRepository.findByRoleId(role.getId());
        	
        	List<FunctionalityDTO> functionsListDTO = new ArrayList<FunctionalityDTO>();
        	
        	 for(RoleFunctionAssignment rfa : roleFunctionAssignments)
        	 {
        		 Functionality function = new Functionality();
        		 function = functionalityRepository.findOne(rfa.getFunctionId());
        		 FunctionalityDTO functionalityDTO = new FunctionalityDTO();
        		 functionalityDTO.setActiveFlag(Boolean.valueOf(function.getActiveInd()));
        		 functionalityDTO.setCanDelete(rfa.isCanDelete());
        		 functionalityDTO.setCanExecute(rfa.isCanExecute());
        		 functionalityDTO.setCanInsert(rfa.isCanInsert());
        		 functionalityDTO.setCanUpdate(rfa.isCanUpdate());
        		 functionalityDTO.setCanView(rfa.isCanView());
        		 functionalityDTO.setFuncDesc(function.getFuncDesc());
        		 functionalityDTO.setFuncName(function.getFuncName());
        		 functionalityDTO.setId(function.getId());
        		 functionalityDTO.setFuncAssignEndDate(rfa.getEndDate());
        		 functionalityDTO.setFuncAssignStartDate(rfa.getStartDate());
        		 functionalityDTO.setFuncStartDate(function.getStartDate());
        		 functionalityDTO.setFuncEndDate(function.getEndDate());
        		 
        		 functionsListDTO.add(functionalityDTO);
        	 }
        	roleDTO.setFunctions(functionsListDTO);
        	rolesAndFunctions.add(roleDTO);
        }
        return rolesAndFunctions;
    }
    @GetMapping("/rolesForTenant")
    @Timed
    public List<Roles> fetchRolesForTenant() {
        log.debug("REST request to get Roles");
        List<Roles> roles = new ArrayList<Roles>();
        User currentUser = userService.getCurrentUser();
        roles = rolesRepository.findByTenantId(currentUser.getTenantId());
        return  roles;
        }
}
