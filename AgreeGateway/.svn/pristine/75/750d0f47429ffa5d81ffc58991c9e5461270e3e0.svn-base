import { Injectable } from '@angular/core';
import { Http, Response, URLSearchParams, BaseRequestOptions } from '@angular/http';
import { Params } from "@angular/router";
import { Observable } from 'rxjs/Rx';
import 'jquery';
import 'jquery-ui-bundle/jquery-ui.min.js';

declare var $: any;
declare var jQuery: any;
declare var j:number;
declare var a:number;
// import { isFullScreen }  from '../shared';
@Injectable()

export class CommonService {
        public recentBreadCrumbs: any[]=[]; //@Rk: Added to handle reverse navigation 
        public tempVarNum: number = 0;
        public tempVarStr: string = '';
        isFullScreen = true;
        portlet: any;
        callFunction() {
            var getViewPort = function() {
            return{
                j : window.innerWidth
                        || document.documentElement.clientWidth
                        || document.body.clientWidth,
                a : window.innerHeight
                    || document.documentElement.clientHeight
                    || document.body.clientHeight
                }
            }
            console.log('j and a: '+getViewPort().j+' '+getViewPort().a);
            // handle portlet fullscreen
            $('body').on('click', '.portlet > .portlet-title .fullscreen', function(e) {
                e.preventDefault();
                this.portlet = $(this).closest(".portlet");
                if (this.portlet.hasClass('portlet-fullscreen')) {
                    isFullScreen = true;
                    // console.log('FULL SCREEN ON:'+this.isFullScreen+'TYPE:'+typeof(this.isFullScreen));
                    $(this).removeClass('on');
                    this.portlet.removeClass('portlet-fullscreen');
                    $('body').removeClass('page-portlet-fullscreen');
                    this.portlet.children('.portlet-body').css('height', 'auto');
                    this.portlet.find('.table-responsive').css('max-height', '450px');  
                } else {
                    isFullScreen = false;
                    fullHeight = getViewPort().a -
                        parseInt(this.portlet.children('.portlet-title').outerHeight()) -
                        parseInt(this.portlet.children('.portlet-body').css('padding-top')) -
                        parseInt(this.portlet.children('.portlet-body').css('padding-bottom'));
                    tempHeight = fullHeight - 325;
                    console.log('Temp Height :' + tempHeight);
                    console.log('Full Height :' + fullHeight);
                    $(this).addClass('on');
                    this.portlet.addClass('portlet-fullscreen');
                    $('body').addClass('page-portlet-fullscreen');
                    this.portlet.children('.portlet-body').css('height', 'auto');
                    this.portlet.find('.table-responsive').css('height', 'auto');
                    this.portlet.find('.table-responsive').css('max-height', '');
                    this.portlet.find('.scrollTempLines perfect-scrollbar').css('height', tempHeight);
                }
                if($(this).attr("callback")){
                    eval($(this).attr("callback"));
                }
                 
            });
           
            
    }
   screensize(){
        return {
            width : window.innerWidth
                    || document.documentElement.clientWidth
                    || document.body.clientWidth,
            height : window.innerHeight
                || document.documentElement.clientHeight
                || document.body.clientHeight
        }
    //    return console.log('new j and a: '+getViewPort().j+' '+getViewPort().a);
   }
        
}
console.log('FULL SCREEN before export:'+isFullScreen+'TYPE:'+typeof(isFullScreen));
export var isFullScreen :boolean;
export var fullHeight:number;
export var tempHeight:number;
export var getViewPort:any;
