import { Injectable } from '@angular/core';
import { Http, Response, URLSearchParams, BaseRequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Rx';
import { JhiDateUtils } from 'ng-jhipster';

import { AccountingData,acctCustomFilters ,jsonforAccounting} from './accounting-data.model';
import { ResponseWrapper, createRequestOption } from '../../shared';
import { SessionStorageService } from 'ng2-webstorage';

@Injectable()
export class AccountingDataService {

    private resourceUrl = 'agreeapplication/api/accounting-data';
    private resourceSearchUrl = 'agreeapplication/api/_search/accounting-data';
    private fetchAmountAndCountUrl = 'agreeapplication/api/getAccountingCountAndAmount';
    private fetchRecordsByViewIds = 'agreeapplication/api/getAccountingDataByViewId';
    private acctFilterRecordsURL = 'agreeapplication/api/getAccDataWithCustomFilter';
    private postingAccoutningRecordsURL = 'agreeapplication/api/postManualAccountingData';
    private postingUnAccoutningRecordsURL = 'agreeapplication/api/processManualUnAccountingData';
    private accountingSideBarURL = 'agreeapplication/api/getAccountingViewColumnValueSet';
    private accColHeadersURL = 'agreeapplication/api/getAccountingColumnAlignmentInfo';
    
    private UserData = this.$sessionStorage.retrieve('userData');

    constructor(private http: Http, private dateUtils: JhiDateUtils,
    private $sessionStorage: SessionStorageService) { }

    create(accountingData: AccountingData): Observable<AccountingData> {
        const copy = this.convert(accountingData);
        return this.http.post(this.resourceUrl, copy).map((res: Response) => {
            const jsonResponse = res.json();
            this.convertItemFromServer(jsonResponse);
            return jsonResponse;
        });
    }

    update(accountingData: AccountingData): Observable<AccountingData> {
        const copy = this.convert(accountingData);
        return this.http.put(this.resourceUrl, copy).map((res: Response) => {
            const jsonResponse = res.json();
            this.convertItemFromServer(jsonResponse);
            return jsonResponse;
        });
    }

    find(id: number): Observable<AccountingData> {
        return this.http.get(`${this.resourceUrl}/${id}`).map((res: Response) => {
            const jsonResponse = res.json();
            this.convertItemFromServer(jsonResponse);
            return jsonResponse;
        });
    }

    query(req?: any): Observable<ResponseWrapper> {
        const options = createRequestOption(req);
        return this.http.get(this.resourceUrl, options)
            .map((res: Response) => this.convertResponse(res));
    }

    delete(id: number): Observable<Response> {
        return this.http.delete(`${this.resourceUrl}/${id}`);
    }

    search(req?: any): Observable<ResponseWrapper> {
        const options = createRequestOption(req);
        return this.http.get(this.resourceSearchUrl, options)
            .map((res: any) => this.convertResponse(res));
    }

    private convertResponse(res: Response): ResponseWrapper {
        const jsonResponse = res.json();
        for (let i = 0; i < jsonResponse.length; i++) {
            this.convertItemFromServer(jsonResponse[i]);
        }
        return new ResponseWrapper(res.headers, jsonResponse, res.status);
    }

    private convertItemFromServer(entity: any) {
        entity.createdDate = this.dateUtils
            .convertDateTimeFromServer(entity.createdDate);
        entity.lastUpdatedDate = this.dateUtils
            .convertDateTimeFromServer(entity.lastUpdatedDate);
    }

    private convert(accountingData: AccountingData): AccountingData {
        const copy: AccountingData = Object.assign({}, accountingData);

        copy.createdDate = this.dateUtils.toDate(accountingData.createdDate);

        copy.lastUpdatedDate = this.dateUtils.toDate(accountingData.lastUpdatedDate);
        return copy;
    }

    fetchCountandAmountByGroupId(acctRuleGroupId:any):Observable<Response>
    {
       
        return this.http.get(this.fetchAmountAndCountUrl+'?tenantId='+this.UserData.tenantId+'&groupId='
        +acctRuleGroupId)
            .map((res:Response) => {
                 return res.json();
            });
    };

    fetchRecordsByViewId(dataViewId:any,groupId:any,page:number,perPage:number):Observable<Response>
    {
       
        return this.http.get(this.fetchRecordsByViewIds+'?tenantId='+this.UserData.tenantId+'&dataViewId='
        +dataViewId+'&groupId='+groupId+'&page='+page+'&size='+perPage)
            .map((res:Response) => {
                 return res.json();
            });
                
    };

    fetchRecordsByViewIdAndStatus(dataViewId:any,groupId:any,status:any,page:number,perPage:number):Observable<Response>
    {
       
        return this.http.get(this.fetchRecordsByViewIds+'?tenantId='+this.UserData.tenantId+'&dataViewId='
        +dataViewId+'&status='+status+'&groupId='+groupId+'&page='+page+'&size='+perPage)
            .map((res:Response) => {
                 return res.json();
            });
                
    };

    fetchingAccSidebarColumns(dataViewId:any,groupId:any):Observable<Response>
    {
       
        return this.http.get(this.accountingSideBarURL+'?tenantId='+this.UserData.tenantId+'&viewId='
        +dataViewId+'&groupId='+groupId)
            .map((res:Response) => {
                 return res.json();
            });
                
    };

    fetchingAccSidebarColumnsByStatus(dataViewId:any,groupId:any,status:any):Observable<Response>
    {
       
        return this.http.get(this.accountingSideBarURL+'?tenantId='+this.UserData.tenantId+'&viewId='
        +dataViewId+'&groupId='+groupId+'&status='+status)
            .map((res:Response) => {
                 return res.json();
            });
                
    };

    fetchingColHeaders(groupId:any,viewId:any):Observable<Response>
    {
       
        return this.http.get(this.accColHeadersURL+'?tenantId='+this.UserData.tenantId+'&groupId='+groupId+'&viewId='
        +viewId)
            .map((res:Response) => {
                 return res.json();
            });
                
    };

    fetchAcctRecordsUsingCustomFilter(data: any): Observable<ResponseWrapper> {
        data.tenantId = this.UserData.tenantId;
        let copy: acctCustomFilters = Object.assign({}, data);
            return this.http.post(this.acctFilterRecordsURL, copy).map((res: Response) => {
                return res.json();
            }); 
    };

    postingAccountRecords(data: any): Observable<ResponseWrapper> {
             return this.http.post(this.postingAccoutningRecordsURL+'?tenantId='+this.UserData.tenantId+'&userId='+this.UserData.id, data).map((res: Response) => {
                return res.json();
            }); 
    }

    postingUnAccountRecords(data: any,dataViewId,groupId): Observable<ResponseWrapper> {
             return this.http.post(this.postingUnAccoutningRecordsURL+'?tenantId='+this.UserData.tenantId+'&dataViewId='+dataViewId+'&groupId='+groupId, data).map((res: Response) => {
                return res.json();
            }); 
    }
}
