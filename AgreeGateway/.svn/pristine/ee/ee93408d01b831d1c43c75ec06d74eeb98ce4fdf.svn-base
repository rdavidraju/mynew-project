<h1 md-dialog-title></h1>
<div md-dialog-content>
  <form novalidate #recFiltersForm="ngForm">
    <md-tab-group [selectedIndex]="selectedTab">
      <md-tab>
        <ng-template md-tab-label>
          <a class="hand " mdTooltip="Add Filter">
            <i class="fa fa-filter"></i>
          </a>
        </ng-template>
        <div class="demo-tab-content" style="padding-top: 17px;">
          <table>
            <thead class="text-nowrap">
              <tr>
                <th>Operator</th>
                <th>Value</th>
              </tr>
            </thead>
            <tbody class="text-nowrap">
              <tr>
                <td>
                  <md-select [(ngModel)]="data.sOperator" name="sOperator" #sOperator="ngModel" *ngIf="data.addFilter  == 'source'">
                    <md-option size="50" *ngFor="let operator of data.sOperatorList" [value]="operator.lookUpCode">{{operator.meaning}}</md-option>
                  </md-select>
                  <md-select [(ngModel)]="data.tOperator" name="tOperator" #tOperator="ngModel" *ngIf="data.addFilter  == 'target'">
                    <md-option size="50" *ngFor="let operator of data.tOperatorList" [value]="operator.lookUpCode">{{operator.meaning}}</md-option>
                  </md-select>
                </td>
                <td>
                  <md-input-container class="example-full-width" *ngIf="data.addFilter  == 'source'" >
                    <input mdInput [(ngModel)]="data.sValue" name="value" required #value="ngModel" [disabled]="!data.sOperator"> </md-input-container>

                  <md-input-container class="example-full-width" *ngIf="data.addFilter  == 'target'" >
                    <input mdInput [(ngModel)]="data.tValue" name="value" required #value="ngModel" [disabled]="!data.tOperator"> </md-input-container>
                </td>
              </tr>

            </tbody>
          </table>


        </div>
      </md-tab>
      <md-tab>
        <ng-template md-tab-label>
          <a class="hand " mdTooltip="Add Formula">
            <b>fx</b>
          </a>
        </ng-template>
        <div class="demo-tab-content" style="padding-top: 17px;">
          <div>
            <label class="control-label" style="font-size: 16px;">Select Function:
            </label>
            <md-select [(ngModel)]="data.isSFormula" style="width:230px;z-index: 100 !important;" [ngClass]="{'color-black' : isViewOnly}"
              name="sexcelexpression" #sexcelexpression="ngModel" *ngIf="data.addFilter  == 'source'">
              <md-option *ngFor="let excelexpression of data.excelFunctions" [value]="excelexpression.lookUpCode" (click)="data.sFormulaExpressionExample = excelexpression.description">
                {{ excelexpression.meaning }} </md-option>
            </md-select>
            <md-select [(ngModel)]="data.isTFormula" style="width:230px;z-index: 100 !important;" [ngClass]="{'color-black' : isViewOnly}"
              name="texcelexpression" #texcelexpression="ngModel" *ngIf="data.addFilter  == 'target'">
              <md-option *ngFor="let excelexpression of data.excelFunctions" [value]="excelexpression.lookUpCode" (click)="data.tFormulaExpressionExample = excelexpression.description">
                {{ excelexpression.meaning }} </md-option>
            </md-select>
          </div>
          <div *ngIf="data.isSFormula && data.addFilter  == 'source'" class="data-view-query-build">
            <textarea mdInput [(ngModel)]="data.sFormula" name="sFormula" #sFormula="ngModel"  required mdTooltip=""></textarea>
          </div>

          <div *ngIf="data.isTFormula && data.addFilter  == 'target'" class="data-view-query-build">
            <textarea mdInput [(ngModel)]="data.tFormula" name="tFormula" #tFormula="ngModel"  required mdTooltip=""></textarea>
          </div>

          <div *ngIf="data.isSFormula && data.addFilter  == 'source'" style="padding-top: 10px;">
            <span>Eg: {{data.sFormulaExpressionExample}}</span>
          </div>
          <div *ngIf="data.isTFormula && data.addFilter  == 'target'" style="padding-top: 10px;">
              <span>Eg: {{data.tFormulaExpressionExample}}</span>
            </div>

        </div>
      </md-tab>
      <md-tab>
        <ng-template md-tab-label>
          <a class="hand " mdTooltip="Add Tolerance">
            <b>T</b>
          </a>
        </ng-template>
        <div class="demo-tab-content" style="padding-top: 17px;">
          <table>
            <thead class="text-nowrap">
              <tr>
                <th>Type</th>
                <th>Range</th>
                <th></th>
              </tr>
            </thead>
            <tbody class="text-nowrap">
              <tr>
                <td>
                    
                  <md-select placeholder="Type" class="example-full-width"  [(ngModel)]="data.sToleranceType" name="stoleranceType"
                    *ngIf="data.addFilter  == 'source'" #stoleranceType="ngModel">
                    <md-option *ngFor="let toleranceType of data.stoleranceTypeLOV" [value]="toleranceType.lookUpCode" (click)="data.sToleranceTypeMeaning = toleranceType.meaning">
                    {{ toleranceType.meaning}} </md-option>
                  </md-select>

                  <md-select placeholder="Type" class="example-full-width"  [(ngModel)]="data.tToleranceType" name="ttoleranceType"
                    *ngIf="data.addFilter  == 'target'" #ttoleranceType="ngModel">
                    <md-option *ngFor="let toleranceType of data.ttoleranceTypeLOV" [value]="toleranceType.lookUpCode" (click)="data.tToleranceTypeMeaning = toleranceType.meaning">
                    {{ toleranceType.meaning}} </md-option>
                  </md-select>
                </td>
                <td *ngIf="data.sToleranceType && data.addFilter  == 'source'">
                  <div *ngFor="let operand of data.fromOperands" required class="occurnc-circle" [ngClass]="operand.value ? 'occ-active' : ''"
                    [mdTooltip]="operand.name" (click)="selectedFromOperand(operand,i)">{{operand.code}}</div>
                </td>
                <td *ngIf="data.tToleranceType && data.addFilter  == 'target'">
                  <div *ngFor="let operand of data.tFromOperands" required class="occurnc-circle" [ngClass]="operand.value ? 'occ-active' : ''"
                    [mdTooltip]="operand.name" (click)="selectedFromOperand(operand,i)">{{operand.code}}</div>
                </td>
                <td style="display: inline-flex;" *ngIf="data.sToleranceType && data.addFilter  == 'source'">

                  <!-- 
                    <md-input-container class="example-full-width">
                        <input mdInput [(ngModel)]="data.sToleranceOperatorFrom"  name="sFromOp" required #sFromOp="ngModel">
                     </md-input-container> -->

                  <md-input-container class="example-full-width">
                    <input mdInput [(ngModel)]="data.sToleranceValueFrom" placeholder="From" name="sFromValue" required #sFromValue="ngModel"> </md-input-container>
                </td>
                <td style="display: inline-flex;" *ngIf="data.tToleranceType && data.addFilter  == 'target'">

                  <!-- 
                     <md-input-container class="example-full-width">
                         <input mdInput [(ngModel)]="data.sToleranceOperatorFrom"  name="sFromOp" required #sFromOp="ngModel">
                      </md-input-container> -->

                  <md-input-container class="example-full-width">
                    <input mdInput [(ngModel)]="data.tToleranceValueFrom" placeholder="From" name="tFromValue" required #tFromValue="ngModel"> </md-input-container>
                </td>
                <td *ngIf="data.sToleranceType && data.addFilter  == 'source'">
                  <div *ngFor="let operand of data.toOperands" required class="occurnc-circle" [ngClass]="operand.value ? 'occ-active' : ''"
                    [mdTooltip]="operand.name" (click)="selectedToOperand(operand,i)">{{operand.code}}</div>
                </td>
                <td *ngIf="data.tToleranceType && data.addFilter  == 'target'">
                  <div *ngFor="let operand of data.tToOperands" required class="occurnc-circle" [ngClass]="operand.value ? 'occ-active' : ''"
                    [mdTooltip]="operand.name" (click)="selectedToOperand(operand,i)">{{operand.code}}</div>
                </td>
                <td *ngIf="data.sToleranceType && data.addFilter  == 'source'">

                  <!-- <md-input-container class="example-full-width">
                          <input mdInput [(ngModel)]="data.sToleranceOperatorTo"  name="sToOp" required #sToOp="ngModel"> </md-input-container> -->

                  <md-input-container class="example-full-width">
                    <input mdInput [(ngModel)]="data.sToleranceValueTo" placeholder="To" name="sToValue" required #sToValue="ngModel"> </md-input-container>
                </td>
                <td *ngIf="data.tToleranceType && data.addFilter  == 'target'">

                  <!-- <md-input-container class="example-full-width">
                            <input mdInput [(ngModel)]="data.sToleranceOperatorTo"  name="sToOp" required #sToOp="ngModel"> </md-input-container> -->

                  <md-input-container class="example-full-width">
                    <input mdInput [(ngModel)]="data.tToleranceValueTo" placeholder="To" name="tToValue" required #tToValue="ngModel"> </md-input-container>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </md-tab>
    </md-tab-group>
  </form>

</div>


<div md-dialog-actions align="center">
  <div>
    <button md-button [md-dialog-close]="data.ok" tabindex="2" [disabled]="!recFiltersForm.valid">Ok</button>
    <button md-button tabindex="3" [disabled]="!data.sOperator && !data.sValue" (click)="data.sOperator='';data.sValue=''">Clear</button>
    <button md-button [md-dialog-close]="data.cancel" tabindex="-1">Cancel</button>
  </div>
</div>