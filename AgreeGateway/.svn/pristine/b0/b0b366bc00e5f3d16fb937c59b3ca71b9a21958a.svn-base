package com.nspl.app.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.domain.UserRoleAssignment;

import com.nspl.app.repository.UserRoleAssignmentRepository;
import com.nspl.app.web.rest.util.HeaderUtil;
import io.github.jhipster.web.util.ResponseUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing UserRoleAssignment.
 */
@RestController
@RequestMapping("/api")
public class UserRoleAssignmentResource {

    private final Logger log = LoggerFactory.getLogger(UserRoleAssignmentResource.class);

    private static final String ENTITY_NAME = "userRoleAssignment";

    private final UserRoleAssignmentRepository userRoleAssignmentRepository;

    public UserRoleAssignmentResource(UserRoleAssignmentRepository userRoleAssignmentRepository) {
        this.userRoleAssignmentRepository = userRoleAssignmentRepository;
    }

    /**
     * POST  /user-role-assignments : Create a new userRoleAssignment.
     *
     * @param userRoleAssignment the userRoleAssignment to create
     * @return the ResponseEntity with status 201 (Created) and with body the new userRoleAssignment, or with status 400 (Bad Request) if the userRoleAssignment has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/user-role-assignments")
    @Timed
    public ResponseEntity<UserRoleAssignment> createUserRoleAssignment(@RequestBody UserRoleAssignment userRoleAssignment) throws URISyntaxException {
        log.debug("REST request to save UserRoleAssignment : {}", userRoleAssignment);
        if (userRoleAssignment.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new userRoleAssignment cannot already have an ID")).body(null);
        }
        UserRoleAssignment result = userRoleAssignmentRepository.save(userRoleAssignment);
        return ResponseEntity.created(new URI("/api/user-role-assignments/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert(ENTITY_NAME, result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /user-role-assignments : Updates an existing userRoleAssignment.
     *
     * @param userRoleAssignment the userRoleAssignment to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated userRoleAssignment,
     * or with status 400 (Bad Request) if the userRoleAssignment is not valid,
     * or with status 500 (Internal Server Error) if the userRoleAssignment couldn't be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PutMapping("/user-role-assignments")
    @Timed
    public ResponseEntity<UserRoleAssignment> updateUserRoleAssignment(@RequestBody UserRoleAssignment userRoleAssignment) throws URISyntaxException {
        log.debug("REST request to update UserRoleAssignment : {}", userRoleAssignment);
        if (userRoleAssignment.getId() == null) {
            return createUserRoleAssignment(userRoleAssignment);
        }
        UserRoleAssignment result = userRoleAssignmentRepository.save(userRoleAssignment);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert(ENTITY_NAME, userRoleAssignment.getId().toString()))
            .body(result);
    }

    /**
     * GET  /user-role-assignments : get all the userRoleAssignments.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of userRoleAssignments in body
     */
    @GetMapping("/user-role-assignments")
    @Timed
    public List<UserRoleAssignment> getAllUserRoleAssignments() {
        log.debug("REST request to get all UserRoleAssignments");
        return userRoleAssignmentRepository.findAll();
    }

    /**
     * GET  /user-role-assignments/:id : get the "id" userRoleAssignment.
     *
     * @param id the id of the userRoleAssignment to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the userRoleAssignment, or with status 404 (Not Found)
     */
    @GetMapping("/user-role-assignments/{id}")
    @Timed
    public ResponseEntity<UserRoleAssignment> getUserRoleAssignment(@PathVariable Long id) {
        log.debug("REST request to get UserRoleAssignment : {}", id);
        UserRoleAssignment userRoleAssignment = userRoleAssignmentRepository.findOne(id);
        return ResponseUtil.wrapOrNotFound(Optional.ofNullable(userRoleAssignment));
    }

    /**
     * DELETE  /user-role-assignments/:id : delete the "id" userRoleAssignment.
     *
     * @param id the id of the userRoleAssignment to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/user-role-assignments/{id}")
    @Timed
    public ResponseEntity<Void> deleteUserRoleAssignment(@PathVariable Long id) {
        log.debug("REST request to delete UserRoleAssignment : {}", id);
        userRoleAssignmentRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(ENTITY_NAME, id.toString())).build();
    }
}
