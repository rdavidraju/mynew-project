package com.nspl.app.web.rest;

import io.github.jhipster.web.util.ResponseUtil;

import java.math.BigInteger;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.SQLException;
import java.time.Instant;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.codahale.metrics.annotation.Timed;
import com.nspl.app.config.Constants;
import com.nspl.app.domain.Roles;
import com.nspl.app.domain.User;
import com.nspl.app.domain.UserRoleAssignment;
import com.nspl.app.repository.AuthorityRepository;
import com.nspl.app.repository.RolesRepository;
import com.nspl.app.repository.UserRepository;
import com.nspl.app.repository.UserRoleAssignmentRepository;
import com.nspl.app.security.AuthoritiesConstants;
import com.nspl.app.service.MailService;
import com.nspl.app.service.UserService;
import com.nspl.app.service.dto.UserAndUserRoleAssignmentDTO;
import com.nspl.app.service.dto.UserDTO;
import com.nspl.app.service.dto.UserRoleAssignmentDTO;
import com.nspl.app.service.dto.UserRolesDTO;
import com.nspl.app.service.util.RandomUtil;
import com.nspl.app.web.rest.dto.ErrorReport;
import com.nspl.app.web.rest.util.HeaderUtil;
import com.nspl.app.web.rest.util.PaginationUtil;
import com.nspl.app.web.rest.vm.ManagedUserVM;

/**
 * REST controller for managing users.
 * <p>
 * This class accesses the User entity, and needs to fetch its collection of authorities.
 * <p>
 * For a normal use-case, it would be better to have an eager relationship between User and Authority,
 * and send everything to the client side: there would be no View Model and DTO, a lot less code, and an outer-join
 * which would be good for performance.
 * <p>
 * We use a View Model and a DTO for 3 reasons:
 * <ul>
 * <li>We want to keep a lazy association between the user and the authorities, because people will
 * quite often do relationships with the user, and we don't want them to get the authorities all
 * the time for nothing (for performance reasons). This is the #1 goal: we should not impact our users'
 * application because of this use-case.</li>
 * <li> Not having an outer join causes n+1 requests to the database. This is not a real issue as
 * we have by default a second-level cache. This means on the first HTTP call we do the n+1 requests,
 * but then all authorities come from the cache, so in fact it's much better than doing an outer join
 * (which will get lots of data from the database, for each HTTP call).</li>
 * <li> As this manages users, for security reasons, we'd rather have a DTO layer.</li>
 * </ul>
 * <p>
 * Another option would be to have a specific JPA entity graph to handle this case.
 */
@RestController
@RequestMapping("/api")
public class UserResource {

    private final Logger log = LoggerFactory.getLogger(UserResource.class);

    private static final String ENTITY_NAME = "userManagement";

    private final UserRepository userRepository;

    private final MailService mailService;

    private final UserService userService;
    private final UserRoleAssignmentRepository userRoleAssignmentRepository;

    private final RolesRepository rolesRepository;
    
    public UserResource(UserRepository userRepository, MailService mailService,
            UserService userService,UserRoleAssignmentRepository userRoleAssignmentRepository,PasswordEncoder passwordEncoder,AuthorityRepository authorityRepository, RolesRepository rolesRepository) {

        this.userRepository = userRepository;
        this.mailService = mailService;
        this.userService = userService;
        this.userRoleAssignmentRepository =userRoleAssignmentRepository;
        this.passwordEncoder = passwordEncoder;
        this.authorityRepository = authorityRepository;
        this.rolesRepository = rolesRepository;
    }
    
    private final PasswordEncoder passwordEncoder;

    private final AuthorityRepository authorityRepository;

    /**
     * POST  /users  : Creates a new user.
     * <p>
     * Creates a new user if the login and email are not already used, and sends an
     * mail with an activation link.
     * The user needs to be activated on creation.
     *
     * @param managedUserVM the user to create
     * @return the ResponseEntity with status 201 (Created) and with body the new user, or with status 400 (Bad Request) if the login or email is already in use
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @PostMapping("/users")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity createUser(@Valid @RequestBody ManagedUserVM managedUserVM) throws URISyntaxException {
        log.debug("REST request to save User : {}", managedUserVM);

        if (managedUserVM.getId() != null) {
            return ResponseEntity.badRequest()
                .headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "idexists", "A new user cannot already have an ID"))
                .body(null);
        // Lowercase the user login before comparing with database
        } else if (userRepository.findOneByLogin(managedUserVM.getLogin().toLowerCase()).isPresent()) {
            return ResponseEntity.badRequest()
                .headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "userexists", "Login already in use"))
                .body(null);
        } else if (userRepository.findOneByEmail(managedUserVM.getEmail()).isPresent()) {
            return ResponseEntity.badRequest()
                .headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "emailexists", "Email already in use"))
                .body(null);
        } else {
            User newUser = userService.createUser(managedUserVM);
            mailService.sendCreationEmail(newUser);
            return ResponseEntity.created(new URI("/api/users/" + newUser.getLogin()))
                .headers(HeaderUtil.createAlert( "userManagement.created", newUser.getLogin()))
                .body(newUser);
        }
    }

    /**
     * PUT  /users : Updates an existing User.
     *
     * @param managedUserVM the user to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated user,
     * or with status 400 (Bad Request) if the login or email is already in use,
     * or with status 500 (Internal Server Error) if the user couldn't be updated
     */
    @PutMapping("/users")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity<UserDTO> updateUser(@Valid @RequestBody ManagedUserVM managedUserVM) {
        log.debug("REST request to update User : {}", managedUserVM);
        Optional<User> existingUser = userRepository.findOneByEmail(managedUserVM.getEmail());
        if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserVM.getId()))) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "emailexists", "Email already in use")).body(null);
        }
        existingUser = userRepository.findOneByLogin(managedUserVM.getLogin().toLowerCase());
        if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserVM.getId()))) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "userexists", "Login already in use")).body(null);
        }
        Optional<UserDTO> updatedUser = userService.updateUser(managedUserVM);

        return ResponseUtil.wrapOrNotFound(updatedUser,
            HeaderUtil.createAlert("userManagement.updated", managedUserVM.getLogin()));
    }

    /**
     * GET  /users : get all users.
     *
     * @param pageable the pagination information
     * @return the ResponseEntity with status 200 (OK) and with body all users
     */
    /*@GetMapping("/users")
    @Timed
    public ResponseEntity<List<UserDTO>> getAllUsers(@ApiParam Pageable pageable) {
        final Page<UserDTO> page = userService.getAllManagedUsers(pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/users");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }*/
  /*  @GetMapping("/users")
    @Timed
    public ResponseEntity<List<UserDTO>> getAllUsers(@ApiParam Pageable pageable) {
       // final Page<UserDTO> page = userService.getAllManagedUsers(pageable);
    	User currentUser = userService.getCurrentUser();
    	Long tenantId = currentUser.getTenantId();
    	log.info("Current User Tenant ID: "+ tenantId);
    	final Page<UserDTO> page = userService.getAllUsersByTenantId(pageable, tenantId);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(page, "/api/users");
        return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }
    */
    
    @GetMapping("/usersListWithRolesAndFunctions")
    @Timed
    public ResponseEntity<List<User>> fetchUsersWithRolesAndFunctions(@RequestParam(value = "page" , required = false) Integer offset,
			@RequestParam(value = "per_page", required = false) Integer limit) {
    	log.info("Rest request to fetch users and their roles");
    	User currentUser = userService.getCurrentUser();
    	List<User> usersList=new ArrayList<User>();
    	Long tenantId = currentUser.getTenantId();
    	log.info("Current User Tenant ID: "+ tenantId);//findAllByTenantIdOrderByCreatedDateDesc
    	PaginationUtil paginationUtil=new PaginationUtil();
		int maxlmt=paginationUtil.MAX_LIMIT;
		int minlmt=paginationUtil.MIN_OFFSET;
		log.info("maxlmt: "+maxlmt);
		Page<User> page = null;
		HttpHeaders headers = null;
		if(limit==null || limit<minlmt){
			usersList=userRepository.findAllByTenantIdOrderByCreatedDateDesc(tenantId);
			log.info("usersList :"+usersList.size());
			log.info("offset :"+offset);
			limit=usersList.size();
		}
		if(limit>maxlmt)
		{
			log.info("input limit exceeds maxlimit");
			page = userRepository.findAllByTenantIdOrderByCreatedDateDesc(tenantId,PaginationUtil.generatePageRequest2(offset, limit));
			try {
				headers = PaginationUtil.generatePaginationHttpHeaders2(page, "/api/fileTemplatesByTenantId",offset, limit);
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else{
			log.info("input limit is within maxlimit");
			page = userRepository.findAllByTenantIdOrderByCreatedDateDesc(tenantId,PaginationUtil.generatePageRequest(offset, limit));
			try {
				headers = PaginationUtil.generatePaginationHttpHeaderss(page, "/api/fileTemplatesByTenantId", offset, limit);
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return new ResponseEntity<>(page.getContent(), headers, HttpStatus.OK);
    }

    /**
     * @return a string list of the all of the roles
     */
    @GetMapping("/users/authorities")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public List<String> getAuthorities() {
        return userService.getAuthorities();
    }

    /**
     * GET  /users/:login : get the "login" user.
     *
     * @param login the login of the user to find
     * @return the ResponseEntity with status 200 (OK) and with body the "login" user, or with status 404 (Not Found)
     */
    @GetMapping("/users/{login:" + Constants.LOGIN_REGEX + "}")
    @Timed
    public ResponseEntity<UserDTO> getUser(@PathVariable String login) {
        log.debug("REST request to get User : {}", login);
        return ResponseUtil.wrapOrNotFound(
            userService.getUserWithAuthoritiesByLogin(login)
                .map(UserDTO::new));
    }

    /**
     * DELETE /users/:login : delete the "login" User.
     *
     * @param login the login of the user to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @DeleteMapping("/users/{login:" + Constants.LOGIN_REGEX + "}")
    @Timed
    @Secured(AuthoritiesConstants.ADMIN)
    public ResponseEntity<Void> deleteUser(@PathVariable String login) {
        log.debug("REST request to delete User: {}", login);
        userService.deleteUser(login);
        return ResponseEntity.ok().headers(HeaderUtil.createAlert( "userManagement.deleted", login)).build();
    }
    
    @PostMapping("/assignRolesToUser")
    @Timed
    public ErrorReport assignRolesToUser(@RequestBody List<UserRoleAssignment> userRoleAssignments ) throws URISyntaxException 
    {
    	ErrorReport errorReport = new ErrorReport();
    	errorReport.setTaskName("Assign Roles");
    	List<UserRoleAssignment> uRAs = userRoleAssignmentRepository.save(userRoleAssignments);
    	errorReport.setTaskStatus("Failure");
    	if(userRoleAssignments.size() == uRAs.size())
    	{
    		errorReport.setTaskStatus("Success");
    	}
    	return errorReport;
    }
    
    @GetMapping("/userById")
    @Timed  
    public User getUserById(@RequestParam Long id)
    {
    	User user=userRepository.findOne(id);
    	return user;
    }
    
    /**
     * Author: Shiva
     * Description: Creating Users and User Role Assignment Creation
     * @param UserAndUserRoleAssignmentDTO
     */
    @PostMapping("/userAndUserRoleAssignmentCreation")
    @Timed
    public ResponseEntity<HashMap> userAndUserRoleAssignmentCreation(@RequestBody UserAndUserRoleAssignmentDTO userNRoleAssignment, @RequestParam Long userId ) throws URISyntaxException 
    {
    	log.info("Rest API for User and User Role Assignment Creation");
    	User loggedInUser = userRepository.findOne(userId);
    	HashMap finalMap = new HashMap();
    	// Creating User
    	if(userNRoleAssignment.getId() != null)
    	{
    		User user = userRepository.findOne(userNRoleAssignment.getId());
    		if(user != null)
    		{
    			user.setId(user.getId());
    			if(userNRoleAssignment.getLogin() != null)
                user.setLogin(userNRoleAssignment.getLogin());
    			if(userNRoleAssignment.getFirstName() != null)
                user.setFirstName(userNRoleAssignment.getFirstName());
    			if(userNRoleAssignment.getLastName() != null)
                user.setLastName(userNRoleAssignment.getLastName());
    			if(userNRoleAssignment.getEmail() != null)
                user.setEmail(userNRoleAssignment.getEmail());
    			if(userNRoleAssignment.getImageUrl() != null)
                user.setImageUrl(userNRoleAssignment.getImageUrl());
                if (userNRoleAssignment.getLangKey() == null){
                    user.setLangKey("en"); // default language
                } else {
                    user.setLangKey(userNRoleAssignment.getLangKey());
                }
                if (userNRoleAssignment.getAuthorities() != null) {
                    user.setAuthorities(userNRoleAssignment.getAuthorities());
                }
                if(userNRoleAssignment.getPassword() != null)
                user.setPassword(passwordEncoder.encode(userNRoleAssignment.getPassword()));
                user.setResetKey(RandomUtil.generateResetKey());
                user.setResetDate(Instant.now());
                if(userNRoleAssignment.isActivated() == true || userNRoleAssignment.isActivated() == false)
                user.setActivated(userNRoleAssignment.isActivated());
                if(userNRoleAssignment.getTenantId() != null)
                user.setTenantId(userNRoleAssignment.getTenantId());
                user.setLastModifiedDate(Instant.now());
                if(loggedInUser != null)
                {
                    user.setLastModifiedBy(loggedInUser.getLogin());
                }
                User userNew =  userRepository.save(user);
                finalMap.put("id", userNew.getId());
                finalMap.put("firstName", userNew.getFirstName());
                return new ResponseEntity(finalMap, HttpStatus.OK);
    		}
    	}
    	else
    	{
            User user = new User();
            if(userNRoleAssignment.getLogin() != null)
            user.setLogin(userNRoleAssignment.getLogin());
            if(userNRoleAssignment.getFirstName() != null)
            user.setFirstName(userNRoleAssignment.getFirstName());
            if(userNRoleAssignment.getLastName() != null)
            user.setLastName(userNRoleAssignment.getLastName());
            if(userNRoleAssignment.getEmail() != null)
            user.setEmail(userNRoleAssignment.getEmail());
            if(userNRoleAssignment.getImageUrl() != null)
            user.setImageUrl(userNRoleAssignment.getImageUrl());
            if (userNRoleAssignment.getLangKey() == null) {
                user.setLangKey("en"); // default language
            } else {
                user.setLangKey(userNRoleAssignment.getLangKey());
            }
            if (userNRoleAssignment.getAuthorities() != null) {
                user.setAuthorities(userNRoleAssignment.getAuthorities());
            }
            if(userNRoleAssignment.getPassword() != null)
            user.setPassword(passwordEncoder.encode(userNRoleAssignment.getPassword()));
            user.setResetKey(RandomUtil.generateResetKey());
            user.setResetDate(Instant.now());
            if(userNRoleAssignment.isActivated() == true || userNRoleAssignment.isActivated() == false)
            user.setActivated(userNRoleAssignment.isActivated());
            if(userNRoleAssignment.getTenantId() != null)
            user.setTenantId(userNRoleAssignment.getTenantId());
            User userNew =  userRepository.save(user);       
            if(userNew != null)
            {
                List<UserRoleAssignmentDTO> userRoles = userNRoleAssignment.getUserRoleAssignments();
                if(userRoles.size()>0)
                {
                	for(UserRoleAssignmentDTO userRole : userRoles)
                	{
                		UserRoleAssignment usrRlAss = new UserRoleAssignment();
                		usrRlAss.setUserId(userNew.getId());
                		if(userRole.getRoleId() != null)
                		usrRlAss.setRoleId(userRole.getRoleId());
                		if(userRole.getActiveFlag() != null)
                		{
                			usrRlAss.setActiveFlag(userRole.getActiveFlag());
                		}
                		else
                		{
                			usrRlAss.setActiveFlag(null);
                		}
                		if(userRole.getDeleteFlag() != null)
                		{
                			usrRlAss.setDeleteFlag(userRole.getDeleteFlag());
                		}
                		else
                		{
                			usrRlAss.setDeleteFlag(null);
                		}
                		if(userRole.getStartDate() != null)
                		usrRlAss.setStartDate(userRole.getStartDate());
                		if(userRole.getEndDate() != null)
                		usrRlAss.setEndDate(userRole.getEndDate());
                		usrRlAss.setCreationDate(ZonedDateTime.now());
                		usrRlAss.setLastUpdatedDate(ZonedDateTime.now());
                		if(userId != null)
                		{
                			usrRlAss.setAssignedBy(userId);
                			usrRlAss.setCreatedBy(userId);
                			usrRlAss.setLastUpdatedBy(userId);
                		}
                		UserRoleAssignment userRoleAssignment = userRoleAssignmentRepository.save(usrRlAss);
                	}
                }
                finalMap.put("id", userNew.getId());
                finalMap.put("firstName", userNew.getFirstName());
                return new ResponseEntity(finalMap, HttpStatus.OK);
            }
    	}
    	return null;
    }
    
    /**
     * Author: Shiva
     * Description: Fetching User Details, Roles which are assigned to that particular user based on user id.
     * @param userId
     */
    @GetMapping("/getLoggedInUserRolesDetails")
    @Timed
    public UserRolesDTO getReconColumnAlignmentInfo() throws ClassNotFoundException, SQLException {
    	log.info("Rest API for fething currently logged in user roles details");
    	UserRolesDTO result = new UserRolesDTO();
    	User currentUser = userService.getCurrentUser();
    	log.info("Currently logged in user id: "+ currentUser.getId()+", Tenant ID: "+ currentUser.getTenantId());
    	User user = userRepository.findOne(currentUser.getId());
    	List<Roles> roles = new ArrayList<Roles>();
    	if(user != null)
    	{
    		result.setId(user.getId());
    		result.setLogin(user.getLogin());
    		result.setFirstName(user.getFirstName());
    		result.setLastName(user.getLastName());
    		result.setEmail(user.getEmail());
    		result.setImageUrl(user.getImageUrl());
    		result.setActivated(user.getActivated());
    		result.setLangKey(user.getLangKey());
    		result.setActivationKey(user.getActivationKey());
    		result.setResetKey(user.getResetKey());
    		result.setCreatedBy(user.getCreatedBy());
    		result.setCreatedDate(user.getCreatedDate());
    		result.setResetDate(user.getResetDate());
    		result.setLastModifiedBy(user.getLastModifiedBy());
    		result.setLastModifiedDate(user.getLastModifiedDate());
    		result.setTenantId(user.getTenantId());
    		List<BigInteger> roleIds = userRoleAssignmentRepository.fetchRoleIdsByUserId(currentUser.getId());
    		if(roleIds.size()>0)
    		{
    			for(BigInteger roleId : roleIds)
    			{
    				Roles role = rolesRepository.findOne(roleId.longValue());
    				if(role != null)
    				{
    					roles.add(role);
    				}
    			}
    		}
    		result.setUserRoleAssignments(roles);
    	}
    	return result;
    }
    
    /**
     * Author: Shiva
     * Description: Creating or Updating User Roles
     * @param List<Roles>
     */
    @PostMapping("/postingUserRoleAssignment")
    @Timed
    public void userAndUserRoleAssignmentCreation(@RequestBody List<Roles> roles) throws URISyntaxException 
    {
    	log.info("Rest API for creating or updating user roles");
    	User currentUser = userService.getCurrentUser();
    	log.info("Currently logged in user id: "+ currentUser.getId()+", tenant id: "+ currentUser.getTenantId());
    	List<BigInteger> roleIds = userRoleAssignmentRepository.fetchRoleIdsByUserId(currentUser.getId());
    	for(Roles role : roles)
    	{
    		if(roleIds.contains(new BigInteger(role.getId().toString())))
   			{ // Updating existing record
    			log.info("Updating record "+role.getId());
   				UserRoleAssignment ura = userRoleAssignmentRepository.findByUserIdAndRoleId(currentUser.getId(), role.getId());
   				if(ura != null)
   				{
    				ura.setId(ura.getId());
    				ura.setAssignedBy(currentUser.getId());
    				ura.setLastUpdatedBy(currentUser.getId());
    				ura.setLastUpdatedDate(ZonedDateTime.now());
    				ura.setActiveFlag(true);	// Need to modify
    				ura.setStartDate(role.getStartDate());
   					ura.setEndDate(role.getEndDate());
   					userRoleAssignmentRepository.save(ura);
   					roleIds.remove(new BigInteger(role.getId().toString()));
   				}
   			}
   			else
   			{	// Creating new record
   				log.info("Creating Record "+role.getId());
   				UserRoleAssignment newURA = new UserRoleAssignment();
   				newURA.setUserId(currentUser.getId());
    			newURA.setRoleId(role.getId());
    			newURA.setAssignedBy(currentUser.getId());
    			newURA.setCreatedBy(currentUser.getId());
    			newURA.setLastUpdatedBy(currentUser.getId());
    			newURA.setCreationDate(ZonedDateTime.now());
   				newURA.setLastUpdatedDate(ZonedDateTime.now());
   				newURA.setActiveFlag(true);	// Need to modify
   				newURA.setStartDate(role.getStartDate());
   				newURA.setEndDate(role.getEndDate());
    			userRoleAssignmentRepository.save(newURA);
    		}
    	}
    	if(roleIds.size()>0)	// Deleting un-assigned records
   		{
   			for(BigInteger roleId : roleIds)
   			{
   				UserRoleAssignment ura = userRoleAssignmentRepository.findByUserIdAndRoleId(currentUser.getId(), roleId.longValue());
    			if(ura != null)
    			{
    				userRoleAssignmentRepository.delete(ura.getId());
    			}
    		}
   		}
   }

}
