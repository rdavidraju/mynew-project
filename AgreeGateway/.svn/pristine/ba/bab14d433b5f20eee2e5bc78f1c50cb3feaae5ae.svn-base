import { Component, DoCheck, KeyValueDiffers, OnInit, OnDestroy, OnChanges, Input } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Response } from '@angular/http';

import { Observable } from 'rxjs/Rx';
import { NgbActiveModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';
import { JhiEventManager, JhiAlertService } from 'ng-jhipster';

import { FileTemplates } from './file-templates.model';
import { LineInfo } from './LineInfo.model';
import { FileTemplatesPopupService } from './file-templates-popup.service';
import { FileTemplatesService } from './file-templates.service';
import { NgbDatepickerConfig, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';
import { Subscription } from 'rxjs/Subscription';
import { Router, NavigationEnd } from '@angular/router';
import { FileTemplateLinesService } from '../file-template-lines/file-template-lines.service';
import { FileTemplateLines } from '../file-template-lines/file-template-lines.model';
import { SourceProfileFileAssignments } from '../source-profile-file-assignments/source-profile-file-assignments.model';
@Component({
    selector: 'jhi-file-templates-dialog',
    templateUrl: './file-templates-dialog.component.html'
})
export class FileTemplatesDialogComponent implements OnInit {

    @Input() temp: FileTemplates;
    @Input() saveTemplateDetails: FileTemplates;
    startDate: any;
    fileTemplates: FileTemplates = {};
    authorities: any[];
    foods: any[];

    associatedprofiles: any[];
    isSaving: boolean;
    startDate1 = {
        year: 2018,
        month: 2
    }
    editFun: boolean = false;;
    detailFun: boolean = false;
    createFun: boolean = true;
    endDateConfig: NgbDatepickerConfig;
    inputEnabled: boolean = false;
    subscription: Subscription;
    loginFormVisible: boolean;
    output: any;
    differ: any;
    differ1: any;
    templateId: any;
    tempEdit: boolean = false;
    tempNew: boolean = false;

    containsObj: boolean = false;
    convertedStartDate: any;
    convertedEndDate: any;
    staticStartDate = { "year": 2017, "month": 7, "day": 6 };
    temp_id: any = [];
    closeEdit: boolean = false;
    currentBool: boolean;
    editLine: boolean = false;
    detailLine: boolean = false;

    newLineClose: boolean = false;

    newLines: LineInfo[] = [];

    linesinfo: FileTemplateLines[] = [];
    templateLines: LineInfo[] = [];
    lineInfo: LineInfo = {};
    lineSaveButton: boolean = false;
    lineDelButton: boolean = false;
    linesSaveAll: boolean = false;
    newLineButton: boolean = false;
    iter: any = 0;
    lineEdit: boolean = false;
    tempObj: LineInfo = {};
    enablNewButton: boolean = false;
    enableDeleteButton: boolean = false;

    profilesList: any = [];
    Frequencylist: any[];


    //Line Info variables
    fileTemplateLines: FileTemplateLines  [];
    sourceProfilesAdded: SourceProfileFileAssignments = {};
    sourceProfileAssignment: boolean = false;
    displaySelectedProfile: boolean = false;
    selectedProfileName: any;
    //    myConfigDate:NgbDatepickerConfig;

    constructor(
        private differs: KeyValueDiffers,
        private config: NgbDatepickerConfig,
        public activeModal: NgbActiveModal,
        private alertService: JhiAlertService,
        private router: Router,
        private fileTemplatesService: FileTemplatesService,
        private fileTemplatesLinesService: FileTemplateLinesService,
        private eventManager: JhiEventManager,
        private route: ActivatedRoute
    ) {
        this.config.minDate = { year: 1950, month: 1, day: 1 };
        this.config.maxDate = { year: 2099, month: 12, day: 31 };
        this.loginFormVisible = false;
        //this.fileTemplatesService.loginChanged.subscribe(value => {this.loginFormVisible = !value;})
        this.differ = differs.find({}).create(null);
        this.differ1 = differs.find({}).create(null);
    }
    ngDoCheck() {

        var changes = this.differ.diff(this.temp);
        var changesForSave = this.differ1.diff(this.saveTemplateDetails);

        if (changesForSave) {

            changesForSave.forEachChangedItem(r => {
                console.log('changed in new', r.currentValue);
                console.log('jsn of temp obj' + (this.fileTemplates.templateName));
                //                console.log(' changed value of save'+ this.saveTemplateDetails );
                this.saveTemplate();
            }
            );
            changesForSave.forEachAddedItem(r => {
                console.log('added in new', r.currentValue);

                console.log('jsn of tempadded obj' + JSON.stringify(this.fileTemplates));
                this.saveTemplate();
                //                 this.saveTemplateDetails  = r.currentValue;
                //                console.log(' changed value of save'+ this.saveTemplateDetails );
                //                  this.saveTemplate();
            }
            );
            changesForSave.forEachRemovedItem(r => console.log('removed in edit value isss' + r.currentValue));
        } else {

            // console.log('nothng chngd in edit');
        }
        if (changes) {

            changes.forEachChangedItem(r => {
                console.log('changed in edit', r.currentValue);

                this.templateId = r.currentValue;
                console.log(' this.templateId in edit' + this.templateId);
                //this.fileTemplates=[];
                this.fetchTemplateById(this.templateId);;
                this.tempEdit = true;
            }
            );
            changes.forEachAddedItem(r => {
                this.templateId = r.currentValue;
                console.log(' this.templateId in edit' + this.templateId);
                // this.fileTemplates=[];
                this.fetchTemplateById(this.templateId);;
                this.tempEdit = true;
            }
            );
            changes.forEachRemovedItem(r => {

            });
        } else {

            // console.log('nothng chngd in edit');
        }
    }
    saveTemplate() {
        console.log('file temp obj ng model template' + JSON.stringify(this.fileTemplates));
        this.fileTemplatesService.update(this.fileTemplates).subscribe(
            (res: FileTemplates) => {
                console.log('response after update is;' + JSON.stringify(res));
                this.fileTemplates = res;
                this.router.navigate(['/file-templates', this.fileTemplates.id]);
                //             this.router.navigate(['/file-templates'],
                //           {queryParams: {
                //               id: this.fileTemplates.id
                //                          }
                //           });
            }

        );
    }
    /**
    * Author : Shobha
    * fetch template by id
    */
    fetchTemplateById(id: any) {

        console.log('fetch by id' + id);
        this.fileTemplatesService.fetchById(id).subscribe(
            (res: FileTemplates) => {
                this.fileTemplates = res;
                console.log('fetched obj in edit');
                console.log('fileTemplates.templateName obj is in edit' + JSON.stringify(this.fileTemplates));


                let startDate = this.fileTemplatesService.convertDate(this.fileTemplates.startDate);
                this.fileTemplates.startDate = startDate;

                console.log('startDate print' + JSON.stringify(this.convertedStartDate));

                let endDate = this.fileTemplatesService.convertDate(this.fileTemplates.endDate);
                this.fileTemplates.endDate = endDate;

                if (this.fileTemplates) {
                    console.log();
                    this.containsObj = true;
                    this.fileTemplatesLinesService.fetchTemplateLinesByTemplateId(id).subscribe((res: any) => {
                        console.log('file template lines');
                        this.fileTemplateLines = res;
                        // this.templateLines =res;
                        console.log('lines returned in edit:' + JSON.stringify(this.fileTemplateLines));
                    });
                }
                console.log(' this.containsDetObj' + this.containsObj);
            }

        );

    }
    addLinee() {
        console.log('add new line');
        let previousLine: LineInfo = {};
        previousLine = this.linesinfo[this.linesinfo.length];
        console.log('previousLine' + JSON.stringify(previousLine));
        this.iter = this.iter + 1;
        if (previousLine) {
            previousLine.edit = false;
        }
        let newLine = {
            "No": this.iter,
            "edit": true
        };
        this.linesinfo.push(newLine);
        if (this.linesinfo.length > 0)
            this.setAsLastLine();
        if (this.linesinfo.length > 1)
            this.enableDeleteButton = true;
    }
    setAsLastLine() {
        console.log('set as last line');
        let lengthOfLines = this.linesinfo.length;
        console.log('lengthOfLines' + lengthOfLines);
        console.log('  this.linesinfo[lengthOfLines].lastLine' + this.linesinfo[lengthOfLines - 1].lastLine);
        this.linesinfo.forEach(line => {
            line.lastLine = false;
        });
        this.linesinfo[lengthOfLines - 1].lastLine = true;
    }
    saveSingleLine(line: any) {
        console.log('save single line');
        //push to templatelines
        line.edit = false;
        // this.templateLines.push(line);
        //remove from linesinfo
        this.linesinfo.splice(this.linesinfo.indexOf(line), 1);
        if (this.templateLines.length == 1) {
            console.log('only one line exists');
            // this.addLinee();
        }
    }
    saveAll() {
        console.log('save all' + JSON.stringify(this.linesinfo));
        this.linesinfo.forEach(line => {
            line.edit = false;
        });
        this.fileTemplatesLinesService.postTemplateLines(this.linesinfo).subscribe((res: Response) => {
            console.log('response after save' + res);
        });
        this.templateLines = this.templateLines.concat(this.linesinfo);
        this.linesinfo = [];

        this.addLinee();
    }
    removeLine(line: any) {
        console.log('deleteLine' + JSON.stringify(line));
        this.linesinfo.splice(this.linesinfo.indexOf(line), 1);
        if (this.linesinfo.length == 0) {
            this.addLinee();
        }
    }
    editLineInfo(lineInfo: any) {
        console.log('edit line' + JSON.stringify(lineInfo));
        this.editLine = true;
        let index = this.templateLines.indexOf(lineInfo);
        this.templateLines[index].edit = true;
        console.log('all tewm' + JSON.stringify(this.templateLines));
        this.tempObj = Object.assign({}, this.templateLines[index]);
        console.log('val in temp list' + JSON.stringify(this.tempObj));
    }
    cancelSaving(lines: any) {
        console.log('close saving' + JSON.stringify(this.tempObj));
        let index = this.templateLines.indexOf(lines);
        this.templateLines[index] = this.tempObj;
        this.templateLines[index].edit = false;
    }
    close() {
        console.log('close model');
        if (this.fileTemplates.id)
            this.router.navigate(['/file-templates', this.fileTemplates.id]);
        else
            this.router.navigate(['/file-templates']);
    }

    selectedProfile(profile: any) {
        console.log('selected profile is' + profile);
        this.displaySelectedProfile = true;
        this.selectedProfileName = profile;
    }
    assignProfiles() {
        console.log('assign profiles' + JSON.stringify(this.sourceProfilesAdded));
    }
    assignSourceProfiles() {
        console.log('assign prof');
        this.sourceProfileAssignment = true;
    }
    changeMinDate() {
        this.config.minDate = this.startDate;
    }

    resetMinDate() {
        this.config.minDate = { year: 1950, month: 1, day: 1 };
    }
    ngOnInit() {
        this.subscription = this.route.params.subscribe(params => {
            if (params['id']) {
                this.fetchTemplateById(params['id']);
                this.tempEdit = true;
            }
            else {
                console.log('in else dilog');
            }
        });
        this.isSaving = false;
        this.authorities = ['ROLE_USER', 'ROLE_ADMIN'];


        this.foods = [
            { value: 'del', viewValue: 'Delimiter' },
            { value: 'type2', viewValue: 'Type 2' },
            { value: 'type3', viewValue: 'Type 3' }
        ];
        this.addLinee();
        this.newLineButton = true;
        this.profilesList = [

            {
                "id": 1,
                "name": "profile-1"
            },
            {
                "id": 2,
                "name": "profile-2"
            },
            {
                "id": 3,
                "name": "profile-3"
            },
            {
                "id": 4,
                "name": "profile-4"
            },
            {
                "id": 5,
                "name": "profile-5"
            },
        ];
        this.Frequencylist = [

            {
                "id": 1,
                "name": "Daily"
            },
            {
                "id": 2,
                "name": "Weekly"
            },
            {
                "id": 3,
                "name": "Fortnight"
            },
            {
                "id": 4,
                "name": "Monthly"
            }
        ];
    }

    clear() {
        this.activeModal.dismiss('cancel');
    }

    save() {
        this.isSaving = true;
        if (this.fileTemplates.id !== undefined) {
            this.subscribeToSaveResponse(
                this.fileTemplatesService.update(this.fileTemplates));
        } else {
            this.subscribeToSaveResponse(
                this.fileTemplatesService.create(this.fileTemplates));
        }
    }

    private subscribeToSaveResponse(result: Observable<FileTemplates>) {
        result.subscribe((res: FileTemplates) =>
            this.onSaveSuccess(res), (res: Response) => this.onSaveError(res));
    }

    private onSaveSuccess(result: FileTemplates) {
        this.eventManager.broadcast({ name: 'fileTemplatesListModification', content: 'OK' });
        this.isSaving = false;
        this.activeModal.dismiss(result);
    }

    private onSaveError(error) {
        try {
            error.json();
        } catch (exception) {
            error.message = error.text();
        }
        this.isSaving = false;
        this.onError(error);
    }

    private onError(error) {
        this.alertService.error(error.message, null, null);
    }
}

@Component({
    selector: 'jhi-file-templates-popup',
    template: ''
})
export class FileTemplatesPopupComponent implements OnInit, OnDestroy {
    modalRef: NgbModalRef;
    routeSub: any;

    constructor(
        private route: ActivatedRoute,
        private fileTemplatesPopupService: FileTemplatesPopupService
    ) { }

    ngOnInit() {
        this.routeSub = this.route.params.subscribe((params) => {
            if (params['id']) {
                this.fileTemplatesPopupService
                    .open(FileTemplatesDialogComponent as Component, params['id']);
            } else {
                this.fileTemplatesPopupService
                    .open(FileTemplatesDialogComponent as Component);
            }
        });
    }

    ngOnDestroy() {
        //this.routeSub.unsubscribe();
    }
}
