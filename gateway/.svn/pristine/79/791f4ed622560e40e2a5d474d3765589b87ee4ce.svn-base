<div style="height: 100%; width: 100%" class="header-tabs-styles">
		<!-- <vertical-split-pane primary-component-minsize="50" primary-component-initialratio="0.2" [primary-component-toggled-off]="isVisibleA"> -->
			<!-- <div id="sticky" class="leftpane split-pane-content-primary" *ngIf="!isCreateNew" style="min-height: calc(100vh - 130px);">
				<rule-group-side-bar> </rule-group-side-bar>
			</div> -->
			<div class="split-pane-content-secondary rightpane">
	
				<div class="component-body approvalGrp">
					<!-- <div style="margin:0px 16px !important;position: sticky;	z-index: 3;top: 40px;background-color: white;padding-bottom: 20px;border-bottom: 1px solid lightgray;box-shadow: 0px 0px 5px 0px rgba(209,209,209,1)"> -->
					<div *ngIf="ruleGroupService.showHeader">
						<div class="display-flex" style="border-bottom: 1px solid #ebebeb;padding-top: 10px;">
	
							<!-- <div class="col-lg-8 col-md-8 col-sm-11 circular-items " style="padding-left: 0px" *ngIf="isCreateNew">
	
								<div *ngFor="let ruleGrpType of ruleGroupTypes" class="rule-tabs hand" required [ngClass]="ruleGrpType.value ? 'occ-active' : ''"
								 (click)="SelectRuleGroupType(ruleGrpType)">
									<p style="margin:0px;">{{ruleGrpType.name}}</p>
								</div>
							</div> -->
	
							<div class="col-lg-8 col-md-8 col-sm-11 circular-items" >
								<h4 style="padding-left: 17px;" *ngIf="isCreateNew && ruleGroupService.ruleGroup.rulePurpose === 'RECONCILIATION'">Enter Reconciliation Rule Set Details</h4>
								<h4 style="padding-left: 17px;" *ngIf="isEdit && ruleGroupService.ruleGroup.rulePurpose === 'RECONCILIATION'">Edit Reconciliation Rule Set Details</h4>
								<h4 style="padding-left: 17px;" *ngIf="isViewOnly && ruleGroupService.ruleGroup.rulePurpose === 'RECONCILIATION'">Reconciliation Rule Set Details</h4>
								<h4 style="padding-left: 17px;" *ngIf="isCreateNew && ruleGroupService.ruleGroup.rulePurpose === 'ACCOUNTING'">Enter Accounting Rule Set Details</h4>
								<h4 style="padding-left: 17px;" *ngIf="isEdit && ruleGroupService.ruleGroup.rulePurpose === 'ACCOUNTING'">Edit Accounting Rule Set Details</h4>
								<h4 style="padding-left: 17px;" *ngIf="isViewOnly && ruleGroupService.ruleGroup.rulePurpose === 'ACCOUNTING'">Accounting Rule Set Details</h4>
								<h4 style="padding-left: 17px;" *ngIf="isCreateNew && ruleGroupService.ruleGroup.rulePurpose === 'APPROVALS'">Enter Approval Rule Set Details</h4>
								<h4 style="padding-left: 17px;" *ngIf="isEdit && ruleGroupService.ruleGroup.rulePurpose === 'APPROVALS'">Edit Approval Rule Set Details</h4>
								<h4 style="padding-left: 17px;" *ngIf="isViewOnly && ruleGroupService.ruleGroup.rulePurpose === 'APPROVALS'">Approval Rule Set Details</h4>

								<!-- <div *ngFor="let ruleGrpType of ruleGroupTypes" class="rule-tabs" required [ngClass]="ruleGrpType.value ? 'occ-active' : ''">
									<p style="margin:0px;">{{ruleGrpType.name}}</p>
								</div> -->
	
							
							</div>
							<!-- <div class="display-flex col-lg-4 col-md-4 col-sm-6 col-xs-6 " style="margin-top: 6px;" *ngIf="isCreateNew">
									<div *ngFor="let ruleGrpType of ruleGroupTypes" style="margin-top: 6px;font-weight: bold;color: black;margin: 0px 4px;width: 91px !important;height: 26px !important;border-radius: 17% !important;" required class="occurnc-circle" [ngClass]="ruleGrpType.value ? 'occ-active' : ''"
									 [mdTooltip]="ruleGrpType.name" (click)="SelectRuleGroupType(ruleGrpType)">{{ruleGrpType.name}}</div>
								</div>
								<div class="display-flex col-lg-4 col-md-4 col-sm-6 col-xs-6 pageTitle " *ngIf="!isCreateNew">
									<div *ngFor="let ruleGrpType of ruleGroupTypes" style="margin-top: 6px;font-weight: bold;color: black;margin: 0px 4px;width: 91px !important;height: 26px !important;
									border-radius: 17% !important;" required class="occurnc-circle" [ngClass]="ruleGrpType.value ? 'occ-active' : ''"
									 [mdTooltip]="ruleGrpType.name">{{ruleGrpType.name}}</div>
	
									 <h3 style="margin-left: 13px">Process</h3>
								</div>
								 -->
							<div class="col-lg-4 col-md-4 col-sm-6 col-xs-6">
								<div class="pull-right">
									<!-- <button md-icon-button class=" color-green" *ngIf="!isViewOnly && ruleGroupForm.valid &&  rule.valid && !duplicateRuleGroupName &&
										 ((this.ruleGroupService.ruleGroupRulesAndConditions.rules && this.ruleGroupService.ruleGroupRulesAndConditions.rules.length>1 )||
										  (this.ruleGroupService.accountingRuleGroup.rules && this.ruleGroupService.accountingRuleGroup.rules.length>1 )||
										   ( this.ruleGroupService.approvalRuleGRoupWithRules.rules && this.ruleGroupService.approvalRuleGRoupWithRules.rules.length>1))"
										 aria-hidden="true" mdTooltip="Save Rule Group" (click)="setPriority()">
										
											<md-icon>save</md-icon>
										</button> -->
									<!-- <button md-icon-button class=" color-green" *ngIf="!isViewOnly && ruleGroupForm.valid &&  rule.valid && !duplicateRuleGroupName && 
										((this.ruleGroupService.ruleGroupRulesAndConditions.rules && this.ruleGroupService.ruleGroupRulesAndConditions.rules.length ==1 ) ||
										 (this.ruleGroupService.accountingRuleGroup.rules && this.ruleGroupService.accountingRuleGroup.rules.length==1 )|| 
										 (this.ruleGroupService.approvalRuleGRoupWithRules.rules && this.ruleGroupService.approvalRuleGRoupWithRules.rules.length==1))"
										 aria-hidden="true" mdTooltip="Save Rule Group" (click)="saveRuleGroup()">
										
											<md-icon>save</md-icon>
										</button> -->
									<!-- <div class="col-md-1" > -->
									<!-- <div style="padding-top: 11px;" *ngIf="isEdit"> -->
	
									<!-- </div> -->
									<!-- </div> -->
	
									<!-- <div class="col-md-1" *ngIf="isViewOnly"> -->
									<!-- <div *ngIf="isViewOnly"> -->
	
									<!-- </div> -->
	
									<!-- </div> -->
	
								
									<button md-icon-button (click)="setPriority();setRulePriority=true;" mdTooltip="Update Priority" *ngIf="isViewOnly">
										<md-icon>swap_vert</md-icon>
									</button>
									<button md-icon-button [routerLink]="['/rule-group', {outlets: {'content': [ruleGroupService .ruleGroup.id]+'/copyedit'}}]"
									 *ngIf="isViewOnly && commonService.reconToRule == false && commonService.acctToRule == false" mdTooltip="Copy Process"> 
										<md-icon>content_copy</md-icon>
									</button>
									
									<button md-icon-button class=" color-green" *ngIf="!isViewOnly && ruleGroupForm.valid &&  rule.valid && !duplicateRuleGroupName" aria-hidden="true"
									 mdTooltip="Save Rule Group" (click)="saveRuleGroup()">
										<md-icon>save</md-icon>
									</button>
									<button *ngIf="!isViewOnly && ((!ruleGroupForm.valid) ||( !rule.valid )|| duplicateRuleGroupName ) " md-icon-button class=" color-gray" aria-hidden="true"
									 mdTooltip="Fill mandatory fields" (click)="validateForm()">
										<md-icon>save</md-icon>
									</button>
	
									<button class="" md-icon-button [routerLink]="['/rule-group', {outlets: {'content': [ruleGroupService .ruleGroup.id]+'/edit'}}]"
									 *ngIf="isViewOnly" mdTooltip="Edit">
										<md-icon>mode_edit</md-icon>
									</button>
									<!-- [routerLink]="['/rule-group', {outlets: {'content': [ruleGroupService .ruleGroup.id]+'/details'}}]" 
									['/rule-group', {outlets: {'content':  [ruleGroupService .ruleGroup.rulePurpose]+'/list'}}]" -->
									<!-- <button md-icon-button class=" color-gray" [routerLink]="['/rule-group', {outlets: {'content':  [ruleGroupService .ruleGroup.rulePurpose]+'/list'}}]"								 
									 *ngIf="isEdit" mdTooltip="Cancel">
										<md-icon>clear</md-icon>
									</button> -->
									<button md-icon-button class="color-gray" [routerLink]="['/rule-group', {outlets: {'content':  [ruleGroupService .ruleGroup.rulePurpose]+'/list'}}]" *ngIf="isCreateNew || isEdit"
									 mdTooltip="Cancel">
										<md-icon>clear</md-icon>
									</button>
									<button class="" md-icon-button (click)="routingWithCondition();" *ngIf="isViewOnly"
									 [mdTooltip]="recActToolTip">
										<md-icon> clear</md-icon>
									</button>
								</div>
							</div>
						</div>
						<form novalidate #ruleGroupForm="ngForm" >
							<br>
							<div class="row" *ngIf="ruleGroupService && ruleGroupService.ruleGroup"> 
								<!--<div class="col-md-1 col-sm-4 col-xs-12  ">
										 <md-select placeholder="Process type" [(ngModel)]="ruleGroupService .ruleGroup.rulePurpose" (change)="SelectRuleGroupType()"
										 [ngClass]="{'color-black' : isViewOnly}" [disabled]="!isCreateNew" name="ruleGroupType" required #ruleGroupType="ngModel"
										 [style.width]="'100%'">
											<md-option *ngFor="let type of ruleGroupTypes" [value]="type.lookUpCode">
												{{ type.meaning}} </md-option>
										</md-select> 
										
									</div>-->
								<div class="col-md-3 col-sm-6 col-xs-12 form-group " style="display: inline-block">
									<md-input-container>
										<input mdInput [(ngModel)]="ruleGroupService.ruleGroup.name" (ngModelChange)="checkGroupName(ruleGroupService .ruleGroup.name)"
										 [placeholder]=GroupTypePlaceHolder [ngClass]="{'color-black' : isViewOnly}" [disabled]="isViewOnly || !ruleGroupService.ruleGroup.editRule" name="name"
										 required #name="ngModel">
									</md-input-container>
									<p class="help-block errorFont validation-error" *ngIf="duplicateRuleGroupName">{{GroupTypePlaceHolder}} already exists </p>
									<p class="help-block errorFont validation-error"  *ngIf="ruleGroupForm.hasError('required', 'name') && ruleGroupService.submitted">{{GroupTypePlaceHolder}} is required.</p>
	
								</div>
								<div class="col-md-2 col-sm-5" *ngIf="(isViewOnly || !ruleGroupService.ruleGroup.editRule )&& ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS'">
									<md-input-container>
										<input mdInput [(ngModel)]="ruleGroupService.ruleGroup.configuredModuleName" placeholder="Process Name" [ngClass]="{'color-black' : true}"
										 name="tenantModules" required #tenantModules="ngModel" [disabled]="true">
									</md-input-container>
								</div>
								<div class="col-md-2 col-sm-5" *ngIf="(!isViewOnly && ruleGroupService.ruleGroup.editRule) && ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS'">
									<md-select placeholder="Module" [(ngModel)]="ruleGroupService.ruleGroup.configuredModuleId" (change)="selectConfiguredModules()"
									 [ngClass]="{'color-black' : isViewOnly}" [disabled]="isViewOnly || !ruleGroupService.ruleGroup.editRule" name="tenantModules" required #tenantModules="ngModel" [style.width]="'100%'"
									 *ngIf="(!isViewOnly && ruleGroupService.ruleGroup.editRule)">
										<md-option *ngFor="let module of tenantSubscribedModules" [value]="module.lookUpCode" (click)="ruleGroupService.ruleGroup.configuredModuleName=module.meaning">
											{{ module.meaning}} </md-option>
									</md-select>
									<p class="help-block errorFont validation-error" *ngIf="ruleGroupForm.hasError('required', 'tenantModules') && ruleGroupService.submitted">Module is required.</p>
								</div>
	
								<div class="col-md-2 col-sm-4" *ngIf="(isViewOnly || !ruleGroupService.ruleGroup.editRule) && ruleGroupService.ruleGroup.rulePurpose == 'APPROVALS'">
									<md-input-container>
										<input mdInput [(ngModel)]="ruleGroupService.ruleGroup.apprRuleGrpName" placeholder="Group Name" [ngClass]="{'color-black' : true}"
										 name="apprRuleGrpName" required #apprRuleGrpName="ngModel" [disabled]="true">
									</md-input-container>
	
								</div> 
								<div class="col-md-3 col-sm-6" *ngIf=" !ruleCreationInWQ && (!isViewOnly && ruleGroupService.ruleGroup.editRule) && groups && groups.length>0 &&  ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS'">
<!-- 
									<md-select class="md-no-placeholder" [(ngModel)]="ruleGroupService.ruleGroup.apprRuleGrpId" [materialFilter]="processName"  name="processName" #processName="ngModel" [materialFilterModel]="modulesSearchModel"
									 [materialFilterInput]="modulesSearchInput">
									<input type="text" class="material-filter" placeholder="Search..." [(ngModel)]="modulesSearch" name="modulesSearch" #modulesSearchModel="ngModel" #modulesSearchInput>
							   		<md-option *ngFor="let group of groups | searchFilter:modulesSearch" [value]="group.idForDisplay" (click)="setProcess($event)"> {{ group.name }} </md-option>
									</md-select> -->
									<md-select  [(ngModel)]="ruleGroupService.ruleGroup.apprRuleGrpId" placeholder="Process Name" 
                                                [materialFilter]="modules" #modules name="modules" [materialFilterModel]="modulesSearchModel" [materialFilterInput]="modulesSearchInput"
                                                required>
                                                <input type="text" class="material-filter" placeholder="Search..." [(ngModel)]="modulesSearch" name="modulesSearch" #modulesSearchModel="ngModel"
                                                    #modulesSearchInput>
                                                <md-option *ngFor="let group of groups | searchFilter:modulesSearch" [value]="group.id" (click)="setProcess(group);"> {{ group.name }}</md-option>
                                    </md-select>

									<p class="help-block errorFont dropdown-validation-error" *ngIf="ruleGroupForm.hasError('required', 'processName') && ruleGroupService.submitted">Process Name is required.</p>
									<!-- <div class="multi-select-placeholder">
										<div class="ms-label">
											<p>Process Name : </p>
										</div>
										<div>
												<angular2-multiselect [data]="groups" [(ngModel)]="ruleGroupService.ruleGroup.apprRuleGrpObj" required [settings]="dropdownSettings"
												(onSelect)="setProcess($event)" name="processName" #processName="ngModel">
											   </angular2-multiselect>
								
										</div>
									</div> -->
									<!-- <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-placeholder" style="font-size: 12px;color: rgba(0,0,0,.54);padding-right: 0px"
																 *ngIf="!ruleCreationInWQ && (!isViewOnly && ruleGroupService.ruleGroup.editRule)" >Process Name : </div>
															
																<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-elment-style" style="margin-top: -19px;" *ngIf="  (!isViewOnly && ruleGroupService.ruleGroup.editRule) && !ruleCreationInWQ && groups && groups.length>0">
																	<angular2-multiselect [data]="groups" [(ngModel)]="ruleGroupService.ruleGroup.apprRuleGrpObj" required [settings]="dropdownSettings"
																	 (onSelect)="setProcess($event)" name="processName" #processName="ngModel">
																	</angular2-multiselect>
																<p class="help-block errorFont" style="margin-left: 32px;" *ngIf="ruleGroupForm.hasError('required', 'processName') && ruleGroupService.submitted">Process Name is required.</p>
																</div> -->
								</div>
								<!-- <div class="col-md-3 col-sm-6" *ngIf="isCreateNew && ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS'">
									<md-select placeholder="Process Name" [(ngModel)]="ruleGroupService.ruleGroup.apprRuleGrpId" [ngClass]="{'color-black' : isViewOnly}"
									 [disabled]="!isCreateNew" name="apprRuleGrpId" required #apprRuleGrpId="ngModel" [style.width]="'100%'" *ngIf="isCreateNew">
										<md-option *ngFor="let group of groups" [value]="group.id" (click)="ruleGroupService.ruleGroup.apprRuleGrpName=group.name;filterViews()">
											{{ group.name}} </md-option>
									</md-select>
									<p class="help-block errorFont" style="margin-left: 32px;" *ngIf="ruleGroupForm.hasError('required', 'apprRuleGrpId') && ruleGroupService.submitted">Process Name is required.</p>
								</div> -->
								<!-- <div [class]="rulePurposeLength"> -->
								<div class="col-md-2 col-sm-4 col-xs-6  " *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && (!isViewOnly || (isViewOnly &&  ruleGroupService .ruleGroup.accountingTypeCode))">
									<md-select placeholder="Accounting Type" [(ngModel)]="ruleGroupService .ruleGroup.accountingTypeCode" [ngClass]="{'color-black' : isViewOnly}"
									 [disabled]="isViewOnly" name="accountingType" #accountingType="ngModel" [style.width]="'100%'">
									 <md-option></md-option>	
									 <md-option *ngFor="let type of accountingTypes" [value]="type.lookUpCode">
											{{ type.meaning}} </md-option>
										
									</md-select>
								</div>
	
								<!-- <div class="col-md-3" *ngIf="ruleObj.purpose == 'RECONCILED_AND_ACCOUNTED'">
									<md-select placeholder="Rule Group" [(ngModel)]="ruleObj.ruleGroup"
									[ngClass]="{'color-black' : isViewOnly}" [disabled]="!isCreateNew" name="ruleGroup{{i}}" required #ruleGroup="ngModel"
									[style.width]="'100%'">
										<md-option *ngFor="let col of ruleGroupList" [value]="col.id" (click)="fetchDVBasedOnRuleGroup(i,col.id);">
											{{ col.name}} </md-option>
									</md-select>
								</div> -->
	
								<!-- </div> -->
								<div class="col-md-2" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING'">
									<md-select placeholder="Chart Of Accounts" [(ngModel)]="ruleGroupService.ruleGroup.coa" (change)="SelectCOA('create')" [ngClass]="{'color-black' : isViewOnly}"
									 name="coa" required #coa="ngModel" *ngIf="(!isViewOnly && ruleGroupService.ruleGroup.editRule)">
										<md-option *ngFor="let coa of chartOfAccounts" [value]="coa.id">
											{{ coa.name}}
										</md-option>
									</md-select>
									<md-input-container class="example-full-width" *ngIf="(isViewOnly || !ruleGroupService.ruleGroup.editRule)">
										<input class="inputHeight" mdInput [(ngModel)]="ruleGroupService.ruleGroup.coaMeaning" [ngClass]="{'color-black' : true }"
										 [disabled]="true" placeholder="Chart Of Accounts" name="coaMeaning" required #coaMeaning="ngModel">
									</md-input-container>
									<p class="help-block errorFont validation-error"  *ngIf="ruleGroupForm.hasError('required', 'coa') && ruleGroupService.submitted">COA is required.</p>
								</div>
								<div class="col-lg-2 col-md-3 col-sm-4 col-xs-8   date-field-size" >
									<md-form-field>
										<input mdInput [mdDatepicker]="stpicker" placeholder="From" [min]="today" (dateChange)="ruleGroupService.ruleGroup.startDateChange=true;startDateChanged(ruleGroupService.ruleGroup.startDate);"
										 [ngClass]="{'color-black' : isViewOnly}" [disabled]="isViewOnly" [(ngModel)]="ruleGroupService.ruleGroup.startDate"
										 name="startDate" required>
										<md-datepicker-toggle mdSuffix [for]="stpicker" *ngIf="!isViewOnly"></md-datepicker-toggle>
										<md-datepicker #stpicker></md-datepicker>
									</md-form-field>
									<p class="help-block errorFont validation-error"  *ngIf="ruleGroupForm.hasError('required', 'startDate') && ruleGroupService.submitted">Start date is required.</p>
									<!-- <md-form-field *ngIf="ruleGroupService .ruleGroup.endDate">
											<input mdInput [mdDatepicker]="stpicker" placeholder="From" [ngClass]="{'color-black' : isViewOnly}" [disabled]="isViewOnly"
											 [(ngModel)]="ruleGroupService.ruleGroup.startDate" name="startDate" required [max]="ruleGroupService.ruleGroup.endDate">
											<md-datepicker-toggle mdSuffix [for]="stpicker" *ngIf="!isViewOnly"></md-datepicker-toggle>
											<md-datepicker #stpicker></md-datepicker>
										</md-form-field> -->
								</div>
	
								<div class="col-lg-2 col-md-3 col-sm-4 col-xs-8   date-field-size" *ngIf="!isViewOnly || (isViewOnly && ruleGroupService.ruleGroup.endDate)">
									<md-form-field>
										<input mdInput [mdDatepicker]="edpicker" placeholder="To" [min]="ruleGroupService.ruleGroup.startDate" (dateChange)="ruleGroupService.ruleGroup.endDateChange=true;"
										 [ngClass]="{'color-black' : isViewOnly}" [disabled]="isViewOnly" [(ngModel)]="ruleGroupService.ruleGroup.endDate"
										 name="endDate">
										<md-datepicker-toggle mdSuffix [for]="edpicker" *ngIf="!isViewOnly"></md-datepicker-toggle>
										<md-datepicker #edpicker></md-datepicker>
									</md-form-field>
								</div>
	
								<div class="col-md-1">
									<md-slide-toggle color="primary" mdTooltip="Set Status" placeholder="status" [(ngModel)]="ruleGroupService.ruleGroup.enableFlag"
									 name="status" #status="ngModel" *ngIf="isEdit && !copyRuleGroup" style="top:25px;padding-top: 27px;">
									</md-slide-toggle>
									<md-input-container class="example-full-width" *ngIf="isViewOnly">
											<input mdInput placeholder="Status" [(ngModel)]="ruleGroupService.ruleGroup.status" [ngClass]="{'color-black' : isViewOnly}" [disabled]="isViewOnly" name="status" 
											required #source="ngModel">
									 </md-input-container>
									<!-- <p class="badge badge-success" *ngIf="ruleGroupService .ruleGroup.enableFlag && isViewOnly">Active</p>
									<p class="badge badge-warning" *ngIf="!ruleGroupService .ruleGroup.enableFlag && isViewOnly">Inactive</p> -->
									<!-- <button md-icon-button mdTooltip="Active" *ngIf="ruleGroupService .ruleGroup.enableFlag && isViewOnly">
										<md-icon>check_circle</md-icon>
									</button>
									<button md-icon-button class=" md-36" mdTooltip="Inactive" *ngIf="!ruleGroupService .ruleGroup.enableFlag && isViewOnly">
										<md-icon>error</md-icon>
									</button> -->
								</div>
							</div>
							<div class="row checkBoxes" *ngIf="ruleGroupService && ruleGroupService.ruleGroup && ruleGroupService.ruleGroup.activityBased == true && ruleGroupService.ruleGroup.coa">
								<div class="col-md-2 col-sm-4 col-xs-6   accounting-def-checkBox" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && 
							(	(ruleGroupService.ruleGroup.editRule && !isViewOnly )|| ((!ruleGroupService.ruleGroup.editRule || isViewOnly )&& ruleGroupService.ruleGroup.activityBased == true ))">
									<md-checkbox class=" appGrpCheckBox accounting-def-checkBox" (change)="activityBasedCheckFunction($event)"  [(ngModel)]="ruleGroupService.ruleGroup.activityBased"
									 [ngModelOptions]="{standalone: true}" [ngClass]="{'color-black' : true}" [disabled]="!ruleGroupService.ruleGroup.editRule  || isViewOnly">Activity Based
									</md-checkbox>
									<!-- <span></span> -->
								</div>
								<div class="col-md-2 col-sm-6 col-xs-12" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && ruleGroupService.ruleGroup.activityBased == true">
									<md-input-container style="top: 4px;" *ngIf="!ruleGroupService.ruleGroup.editRule || isViewOnly">
										<input mdInput [(ngModel)]="ruleGroupService .ruleGroup.reconciliationGroupName" placeholder="Recon Process" [ngClass]="{'color-black' : true}"
										 [disabled]="true" name="reconProcess" required #reconProcess="ngModel">
									</md-input-container>
									
									
									<!-- <md-select placeholder="Recon Process" [(ngModel)]="ruleGroupService.ruleGroup.reconciliationGroupId" [ngClass]="{'color-black' : isViewOnly}"
									 [disabled]="!ruleGroupService.ruleGroup.editRule" name="reconciliationGroupId" required #reconciliationGroupId="ngModel"
									 [style.width]="'100%'" (change)="changeReconcileGrpForActivityBased()" *ngIf="ruleGroupService.ruleGroup.editRule && !isViewOnly">
										<md-option *ngFor="let group of ruleGroupList" [value]="group.id">
											{{ group.name}} </md-option>
									</md-select> -->

									<md-select  [(ngModel)]="ruleGroupService.ruleGroup.reconciliationGroupId" placeholder="Recon Process"  [materialFilter]="reconciliationGroupId" #reconciliationGroupId name="reconciliationGroupId" [materialFilterModel]="reconciliationGroupIdSearchModel"
									*ngIf="ruleGroupService.ruleGroup.editRule && !isViewOnly"  [style.width]="'100%'"  [materialFilterInput]="reconciliationGroupIdSearchInput" required>
										<input type="text" class="material-filter" placeholder="Search..." [(ngModel)]="reconciliationGroupIdSearch" (change)="changeReconcileGrpForActivityBased()"  name="reconciliationGroupIdSearch" #reconciliationGroupIdSearchModel="ngModel" #reconciliationGroupIdSearchInput>
										<md-option *ngFor="let group of ruleGroupList | searchFilter:reconciliationGroupIdSearch"  [value]="group.id"> {{ group.name}} </md-option>
										</md-select>
									<p class="help-block errorFont validation-error"  *ngIf="ruleGroupForm.hasError('required', 'reconciliationGroupId') && ruleGroupService.submitted">Recon process is required.</p>
								</div>
	
	
							</div>
							<div class="row" *ngIf="ruleGroupService && ruleGroupService.ruleGroup && ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && ruleGroupService.ruleGroup.activityBased ==true && ruleGroupService.ruleGroup.coa">
								<div class="col-md-2 col-sm-4 col-xs-6   accounting-def-checkBox" 
								*ngIf=" (ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' 
								&& ruleGroupService.ruleGroup.activityBased ==true ) 
								&&( (ruleGroupService.ruleGroup.editRule && !isViewOnly)|| ((!ruleGroupService.ruleGroup.editRule || isViewOnly) && ruleGroupService.ruleGroup.crossCurrency ==true ))">
									<md-checkbox class="appGrpCheckBox" [(ngModel)]="ruleGroupService.ruleGroup.crossCurrency" [ngModelOptions]="{standalone: true}" (change)="crossCurrencyCheckFunction($event)"
									 [disabled]="!ruleGroupService.ruleGroup.editRule"  [ngClass]="{'color-black' : true}">Cross currency
									</md-checkbox>
									<!-- <span></span> -->
								</div>
								<div class="col-md-2 col-sm-4   multiselect-text-overflow" style="padding-top: 11px;" *ngIf="(ruleGroupService.ruleGroup.editRule) && ruleGroupService.ruleGroup.crossCurrency == true && !ruleGroupService.ruleGroup.coa">
									<p class="help-block errorFont validation-error" >Select Chart of accounts</span>
								</div>
								<!-- <div class="col-md-3 col-sm-4   multiselect-text-overflow" style="padding-top: 11px;" *ngIf="(isCreateNew || copyRuleGroup) &&  ruleGroupService.ruleGroup.crossCurrency == true && ruleGroupService.ruleGroup.coa && (!this.valueSetForControlAcc || this.valueSetForControlAcc.length<=0)">
									<p class="help-block errorFont" style="padding-top: 12px;"> Value set is not tagged to the account segment</span>
								</div> -->
								<div class="col-md-2 col-sm-4   multiselect-text-overflow" style="padding-top: 11px;" *ngIf="ruleGroupService.ruleGroup.crossCurrency == true  && (((ruleGroupService.ruleGroup.editRule) && ruleGroupService.ruleGroup.coa  ) || ((!ruleGroupService.ruleGroup.editRule || isViewOnly) && ruleGroupService.ruleGroup.controlAccount )) ">
									<md-input-container style="top: 4px;" *ngIf="!ruleGroupService.ruleGroup.editRule || isViewOnly">
										<input mdInput [(ngModel)]="ruleGroupService.ruleGroup.controlAccount" placeholder="Control A/C" [ngClass]="{'color-black' : true}"
										 [disabled]="ruleGroupService.ruleGroup.id" (blur)="validateSegmentLength()" name="controlAccount" required #controlAccount="ngModel">
									</md-input-container>
	
									<!-- <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="font-size: 12px;color: rgba(0,0,0,.54)" *ngIf="isCreateNew && valueSetForControlAcc && valueSetForControlAcc.length>0">
											Control A/C :</div>
											 -->
									<!--<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" *ngIf="ruleGroupService.ruleGroup.editRule  && !isViewOnly">
										<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-placeholder" style="font-size: 12px;color: rgba(0,0,0,.54);">
											<p style="color : #949494 !important;">Control A/C :</p>
										</div>
										 <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-elment-style" style="margin-top: -21px;">
											<angular2-multiselect [data]="valueSetForControlAcc" [(ngModel)]="ruleGroupService.ruleGroup.controlAccountValue" (onSelect)="validateSegmentLength()"
											 [settings]="cAccdropdownSettings" name="controlAccount" required #controlAccount="ngModel" *ngIf="ruleGroupService.ruleGroup.editRule">
											</angular2-multiselect>
											<p *ngIf="!valueSetForControlAcc || valueSetForControlAcc .length<=0" class="help-block errorFont">Accounts not found</p>
											<p class="help-block errorFont dropdown-validation-error" *ngIf="ruleGroupForm.hasError('required', 'controlAccount') && ruleGroupService.submitted">Control Account is required.</p>
										</div>
										
									</div> -->
									<md-select  [(ngModel)]="ruleGroupService.ruleGroup.controlAccount" placeholder="Control A/C" [materialFilter]="controlAccount" #controlAccount name="controlAccount" [materialFilterModel]="controlAccountSearchModel"
										 [materialFilterInput]="controlAccountSearchInput" required>
										<input type="text" class="material-filter" placeholder="Search..." [(ngModel)]="controlAccountSearch" name="controlAccountSearch" #controlAccountSearchModel="ngModel"
											#controlAccountSearchInput>
										<md-option *ngFor="let acc of valueSetForControlAcc | searchFilter:controlAccountSearch" [value]="acc.id" (click)="validateSegmentLength();"> {{ acc.itemName }}</md-option>
										</md-select>
										<p *ngIf="!valueSetForControlAcc || valueSetForControlAcc .length<=0" class="help-block errorFont">Accounts not found</p>
										<p class="help-block errorFont dropdown-validation-error" *ngIf="ruleGroupForm.hasError('required', 'controlAccount') && ruleGroupService.submitted">Control Account is required.</p>
	
								</div>
								<div class="col-md-2 col-sm-4   multiselect-text-overflow" style="padding-top: 11px;" *ngIf="ruleGroupService.ruleGroup.crossCurrency == true  && (((ruleGroupService.ruleGroup.editRule)   && ruleGroupService.ruleGroup.coa ) || ((!ruleGroupService.ruleGroup.editRule || isViewOnly) && ruleGroupService.ruleGroup.controlAccount ))">
									<md-input-container style="top: 4px;" *ngIf="!ruleGroupService.ruleGroup.editRule || isViewOnly">
										<input mdInput [(ngModel)]="ruleGroupService.ruleGroup.realizedGainLossAccount" placeholder="Realized Gain/Loss A/C" [disabled]="ruleGroupService .ruleGroup.id"
										 [ngClass]="{'color-black' : true}" (blur)="validateSegmentLength()" name="realizedGainLossAccount" required #realizedGainLossAccount="ngModel">
									</md-input-container>
									
									<md-select  [(ngModel)]="ruleGroupService.ruleGroup.realizedGainLossAccount" placeholder="Realized Gain/Loss A/C" [materialFilter]="modules" #modules name="realizedGainLossAccount" [materialFilterModel]="realizedGainLossAccountSearchModel"
										 [materialFilterInput]="realizedGainLossAccountSearchInput" required>
										<input type="text" class="material-filter" placeholder="Search..." [(ngModel)]="realizedGainLossAccountSearch" name="realizedGainLossAccountSearch" #realizedGainLossAccountSearchModel="ngModel"
											#realizedGainLossAccountSearchInput>
										<md-option *ngFor="let acc of valueSetForRealizedAcc | searchFilter:realizedGainLossAccountSearch" [value]="acc.id" (click)="validateSegmentLength();"> {{ acc.itemName }}</md-option>
										</md-select>
										<p *ngIf="!valueSetForRealizedAcc || valueSetForRealizedAcc .length<=0" class="help-block errorFont validation-error">Accounts not found</p>
										<p class="help-block errorFont dropdown-validation-error" *ngIf="ruleGroupForm.hasError('required', 'realizedGainLossAccount') && ruleGroupService.submitted">Realized Gain/Loss A/C is required.</p>
										
									<!-- <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="font-size: 12px;color: rgba(0,0,0,.54)"*ngIf="isCreateNew && valueSetForRealizedAcc && valueSetForRealizedAcc.length>0">
											Realized Gain/Loss A/C :</div> -->
									<!-- <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" *ngIf="ruleGroupService.ruleGroup.editRule  && !isViewOnly">
										<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-placeholder" style="font-size: 12px;color: rgba(0,0,0,.54);">
											<p style="color : #949494 !important;">Realized Gain/Loss A/C :</p>
										</div>
										<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-elment-style" style="margin-top: -21px;">
											<angular2-multiselect [data]="valueSetForRealizedAcc" [(ngModel)]="ruleGroupService.ruleGroup.realizedGainLossAccountValue"
											 (onSelect)="validateSegmentLength()" [settings]="realizedAccdropdownSettings" name="realizedGainLossAccount" required
											 #realizedGainLossAccount="ngModel" *ngIf="ruleGroupService.ruleGroup.editRule">
											</angular2-multiselect>
											<p *ngIf="!valueSetForRealizedAcc || valueSetForRealizedAcc .length<=0" class="help-block errorFont validation-error">Accounts not found</p>
											<p class="help-block errorFont dropdown-validation-error" *ngIf="ruleGroupForm.hasError('required', 'realizedGainLossAccount') && ruleGroupService.submitted">Realized Gain/Loss A/C is required.</p>
										</div>
									</div> -->
								</div>
								<div class="col-md-2 col-sm-4   multiselect-text-overflow" style="padding-top: 11px;" *ngIf="ruleGroupService.ruleGroup.crossCurrency == true  && (((ruleGroupService.ruleGroup.editRule)  && ruleGroupService.ruleGroup.coa ) || ((!ruleGroupService.ruleGroup.editRule || isViewOnly) && ruleGroupService.ruleGroup.controlAccount ))">
									<md-input-container style="top: 4px;" *ngIf="!ruleGroupService.ruleGroup.editRule || isViewOnly">
										<input mdInput [(ngModel)]="ruleGroupService.ruleGroup.fxGainAccount" placeholder="FX Gain A/C" [disabled]="ruleGroupService .ruleGroup.id"
										 [ngClass]="{'color-black' : true}" (blur)="validateSegmentLength();setFxLossIfEmpty()" name="fxGainAccount" required
										 #fxGainAccount="ngModel">
									</md-input-container>

									<md-select  [(ngModel)]="ruleGroupService.ruleGroup.fxGainAccount" placeholder="FX Gain A/C " [materialFilter]="fxGainAccount" #fxGainAccount name="fxGainAccount" [materialFilterModel]="fxGainAccountSearchModel" required>
								   <input type="text" class="material-filter" placeholder="Search..." [(ngModel)]="fxGainAccountSearch" name="fxGainAccountSearch" #fxGainAccountSearchModel="ngModel"
									   #fxGainAccountSearchInput>
								   <md-option *ngFor="let acc of valueSetForFXGainAcc | searchFilter:fxGainAccountSearch" [value]="acc.id" (click)="validateSegmentLength();"> {{ acc.itemName }}</md-option>
								   </md-select>
								   <p *ngIf="!valueSetForFXGainAcc || valueSetForFXGainAcc .length<=0" class="help-block errorFont validation-error">Accounts not found</p>
								   <p class="help-block errorFont dropdown-validation-error" *ngIf="ruleGroupForm.hasError('required', 'fxGainAccount') && ruleGroupService.submitted">FX Gain A/C is required.</p>
							   
									<!-- <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" *ngIf="ruleGroupService.ruleGroup.editRule  && !isViewOnly">
										<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-placeholder" style="font-size: 12px;color: rgba(0,0,0,.54);">
											<p style="color : #949494 !important;">FX Gain A/C :</p>
										</div>
										<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-elment-style" style="margin-top: -21px;">
											<angular2-multiselect [data]="valueSetForFXGainAcc" [(ngModel)]="ruleGroupService.ruleGroup.fxGainAccountValue" (onSelect)="validateSegmentLength()"
											 [settings]="FxGainAccdropdownSettings" name="fxGainAccount" required #fxGainAccount="ngModel" *ngIf="ruleGroupService.ruleGroup.editRule">
											</angular2-multiselect>
											<p *ngIf="!valueSetForControlAcc || valueSetForControlAcc .length<=0" class="help-block errorFont validation-error">Accounts not found</p>
											<p class="help-block errorFont dropdown-validation-error" *ngIf="ruleGroupForm.hasError('required', 'fxGainAccount') && ruleGroupService.submitted">FX Gain A/C is required.</p>
										</div>
									</div> -->
								</div>
								<div class="col-md-2 col-sm-4   multiselect-text-overflow" style="padding-top: 11px;" *ngIf="ruleGroupService.ruleGroup.crossCurrency == true && (((ruleGroupService.ruleGroup.editRule)   &&  ruleGroupService.ruleGroup.coa )|| ((!ruleGroupService.ruleGroup.editRule || isViewOnly) && ruleGroupService.ruleGroup.controlAccount ))">
									<md-input-container style="top: 4px;" *ngIf="!ruleGroupService.ruleGroup.editRule || isViewOnly">
										<input mdInput [(ngModel)]="ruleGroupService.ruleGroup.fxLossAccount" placeholder="FX Loss A/C" [disabled]="ruleGroupService .ruleGroup.id"
										 [ngClass]="{'color-black' : true}" (blur)="validateSegmentLength()" name="fxLossAccount" required #fxLossAccount="ngModel">
									</md-input-container>
									
									<md-select  [(ngModel)]="ruleGroupService.ruleGroup.fxLossAccount" placeholder="FX Loss A/C " [materialFilter]="fxLossAccount" #fxLossAccount name="fxLossAccount" [materialFilterModel]="fxLossAccountSearchModel"
									[materialFilterInput]="fxLossAccountSearchInput" required>
								   <input type="text" class="material-filter" placeholder="Search..." [(ngModel)]="fxLossAccountSearch" name="fxLossAccountSearch" #fxLossAccountSearchModel="ngModel"
									   #fxLossAccountSearchInput>
								   <md-option *ngFor="let acc of valueSetForFXLossAcc | searchFilter:fxLossAccountSearch" [value]="acc.id" (click)="validateSegmentLength();"> {{ acc.itemName }}</md-option>
								   </md-select>
								   <p *ngIf="!valueSetForControlAcc || valueSetForControlAcc.length<=0" class="help-block errorFont validation-error">Accounts not found</p>
								   <p class="help-block errorFont dropdown-validation-error" *ngIf="ruleGroupForm.hasError('required', 'fxLossAccount') && ruleGroupService.submitted">FX Loss A/C is required.</p>
									<!-- <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" *ngIf="ruleGroupService.ruleGroup.editRule  && !isViewOnly">
										<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-placeholder" style="font-size: 12px;color: rgba(0,0,0,.54);">
											<p style="color : #949494 !important;">FX Loss A/C :</p>
										</div>
										<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 multi-select-elment-style" style="margin-top: -21px;">
											<angular2-multiselect [data]="valueSetForFXLossAcc" [(ngModel)]="ruleGroupService.ruleGroup.fxLossAccountValue" (onSelect)="validateSegmentLength()"
											 [settings]="FXLossAccropdownSettings" name="fxLossAccount" required #fxLossAccount="ngModel" *ngIf="ruleGroupService.ruleGroup.editRule">
											</angular2-multiselect>	<p *ngIf="!valueSetForControlAcc || valueSetForControlAcc .length<=0" class="help-block errorFont validation-error">Accounts not found</p>
											<p class="help-block errorFont dropdown-validation-error" *ngIf="ruleGroupForm.hasError('required', 'fxLossAccount') && ruleGroupService.submitted">FX Loss A/C is required.</p>
										</div>
									</div> -->
								
								</div>
								<!-- <div class="col-md-2" style="padding-top: 11px;">
										<span  style="padding-top: 12px;" *ngIf="ruleGroupService.ruleGroup.crossCurrency == true && ruleGroupService.ruleGroup.coa && (this.valueSetForControlAcc &&this.valueSetForControlAcc.length>0)">
											<b>Note : Cross check the Account`s segment length</b>
										</span>
									</div> -->
	
							</div>
							<div class="row" *ngIf="ruleGroupService && ruleGroupService.ruleGroup && ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && ruleGroupService.ruleGroup.coa">
								<div class="col-md-2 col-sm-4 col-xs-6   accounting-def-checkBox" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && 
								(ruleGroupService.ruleGroup.editRule)&& (ruleGroupService.ruleGroup.activityBased == null|| ruleGroupService.ruleGroup.activityBased == false)">
									<md-checkbox class="appGrpCheckBox" (change)="activityBasedCheckFunction($event)" [(ngModel)]="ruleGroupService.ruleGroup.activityBased"
									[ngClass]="{'color-black' : true}" 
									 [ngModelOptions]="{standalone: true}" [disabled]="!ruleGroupService.ruleGroup.editRule || isViewOnly">Activity Based
									</md-checkbox>
									<!-- <span></span> -->
								</div>  
								<div class="col-md-2 col-sm-4 col-xs-6   accounting-def-checkBox" *ngIf="(!ruleGroupService.ruleGroup.editRule && ruleGroupService.ruleGroup.multiCurrency == true) || (ruleGroupService.ruleGroup.editRule)">
									<md-checkbox class="accounting-def-checkBox appGrpCheckBox" (change)="multiCurrencycheckFunction($event)"  [(ngModel)]="ruleGroupService.ruleGroup.multiCurrency" [ngModelOptions]="{standalone: true}"
									 [disabled]="!ruleGroupService.ruleGroup.editRule"  [ngClass]="{'color-black' : true}">Multi currency
									</md-checkbox>
									<!-- <span></span> -->
								</div>
								<div class="col-md-2 col-sm-4 " *ngIf=" ruleGroupService.ruleGroup.multiCurrency == true" style="padding-top: 11px;">
									<md-select placeholder="Conversion type" [(ngModel)]="ruleGroupService.ruleGroup.fxRateId" [ngClass]="{'color-black' : isViewOnly}"
									 [disabled]="!ruleGroupService.ruleGroup.editRule || isViewOnly" name="conversionType" required #conversionType="ngModel" [style.width]="'100%'"
									 *ngIf="ruleGroupService.ruleGroup.editRule && !isViewOnly">
										<md-option *ngFor="let fxRate of conversionTypes" [value]="fxRate.id">
											{{ fxRate.name}} </md-option>
									</md-select> 
									
									<md-input-container style="top: 4px;" *ngIf="!ruleGroupService.ruleGroup.editRule || isViewOnly">
										<input mdInput [(ngModel)]="ruleGroupService.ruleGroup.fxRateName" placeholder="Conversion type" [disabled]="true"
										 [ngClass]="{'color-black' : true}" name="conversionType" required #conversionType="ngModel">
									</md-input-container>
									<p class="help-block errorFont validation-error"  *ngIf="ruleGroupForm.hasError('required', 'conversionType') && ruleGroupService.submitted">Conversion type is required.</p>
									<p class="help-block errorFont validation-error"  *ngIf="!conversionTypes || conversionTypes.length<=0">Exchange Rates not found.</p>
								</div>
								<div class="col-md-2 col-sm-4 " *ngIf="ruleGroupService.ruleGroup.multiCurrency == true" style="padding-top: 11px;">
									<md-select placeholder="Conversion date" [(ngModel)]="ruleGroupService.ruleGroup.conversionDate" [ngClass]="{'color-black' : isViewOnly}"
									 [disabled]="!ruleGroupService.ruleGroup.editRule || isViewOnly" name="conversionDate" required #conversionDate="ngModel" [style.width]="'100%'"
									 *ngIf="ruleGroupService.ruleGroup.editRule">
										<md-option *ngFor="let date of conversionDates" [value]="date.lookUpCode">
											{{ date.meaning}} </md-option>
									</md-select>
									<p class="help-block errorFont validation-error" *ngIf="ruleGroupForm.hasError('required', 'conversionDate') && ruleGroupService.submitted">Conversion date is required.</p>
									<md-input-container style="top: 4px;" *ngIf="!ruleGroupService.ruleGroup.editRule">
										<input mdInput [(ngModel)]="ruleGroupService.ruleGroup.conversionDateMeaning" placeholder="Conversion date" [disabled]="!ruleGroupService.ruleGroup.editRule"
										 [ngClass]="{'color-black' : true}" name="conversionDateMeaning" required #conversionDateMeaning="ngModel">
									</md-input-container>
								</div>
							</div>
							<!-- <div class="row" >
									<div class="col-md-2" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS' ">
									</div>
	
								
									<div class="col-md-2">
									</div>
								</div> -->
					</div>
					<!-- <div class="row"  >
						<div class="col-md-6 col-sm-6 col-xs-6">
							<h4 style="margin-top: 6px;">
								<b>
									Rules(
										<span *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'RECONCILIATION' && ruleGroupService.ruleGroupRulesAndConditions && ruleGroupService.ruleGroupRulesAndConditions.rules">{{ruleGroupService.ruleGroupRulesAndConditions.rules.length}}</span>
										<span *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && ruleGroupService.accountingRuleGroup && ruleGroupService.accountingRuleGroup.rules && ruleGroupService.ruleGroup.coa">{{ruleGroupService.accountingRuleGroup.rules.length}}</span>
										<span *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS' && ruleGroupService.approvalRuleGRoupWithRules && ruleGroupService.approvalRuleGRoupWithRules.rules">{{ruleGroupService.approvalRuleGRoupWithRules.rules.length}}</span>
										)</b>
							</h4>
						</div>
						<div class="col-md-6 col-sm-6 col-xs-6" >
							<button md-icon-button class="pull-right  md-36" (click)="ruleGroupReconciliationComponent.addNewRuleObject(ruleGroupService.ruleGroupRulesAndConditions.rules.length,0)"
							*ngIf="ruleGroupService .ruleGroup.rulePurpose == 'RECONCILIATION' && ruleGroupService.ruleGroupRulesAndConditions.rules && !isViewOnly "
							 mdTooltip="Add New Rule" [ngx-scroll-to]="ruleGroupService.ngxScrollToLastRule">
								<md-icon>add</md-icon>
							</button>

							<button md-icon-button class="pull-right  md-36" mdTooltip="Add New Rule" (click)="ruleGroupAccountingNewComponent.addNewRuleObject(ruleGroupService.accountingRuleGroup.rules.length,0)"
							*ngIf="ruleGroupService.ruleGroup.coa && ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && ruleGroupService.accountingRuleGroup.rules && !isViewOnly "	 [ngx-scroll-to]="ruleGroupService.ngxScrollToLastRule">
								<md-icon>add</md-icon>
							</button>

							<button md-icon-button class="pull-right  md-36" mdTooltip="Add New Rule" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS' && !isViewOnly && ruleGroupService.approvalRuleGRoupWithRules.rules" (click)="ruleGroupApprovalsComponent.addNewRuleObject(ruleGroupService.approvalRuleGRoupWithRules.rules.length,0)" 
							[ngx-scroll-to]="ruleGroupService.ngxScrollToLastRule">
								<md-icon>add</md-icon>
							</button>

							<button md-icon-button class=" pull-right md-36" mdTooltip="Hide Header" *ngIf="showHeader" (click)="toggleHeader()" >
									<md-icon>expand_less</md-icon>
								</button>
							<button md-icon-button class="pull-right md-36" mdTooltip="Show Header" *ngIf="!showHeader" (click)="toggleHeader()">
									<md-icon>expand_more</md-icon>
							</button>
						</div>
					</div> -->
					<!-- <div class="row"  *ngIf="!ruleCreationInWQ && ruleGroupService.ruleGroup.coa && ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING'">
							<div class="col-md-6 col-sm-6 col-xs-6" style="padding-left:0px">
								<h4 style="margin-top: 6px;">
									<b>Rules({{ruleGroupService.accountingRuleGroup.rules.length}})</b>
								</h4>
							</div>
							<div class="col-md-6 col-sm-6 col-xs-6">
								
							</div>
						</div>
						<div class="row" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS'">
								<div class="col-md-6">
									<p>
										<h4 style="margin-top: 6px;">
											<b>Rules</b>
										</h4>
									</p>
								</div>
								<div class="col-md-6">
							
								
								</div>
							</div> -->
				<!-- </div> -->
					<!-- </div> -->
					</form>
						<form novalidate #rule="ngForm">
					<div *ngIf="ruleGroupService && ruleGroupService.ruleGroup">
						<div>
							<!-- Reconciliation start -->
						
								<jhi-rule-group-reconciliation [accountingMode]="view" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'RECONCILIATION' && isViewOnly"></jhi-rule-group-reconciliation>
								<jhi-rule-group-reconciliation [accountingMode]="edit" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'RECONCILIATION' && isEdit"></jhi-rule-group-reconciliation>
								<jhi-rule-group-reconciliation [accountingMode]="create" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'RECONCILIATION' && isCreateNew"></jhi-rule-group-reconciliation>
	
								<!-- Reconciliation End -->
	
	
								<!-- Accounting start -->
								<!-- <jhi-rule-group-accounting [accountingMode]="view"
						*ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && isViewOnly"></jhi-rule-group-accounting>
					<jhi-rule-group-accounting [accountingMode]="edit"
						*ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && isEdit"></jhi-rule-group-accounting>
					<jhi-rule-group-accounting [accountingMode]="create"
						*ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && isCreateNew"></jhi-rule-group-accounting> -->
								<!-- Accounting End -->
	
	
								<!-- Accounting new start -->
								<jhi-rule-group-accounting-new [accountingMode]="view" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && isViewOnly"></jhi-rule-group-accounting-new>
								<jhi-rule-group-accounting-new [accountingMode]="edit" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && isEdit"></jhi-rule-group-accounting-new>
								<jhi-rule-group-accounting-new [accountingMode]="create" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'ACCOUNTING' && isCreateNew"></jhi-rule-group-accounting-new>
								<!-- Accounting new End -->
	
								<!-- Approvals Start -->
								<jhi-rule-group-approvals [accountingMode]="view" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS' && isViewOnly"></jhi-rule-group-approvals>
								<jhi-rule-group-approvals [accountingMode]="edit" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS' && isEdit"></jhi-rule-group-approvals>
								<jhi-rule-group-approvals [accountingMode]="create" *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'APPROVALS' && isCreateNew"></jhi-rule-group-approvals>
								<!-- Approvals End -->
						
	
							<ngui-popup #popup></ngui-popup>
						</div>
					</div>
				</form>
				</div>
	
			</div>
		<!-- </vertical-split-pane> -->
	
	</div>
	<div class="ftlFunction">
		<p-dialog header="Set rule priority" [(visible)]="setRulePriority" [resizable]="true" [responsive]="true" [modal]="true">
			<p style="margin-bottom: 0px !important;">
				<perfect-scrollbar style="max-height: 400px;">
	
					<div class="row rolesassignModal">
						<div class="MyPanel" style="width: 100%!important;" dnd-sortable-container>
	
							<perfect-scrollbar class="table-responsive" style="height: auto;">
								<div class="panel-body" dnd-droppable [dropZones]="['source-dropZone'] " (onDropSuccess)="updatePriority()">
									<ul class="list-group" dnd-sortable-container [sortableData]="ruleGroupService.rulePriorityList">
										<li *ngFor="let obj of ruleGroupService.rulePriorityList; let x = index" class="list-group-item" dnd-sortable [sortableIndex]="x"
										 [dragEnabled]="true" [dragData]="obj">{{x+1}} - {{obj.ruleName}}</li>
									</ul>
								</div>
							</perfect-scrollbar>
						</div>
	
						<!-- <div class="col-md-6">
			
								<div class="MyPanel" dnd-sortable-container [sortableData]="unassignedRoles">
									<div class="Heading BlueTitleDiv">List of available Roles</div>
									<perfect-scrollbar class="table-responsive" style="height: 250px;">
										<div class="panel-body" dnd-droppable [dropZones]="['source-dropZone']">
											<ul class="list-group">
												<li *ngFor="let source of unassignedRoles; let x = index" class="list-group-item" dnd-sortable [sortableIndex]="x" [dragEnabled]="true"
													[dragData]="source">{{source.roleName}}</li>
											</ul>
										</div>
									</perfect-scrollbar>
								</div>
			
							</div>
							<div class="col-md-6">
			
								<div class="MyPanel" dnd-sortable-container [sortableData]="selectedRoles">
									<div class="Heading BlueTitleDiv">Selected Roles</div>
									<perfect-scrollbar class="table-responsive" style="height: 250px;">
										<div class="panel-body" dnd-droppable [dropZones]="['source-dropZone']">
											<ul class="list-group">
												<li *ngFor="let target of curUserRolesList;" class="list-group-item" style="color:gray;"><b *ngIf="target && target.roleName">{{target.roleName}}</b></li>
												<li *ngFor="let role of selectedRoles let x = index" class="list-group-item" dnd-sortable [sortableIndex]="x" [dragEnabled]="true"><b *ngIf="role && role.roleName">{{role.roleName}}</b></li>
											</ul>
										</div>
									</perfect-scrollbar>
								</div>
			
							</div> -->
					</div>
	
				</perfect-scrollbar>
			</p>
			<p-footer>
	
				<button md-raised-button (click)="updatePriority()">Confirm</button>
				<!-- <button type="button" pButton icon="fa-check" (click)="display=false;tagSelectedRoles();" label="Confirm" *ngIf="isCreateNew"></button>
						<button type="button" pButton icon="fa-check" (click)="display=false;tagNewSelectedRoles();" label="Save" *ngIf="!isCreateNew"></button> -->
			</p-footer>
		</p-dialog>
	</div>