<!-- <div class="row  leftmargin-20 component-title" *ngIf="!ruleCreationInWQ">
	<div class="col-md-6 col-sm-6 col-xs-6">
		<h4 style="margin-top: 6px;">
			<b *ngIf="ruleGroupService.ruleGroupRulesAndConditions.rules && ruleGroupService.ruleGroupRulesAndConditions.rules.length ">
				Rules({{ruleGroupService.ruleGroupRulesAndConditions.rules.length}})</b>
			<b *ngIf="!ruleGroupService.ruleGroupRulesAndConditions.rules">Rules</b>
		</h4>
	</div>
	<div class="col-md-6 col-sm-6 col-xs-6" *ngIf="ruleGroupService.ruleGroupRulesAndConditions.rules && !isViewOnly ">
		<button md-icon-button class="pull-right  md-36" (click)="addNewRuleObject(ruleGroupService.ruleGroupRulesAndConditions.rules.length,0)"
		[disabled]="reconForm.hasError('required', 'ruleNameDisplay'+(ruleGroupService.ruleGroupRulesAndConditions.rules.length-1)) || reconForm.hasError('required', 'sdv'+(ruleGroupService.ruleGroupRulesAndConditions.rules.length-1)) || reconForm.hasError('required', 'targetDataViewSelect'+(ruleGroupService.ruleGroupRulesAndConditions.rules.length-1)) "
		 mdTooltip="New Rule" [ngx-scroll-to]="ngxScrollToLastRule">
			<md-icon>add</md-icon>
		</button>
	</div>
</div> -->
<div class="row" style="margin: 0px 16px !important;position: sticky;z-index: 3;top: 40px;background-color: white;border-bottom: 1px solid lightgray;padding-top: 9px;" >
	<div class="col-md-6 col-sm-6 col-xs-6">
		<h4 style="margin-top: 6px;">
			<b *ngIf="ruleGroupService.ruleGroupRulesAndConditions && ruleGroupService.ruleGroupRulesAndConditions.rules && ruleGroupService.ruleGroupRulesAndConditions.rules.length>0">
				Rules(
					<span *ngIf="ruleGroupService .ruleGroup.rulePurpose == 'RECONCILIATION' && ruleGroupService.ruleGroupRulesAndConditions && ruleGroupService.ruleGroupRulesAndConditions.rules">{{ruleGroupService.ruleGroupRulesAndConditions.rules.length}}</span>
					)</b>
		</h4>
	</div>
	<div class="col-md-6 col-sm-6 col-xs-6">
		<button md-icon-button class="pull-right  md-36" (click)="addNewRuleObject(ruleGroupService.ruleGroupRulesAndConditions.rules.length,0)"
		*ngIf="ruleGroupService .ruleGroup.rulePurpose == 'RECONCILIATION' && ruleGroupService.ruleGroupRulesAndConditions.rules && !isViewOnly "
		 mdTooltip="Add New Rule" [ngx-scroll-to]="ngxScrollToLastRule">
			<md-icon>add</md-icon>
		</button>
		<div class="pull-right" style="padding-top: 12px;;padding-right: 8px;" *ngIf="ruleGroupService.ruleGroupRulesAndConditions.rules && ruleGroupService.ruleGroupRulesAndConditions.rules.length>1">
			<span class="hand underline-class" style="font-weight: bold;padding-right: 6px;font-size: 11px;" (click)="expandAll()">Expand All</span>
			<span class="hand underline-class" style="font-weight: bold;font-size: 11px;"  (click)="collapseAll()">Collapse All</span>
		</div>
	


		<!-- <button md-icon-button class=" pull-right md-36" mdTooltip="Hide Header" *ngIf="ruleGroupService.showHeader" (click)="ruleGroupService.toggleHeader()" >
				<md-icon>expand_less</md-icon>
			</button>
		<button md-icon-button class="pull-right md-36" mdTooltip="Show Header" *ngIf="!ruleGroupService.showHeader" (click)="ruleGroupService.toggleHeader()">
				<md-icon>expand_more</md-icon>
		</button> -->
	</div>
</div>
<button md-icon-button class="pull-right color-green" *ngIf="ruleCreationInWQ" (click)="saveAdhocRule()" mdTooltip="Initiate Job with this rule"
 mdTooltipPosition="below" aria-hidden="true">
	<md-icon>save</md-icon>
</button>
<!-- rules Block start -->

<form novalidate #reconForm="ngForm">
	<div class="row sub-heading-content rule-group-reconciliation" style="padding:7px 0px !important">

		<ng-template ngFor let-ruleObj [ngForOf]="ruleGroupService.ruleGroupRulesAndConditions.rules" let-i="index"  *ngIf="ruleGroupService.ruleGroupRulesAndConditions.rulePurpose == 'RECONCILIATION' && ruleGroupService.ruleGroupRulesAndConditions.rules && ruleGroupService.ruleGroupRulesAndConditions.rules.length>0">

			<div class="setups-accordian" style="padding-bottom: 10px">
				<md-accordion>
					<md-expansion-panel class="mat-overflow-unset" (opened)="ruleObj.openRuleTab = true" (closed)="ruleObj.openRuleTab = false" [expanded]="ruleObj.openRuleTab">
						<md-expansion-panel-header>
							<md-panel-title>
								<span *ngIf="ruleObj && ruleObj.rule.ruleCode" style="padding-top: 8px;">{{ruleObj.rule.ruleCode + ' '}}</span>
								<span *ngIf="!ruleObj.rule.editRule || isViewOnly" style="padding-top: 8px;"> - Rule Type : {{' '+ ruleObj.rule.ruleTypeMeaning}}</span>
								<span *ngIf="!ruleObj.rule.ruleCode" style="padding-top: 8px;">New Rule - {{i+1}}</span>

								<!-- <button md-icon-button class="pull-right" style="top:-10px;" (click)="clearRuleObject(i);false" *ngIf="!isViewOnly && !ruleCreationInWQ "
								 id="showIcon">
									<md-icon>clear</md-icon> 
								</button> -->
							</md-panel-title>

							<md-panel-description>
							<div class="mat-cus-desc">
									<div *ngIf="ruleObj.rule.startDate ">
										<label>From: </label>
										<span style="margin-right: 1rem;">{{ruleObj.rule.startDate | date:'mediumDate'}}</span>
									</div>
								
									<div *ngIf="ruleObj.rule.endDate">
										<label>To: </label>
										<span style="margin-right: 1rem;">{{ruleObj.rule.endDate | date:'mediumDate'}}</span>
									</div>
								
									<div *ngIf="ruleObj.rule.sDataViewDisplayName">
										<label>Reconciliation for: </label>
										<span style="margin-right: 1rem;">{{ruleObj.rule.sDataViewDisplayName}}</span>
									</div>
								
									<div *ngIf="ruleObj.rule.tDataViewDisplayName">
										<label>Reconciliation with: </label>
										<span style="margin-right: 1rem;">{{ruleObj.rule.tDataViewDisplayName}}</span>
									</div>
								</div>
							</md-panel-description>
							<button md-icon-button  *ngIf="!ruleObj.rule.editRule && !isViewOnly" mdTooltip="Edit Not Allowed">
							   <md-icon style="font-size: 29px;color: #e24242;">  create</md-icon>
							   <md-icon style="position: relative; right: 16px; font-size: 14px;color: red;">  block</md-icon>
						   </button>
						  
							 <button md-icon-button  style="height: 31px;width: 29px;top: 10px; transform: rotate(180deg) " *ngIf="(isViewOnly || !ruleObj.rule.editRule ) && ruleObj.rule.suggestionFlag"
								mdTooltip="Suggested Rule">
								   <md-icon>  wb_incandescent</md-icon>
							   </button>
							
							<div class="display-flex" [ngStyle]="{'padding-right': ruleObj.rule.assignmentFlag ? '22px' :'14px'}" *ngIf="ruleObj.rule.editRule && !isViewOnly">
								<div *ngFor="let ruleType of ruleObj.rule.ruletypeLOVArray" required class="occurnc-circle  rule-type-shadow" style="font-size:10px;width: 25px !important;height:25px !important;"
								[ngClass]="ruleType.value ? 'active-button' : ''"   [mdTooltip]="ruleType.name" (click)="selectedRuleType(ruleType,i);foo($event)">
									<p style="font-weight: bold;margin:0px">{{ruleType.code}}</p>

								</div>
							</div>
							<!-- <div class="display-flex" style="margin-top: 6px"  [ngStyle]="{'padding-right': ruleObj.rule.assignmentFlag ? '22px' :'14px'}" *ngIf="!ruleObj.rule.editRule || isViewOnly">
								<div *ngFor="let ruleType of  ruleObj.rule.ruletypeLOVArray" required class="occurnc-circle  rule-type-shadow" style="font-size:10px;width: 25px !important;height:25px !important;"
								[ngClass]="ruleType.value ? 'active-button' : ''"   [mdTooltip]="ruleType.name" [ngStyle]="{'display':ruleType.value ? 'inherit' :'none'}">
									<p style="font-weight: bold;margin:0px">{{ruleType.code}}</p>
								</div>
							</div> -->
							 
							<!-- <p class="badge badge-success icons-over-accordian" *ngIf="ruleObj.rule.suggestionFlag && isViewOnly" style="">Suggestion</p> -->
							<p class="badge badge-success icons-over-accordian" *ngIf="ruleObj.rule.assignmentFlag && isViewOnly">Active</p>
							<p class="badge badge-warning icons-over-accordian" *ngIf="(!ruleObj.rule.assignmentFlag || ruleObj.rule.assignment == false )&& isViewOnly">Inactive</p>
						</md-expansion-panel-header>
						<div class="row md-accordian-row-padding" style="display:flex;padding-bottom: 7px;margin-right: 0px" *ngIf="!ruleCreationInWQ && !isViewOnly && ruleObj.rule.editRule ">

							<div class="col-md-3 col-sm-4">

									<div class="multi-select-placeholder" *ngIf="!ruleCreationInWQ && ruleObj.rule.editRule && !isViewOnly && ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV && ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV.length>0">
											<div class="ms-label" >
												<p>Copy from existing rule :</p>
											</div>
											<div>
													<angular2-multiselect [data]="ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV" [(ngModel)]="ruleObj.rule.copiedRefId"
													[settings]="sourceDropdownSettings" (onSelect)="getExistingRuleDetailsAndCopy($event,i);copyRule=true;" 
													name="ruleTagLOV{{i}}" #ruleTagLOV{{i}}="ngModel" *ngIf="!ruleCreationInWQ && ruleObj.rule.editRule && !isViewOnly && ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV && ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV.length>0">
												   </angular2-multiselect>
											</div>
										</div>


								<!-- <div class="col-lg-10 col-md-10 col-sm-10 col-xs-10 multi-select-placeholder" style="font-size: 12px;color: rgba(0,0,0,.54);padding-right:0px"
								 [id]="'ruleScroll_'+i" *ngIf="ruleGroupService.ruleGroupRulesAndConditions && ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV">
									<p style="color : #949494 !important;">Copy from existing rule :</p>
								</div>
								<div class="col-lg-10 col-md-10 col-sm-10 col-xs-10 multi-select-elment-style" style="margin-top: -18px;" 
								*ngIf="ruleGroupService.ruleGroupRulesAndConditions && ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV">
									<angular2-multiselect [data]="ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV" [(ngModel)]="ruleObj.rule.copiedRefId"
									 [settings]="sourceDropdownSettings" (onSelect)="getExistingRuleDetailsAndCopy($event,i)" (onDeSelect)="clearTaggedRuleObject(i)"
									 name="ruleTagLOV{{i}}" #ruleTagLOV{{i}}="ngModel" *ngIf="!ruleCreationInWQ && ruleObj.rule.editRule && !isViewOnly && ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV && ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV.length>0">
									</angular2-multiselect>
									
								</div>  -->
								<!-- <p style="padding-top:27px;color:red !important;font-size:12px;" *ngIf="!ruleCreationInWQ && ruleObj.rule.editRule && !isViewOnly &&  ruleGroupService.ruleGroupRulesAndConditions && (!ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV || ruleGroupService.ruleGroupRulesAndConditions.existingRuleListLOV .length<=0)">
									Existing rules not found.
								</p> -->
								
								<!-- <p class="help-block errorFont" style="margin-left: 32px;" *ngIf="reconForm.hasError('required', 'ruleTagLOV'+i) && ruleGroupService.submitted">You have chosen to tag.</p> -->
							</div>
							<div class="col-md-2" style="margin-left: 12px;">
							<md-checkbox class=" appGrpCheckBox accounting-def-checkBox"  [(ngModel)]="ruleObj.rule.suggestionFlag"
										 [ngModelOptions]="{standalone: true}" *ngIf="!isViewOnly && ruleObj.rule.editRule" >Suggested Rule</md-checkbox></div>
							<div class="col-md-6"  style="margin-top: 32px;left: 40px;">
									<!-- <div class="col-md-1 slide-custom-toggle" style="top: 26px;"> -->
								
											<md-slide-toggle class="pull-right" color="primary" placeholder="status" style="padding-top:5px" [(ngModel)]="ruleObj.rule.assignmentFlag" name="status{{i}}" #status{{i}}="ngModel"
											 *ngIf="isEdit && ruleObj.rule.id"> </md-slide-toggle>
										<!-- </div> -->
								<button md-icon-button class="pull-right" style="top:-10px" (click)="copyAndCreateNewRule(ruleGroupService.ruleGroupRulesAndConditions.rules.length,i)"
								*ngIf="!ruleCreationInWQ && !isViewOnly "
								[disabled]="reconForm.hasError('required', 'ruleNameDisplay'+i) || reconForm.hasError('required', 'sdv'+i) || reconForm.hasError('required', 'targetDataViewSelect'+i) " mdTooltip="Copy and create new">
								   <md-icon>content_copy</md-icon>
							   </button>
	
							   <button md-icon-button class="pull-right" mdTooltip="Clear rule" style="font-size: 17px;top: -10px;" (click)="clearRuleObject(i);false"
								*ngIf="!isViewOnly && !ruleCreationInWQ && ruleObj.rule.editRule ">
								   <i class="fa fa-eraser " aria-hidden="true"></i>
							   </button>
							   <button md-icon-button class="pull-right" style="top:-10px;" (click)="deleteRuleObject(i);false" *ngIf="!isViewOnly && !ruleCreationInWQ && ruleObj.rule.editRule && (ruleGroupService.ruleGroupRulesAndConditions.rules.length != 1)"
								mdTooltip="Delete rule">
								   <md-icon>delete</md-icon>
							   </button>
							  
							 
							</div>

							<!-- <div class="col-md-2 col-sm-4" style="margin-top:11px">
								<div class="display-flex" *ngIf="ruleObj.rule.editRule && !isViewOnly">
									<div *ngFor="let ruleType of ruletypeLOVArray[i]" required class="occurnc-circle  occurrance-shadow" style="width: 35px !important;height:35px !important;"
									 [ngClass]="ruleType.value ? 'occ-active' : ''" [mdTooltip]="ruleType.name" (click)="selectedRuleType(ruleType,i)">
										<p style="font-weight: bold;margin:0px">{{ruleType.code}}</p>

									</div>
								</div>
								<div class="display-flex" *ngIf="!ruleObj.rule.editRule || isViewOnly">
									<div *ngFor="let ruleType of ruletypeLOVArray[i]" required class="occurnc-circle  occurrance-shadow" style="width: 35px !important;height:35px !important;"
									 [ngClass]="ruleType.value ? 'occ-active' : ''">
										<p style="font-weight: bold;margin:0px">{{ruleType.code}}</p>
									</div>
								</div>
							</div> -->
						</div>




						<!-- <div class="row" style="display:flex;"  > -->




						<!-- <div class="col-md-11"  style="padding:0px !important"> -->
						<div class="row mat-cus-desc-hide">

							<div class="col-md-2 col-sm-4" [ngStyle]="{ 'padding-top' : (!ruleCreationInWQ && (isViewOnly || !ruleObj.rule.editRule)) ? '24px' : '11px'}" *ngIf="!ruleCreationInWQ">
								<md-input-container>
									<input mdInput [(ngModel)]="ruleObj.rule.ruleCode" placeholder="Rule Name" [ngClass]="{'color-black' :true,'text-ellipse' : (isViewOnly || !ruleObj.rule.editRule)}"  (ngModelChange)="ruleDuplicationCheck(i)" 
									[disabled]="!ruleObj.rule.editRule || isViewOnly"
									 name="ruleNameDisplay{{i}}" required #ruleNameDisplay{{i}}="ngModel"> </md-input-container>
								<p class="help-block errorFont validation-error" *ngIf="reconForm.hasError('required', 'ruleNameDisplay'+i) && ruleGroupService.submitted">Rule name is required.</p>
								<p *ngIf="ruleObj.rule.duplicateRuleName"  class="help-block errorFont validation-error" >Rule name already exists</p>
							</div>
							<div class="col-md-2 col-sm-4" style="padding-top: 24px;" *ngIf="ruleCreationInWQ">
								<md-input-container>
									<input mdInput [(ngModel)]="ruleObj.rule.ruleCode" placeholder="Rule Name" name="ruleNameForWQ" required #name="ngModel">
								</md-input-container>
							</div>
							<!-- <div class="col-md-2 col-sm-6" *ngIf="!ruleCreationInWQ && ruleListformArray[i] && ruleObj.rule.editRule && !isViewOnly">
											
										<form class="form-horizontal" [style.width]="'100%'" [formGroup]="ruleListformArray[i]">
											<md-input-container>
												<input class="form-control" formControlName="data"  [formControl]="ruleObj.rule.formCntrl" mdInput placeholder="Rule Name " auto-complete [(ngModel)]="ruleObj.rule.ruleCode" [source]="ruleListArrays[i]"
												 [list-formatter]="autocompleListFormatter" value-property-name="id" required display-property-name="ruleCode" (keydown)="restrictTab($event.keyCode)"
												 (ngModelChange)="checkIfRuleCodeisUndefined(i)" (blur)= "checkIfBlurCalled(i,ruleObj.rule.ruleCode)" name="ruleCode{{i}}" id="ruleCode{{i}}" (valueChanged)="setRuleObject(i,ruleListformArray[i].value)"
												/>
											</md-input-container>
										</form>
										<p class="help-block errorFont" style="margin-left: 32px;" *ngIf="ruleObj.rule.formCntrl && ruleObj.rule.formCntrl.invalid && ruleGroupService.submitted">Rule code is required.</p>
									</div> -->
							<div class="col-md-1 col-sm-4 date-field-size"   [id]="'ruleScroll_'+i" [ngStyle]="{ 'padding-top' : (!ruleCreationInWQ && (isViewOnly || !ruleObj.rule.editRule)) ? '24px' : '11px'}">
								<md-form-field>
									<input mdInput [mdDatepicker]="stpicker" placeholder="From" [ngClass]="{'color-black' : isViewOnly || ruleObj.rule.ruleGroupAssignId || ruleObj.rule.id }"
									 [disabled]="isViewOnly || !ruleObj.rule.editRule" [min]="ruleObj.rule.today" (dateChange)="ruleObj.rule.startDateChange=true;startDateChanged(ruleObj.rule.startDate,i);"
									 [(ngModel)]="ruleObj.rule.startDate" name="rulestartDate{{i}}" #rulestartDate{{i}}="ngModel" required>
									<md-datepicker-toggle mdSuffix [for]="stpicker" *ngIf="ruleObj.rule.editRule  && !isViewOnly"></md-datepicker-toggle>
									<md-datepicker #stpicker></md-datepicker>
								</md-form-field>
								<p class="help-block errorFont validation-error"  *ngIf="reconForm.hasError('required', 'rulestartDate'+i) && ruleGroupService.submitted">Start date is required.</p>

							</div>
							<div class="col-md-1 col-sm-4 date-field-size" [ngStyle]="{ 'padding-top' : (!ruleCreationInWQ && (isViewOnly || !ruleObj.rule.editRule)) ? '24px' : '11px'}" *ngIf="(ruleObj.rule.editRule && !isViewOnly) || (isViewOnly && ruleObj.rule.endDate)">

								<md-form-field>
									<input mdInput [mdDatepicker]="edpicker" placeholder="To" [min]="ruleObj.rule.startDate" (dateChange)="ruleObj.rule.endDateChange=true"
									 [ngClass]="{'color-black' : isViewOnly || ruleObj.rule.ruleGroupAssignId || ruleObj.rule.id}" [disabled]="isViewOnly || !ruleObj.rule.editRule"
									 [(ngModel)]="ruleObj.rule.endDate" name="ruleendDate{{i}}" #ruleendDate{{i}}="ngModel">
									<md-datepicker-toggle mdSuffix [for]="edpicker" *ngIf="ruleObj.rule.editRule && !isViewOnly"></md-datepicker-toggle>
									<md-datepicker #edpicker></md-datepicker>
								</md-form-field>
							</div>
							<div class="col-md-3 col-sm-4 multiselect-text-overflow">
								<div class="col-lg-12 col-md-12 col-sm-12" style="padding-top: 24px;" *ngIf="ruleCreationInWQ || ((isViewOnly || !ruleObj.rule.editRule) && !ruleCreationInWQ)">
									<md-input-container *ngIf="ruleCreationInWQ"> 
										<input mdInput [(ngModel)]="ruleGroupService.sourceDataView" placeholder="Reconciliation for" [ngClass]="{'color-black' : true }"
										 [disabled]="true" name="srcDvName{{i}}" required #srcDvName{{i}}="ngModel"> </md-input-container>



									<md-input-container *ngIf="(isViewOnly || !ruleObj.rule.editRule) && !ruleCreationInWQ">
										<input mdInput [(ngModel)]="ruleObj.rule.sDataViewDisplayName" placeholder="Reconciliation for" [ngClass]="{'color-black' : isViewOnly || ruleObj.rule.ruleGroupAssignId  || ruleObj.rule.id}"
										 [disabled]="true" name="srcDvName{{i}}" required #srcDvName{{i}}="ngModel"> </md-input-container>
								</div>
								<div class="multi-select-placeholder"  *ngIf="!ruleCreationInWQ && ruleObj.rule.editRule && !isViewOnly && ruleObj.sourceDataViewsAndColumns && ruleObj.sourceDataViewsAndColumns.length>0">
									<div class="ms-label">
										<p>Reconciliation for :</p>
									</div>
									<div>
										<angular2-multiselect [data]="ruleObj.sourceDataViewsAndColumns" [(ngModel)]="ruleObj.rule.sourceDVId" [settings]="sourceDropdownSettings"
											required (onSelect)="fetchSrcColumns($event,i,'set')" (onDeSelect)="clearSourceDV(i)" name="sdv{{i}}" #sdv{{i}}="ngModel">
											
											  <c-item >
											  <ng-template let-item="item" >
												<label style="color: #333;min-width: 150px;">{{item.display}}{{item.itemName}}</label>
												<!-- <img [src]="item.image" style="width: 30px; border: 1px solid #efefef;margin-right: 20px;" /> -->
												
											  </ng-template>
											  </c-item>
										
											<!-- <c-item>
												<ng-template let-item="item"  class="non-pointer-events" >
												  <label style="color: #333;min-width: 150px;" *ngIf="item.display">{{item.itemName}}111</label>
												
												</ng-template>
										</c-item>   -->
										</angular2-multiselect>
										
									</div>
								</div>
								<!-- <div class="col-lg-10 col-md-10 col-sm-10 col-xs-10 multi-select-placeholder" style="font-size: 12px;color: rgba(0,0,0,.54);padding-right: 0px"
								 *ngIf="!ruleCreationInWQ && !isViewOnly">
									<p style="color : #949494 !important;">Reconciliation for :</p>
								</div> -->
								<!-- <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="font-size: 12px;color: rgba(0,0,0,.54);padding-bottom: 3px;"
								 *ngIf="!ruleCreationInWQ && !isViewOnly && ruleObj.rule.editRule && !ruleObj.rule.sourceDVId || (ruleObj.rule.sourceDVId && ruleObj.rule.sourceDVId.length==0)">
									<p style="color : #949494 !important;">Reconciliation for :</p>
								</div> -->
								<!-- <div class="col-lg-10 col-md-10 col-sm-10 col-xs-10 multi-select-elment-style" style="margin-top: -19px">
									<angular2-multiselect [data]="sourceDataViewsAndColumns" [(ngModel)]="ruleObj.rule.sourceDVId" [settings]="sourceDropdownSettings"
									 required (onSelect)="fetchSrcColumns($event,i,'set')" (onDeSelect)="clearSourceDV(i)" name="sdv{{i}}" #sdv{{i}}="ngModel"
									 *ngIf="!ruleCreationInWQ && ruleObj.rule.editRule && !isViewOnly && sourceDataViewsAndColumns && sourceDataViewsAndColumns.length>0">
									</angular2-multiselect>
								</div> -->
								<p class="help-block errorFont dropdown-validation-error" *ngIf="reconForm.hasError('required', 'sdv'+i) && ruleGroupService.submitted">Reconciliation for is required.</p>
							</div>
							<div class="col-md-3 col-sm-4 ">
								<div class="col-lg-12 col-md-12 col-sm-12" style="padding-top: 24px;" *ngIf="ruleCreationInWQ || ((isViewOnly || !ruleObj.rule.editRule) && !ruleCreationInWQ)" >
									<md-input-container *ngIf="ruleCreationInWQ">
										<input mdInput [(ngModel)]="ruleGroupService.targetDataView" placeholder="Reconciliation wtih" [ngClass]="{'color-black' : true }"
										 [disabled]="true" name="targetDvName{{i}}" required #targetDvName{{i}}="ngModel"> </md-input-container>


									<md-input-container *ngIf="(isViewOnly || !ruleObj.rule.editRule)  && !ruleCreationInWQ">
										<input mdInput [(ngModel)]="ruleObj.rule.tDataViewDisplayName" placeholder="Reconciliation wtih" [ngClass]="{'color-black' : isViewOnly || ruleObj.rule.ruleGroupAssignId || ruleObj.rule.id}"
										 [disabled]="true" name="targetDvName{{i}}" required #targetDvName{{i}}="ngModel"> </md-input-container>
									</div>
									<div class="multi-select-placeholder"  *ngIf=" !ruleCreationInWQ &&  ruleObj.rule.editRule && !isViewOnly && !isViewOnly && ruleObj.targetDataViewsAndColumns && ruleObj.targetDataViewsAndColumns.length>0">
											<div class="ms-label">
												<p>Reconciliation with :</p>
											</div>
											<div>
													<angular2-multiselect [data]="ruleObj.targetDataViewsAndColumns" required [(ngModel)]="ruleObj.rule.targetDVId" [settings]="targetDropdownSettings"
													(onSelect)="fetchTargetColumns($event,i,'set')" (onDeSelect)="clearTargetDV(i)" *ngIf=" !ruleCreationInWQ &&  ruleObj.rule.editRule && !isViewOnly && !isViewOnly && ruleObj.targetDataViewsAndColumns && ruleObj.targetDataViewsAndColumns.length>0"
													name="targetDataViewSelect{{i}}" #targetDataViewSelect{{i}}="ngModel">
												   </angular2-multiselect>
												   
											</div>
										</div>
										<p class="help-block errorFont dropdown-validation-error"  *ngIf="reconForm.hasError('required', 'targetDataViewSelect'+i) && ruleGroupService.submitted">Reconciliation with is required.</p>
<!-- 
									<div class="col-lg-10 col-md-10 col-sm-10 col-xs-10 multi-select-placeholder" style="font-size: 12px;color: rgba(0,0,0,.54);padding-right: 0px"
									 *ngIf="!ruleCreationInWQ && ruleObj.rule.editRule  && !isViewOnly">
										<p style="color : #949494 !important;">Reconciliation with :</p>
									</div>
								
									<div class="col-lg-10 col-md-10 col-sm-10 col-xs-10 multi-select-elment-style" style="margin-top: -19px">
										<angular2-multiselect [data]="sourceDataViewsAndColumns" required [(ngModel)]="ruleObj.rule.targetDVId" [settings]="targetDropdownSettings"
										 (onSelect)="fetchTargetColumns($event,i,'set')" (onDeSelect)="clearTargetDV(i)" *ngIf=" !ruleCreationInWQ &&  ruleObj.rule.editRule && !isViewOnly && !isViewOnly && sourceDataViewsAndColumns && sourceDataViewsAndColumns.length>0"
										 name="targetDataViewSelect{{i}}" #targetDataViewSelect{{i}}="ngModel">
										</angular2-multiselect>
										<p class="help-block errorFont validationMessage"  *ngIf="reconForm.hasError('required', 'targetDataViewSelect'+i) && ruleGroupService.submitted">Reconciliation with is required.</p>
									</div> -->
								
							

							</div>
							<!-- <div class="col-md-1 slide-custom-toggle" style="top: 26px;">
								
								<md-slide-toggle color="primary" placeholder="status" [(ngModel)]="ruleObj.rule.assignmentFlag" name="status{{i}}" #status{{i}}="ngModel"
								 *ngIf="isEdit && ruleObj.rule.id"> </md-slide-toggle>
							</div> -->



						</div>
						<div class="row md-accordian-row-padding child-accordian-shadow rule-conditions-header-background table-header-styles" style="padding-left: 4px;padding-top:14px">
							<md-accordion style="width:100%;" *ngIf=" (!ruleCreationInWQ && (	((!isViewOnly && ruleObj.rule.editRule ) &&	 ruleObj.rule.targetDVId && 	 ruleObj.rule.targetDVId.length>0&& ruleObj.rule.sourceDVId &&ruleObj.rule.sourceDVId .length>0) ||
							 ((isViewOnly || !ruleObj.rule.editRule) &&  ruleObj.rule.sDataViewDisplayName && ruleObj.rule.tDataViewDisplayName) )) 
							 ||(ruleCreationInWQ && ( ruleGroupService.targetDataView && ruleGroupService.sourceDataView ))">
								<md-expansion-panel expanded="true" [disabled]="true">
									<md-expansion-panel-header>
										<md-panel-title>
											<p style="padding-top: 8px;">Rule Conditions</p>

										</md-panel-title>
									</md-expansion-panel-header>
									<div class="col-md-11 col-xs-12" style="padding:0;clear:both;">

										<div class="table-responsive rule-conditions-table-styles" style="overflow-y: hidden;" id="rule-conditions-table-styles">
									
									<table class="table theme-table">
										<thead class="tableheader text-nowrap table-fit">
											<tr>
												<th  style="width: 50px;">Sequence</th>
												<!-- <th><span><b>(</b></span></th> -->
												<th style="width: 300px;" *ngIf="!ruleObj.rule.sDataViewDisplayName">Source Column</th>
												<th style="width: 300px;" *ngIf="ruleObj.rule.sDataViewDisplayName">{{ruleObj.rule.sDataViewDisplayName}}</th>
												<th style="width:50px;">Condition</th>
												<th style="width: 200px;">Operator</th>
												<th style="width: 300px;" *ngIf="!ruleObj.rule.tDataViewDisplayName">Target Column</th>
												<th  style="width: 300px;" *ngIf="ruleObj.rule.tDataViewDisplayName">{{ruleObj.rule.tDataViewDisplayName}}</th>
												<th style="width:50px;">Condition</th>
												<!-- <th><span><b>)</b></span></th> -->
												<th style="width: 9%;">Logical Operator</th>
												<th ></th>
												<th ></th>
											</tr>
										</thead>
										<tbody class="text-nowrap">
											<tr *ngFor="let condition of ruleObj.ruleConditions;let childIndex=index" (mouseover)="mouseOverCondition = childIndex" (mouseleave)="mouseOverCondition=-1">
												<td style="width: 50px;">
													<p style="top: 24px" class="linetext-input" *ngIf="ruleObj.rule.editRule && !isViewOnly">{{childIndex+1}}</p>

													<p class="linetext-input padding-in-rule-view" *ngIf="isViewOnly || !ruleObj.rule.editRule">{{childIndex+1}}</p>
												</td>
												<!-- <td>
													<md-select class="md-no-placeholder" [disabled]="isViewOnly  || !ruleObj.rule.editRule" (change)="selectOpenBracket(i,childIndex)"
													 [(ngModel)]="condition.openBracket" name="openBracket{{i}}{{childIndex}}" #openBracket{{i}}{{childIndex}}="ngModel"
													  *ngIf="!isViewOnly && ruleObj.rule.editRule &&  ruleObj.ruleConditions">
														<md-option size="50"  [value]="'('" ><span>{{openBracket}}</span></md-option>
														<md-option [value]=""></md-option>
													</md-select>
													<p class="linetext-input padding-in-rule-view" *ngIf="isViewOnly || !ruleObj.rule.editRule">{{condition.openBracket}}</p>
													
												</td> -->
												<td style="width: 300px;">

													<md-select class="md-no-placeholder" style="width: 300px;" [disabled]="isViewOnly  || !ruleObj.rule.editRule" (change)="selectedSourceColumn(i,childIndex,condition.sColumnId)"
													 [(ngModel)]="condition.sColumnId" name="sColumn{{i}}{{childIndex}}" #sColumn{{i}}{{childIndex}}="ngModel" *ngIf="!isViewOnly && ruleObj.rule.editRule &&  ruleObj.ruleConditions">
														<md-option size="50" *ngFor="let sourceCol of ruleObj.rule.sourceColumnLOV" [value]="sourceCol.id">{{sourceCol.columnName}}</md-option>
														<md-option [value]=""></md-option>
													</md-select>
													<p class="linetext-input padding-in-rule-view" *ngIf="isViewOnly || !ruleObj.rule.editRule">{{condition.sColumnName}}</p>
												</td>
												<td style="width:50px;">

													<button md-icon-button *ngIf="!isViewOnly && ruleObj.rule.editRule && condition.sColumnId" (click)="openSrcFilters(i,childIndex)"
													 mdTooltip="Add Filters">
														<md-icon >more_vert</md-icon>
													</button>

													<i class="fa fa-filter hand" [ngClass]="((!isViewOnly && !ruleObj.rule.editRule) || (isViewOnly))? 'padding-in-rule-view' : ''"  aria-hidden="true" popoverTitle="Filter" popoverPlacement="right" [popoverOnHover]="true" [popoverCloseOnMouseOutside]="true"
													 popover="{{condition.sColumnName + ' ' + condition.sOperator + ' ' + condition.sValue}} " *ngIf="condition.sOperator">
													</i>
													<i class="hand" [ngClass]="((!isViewOnly && !ruleObj.rule.editRule) || (isViewOnly))? 'padding-in-rule-view' : ''"  style="color: black; font-style: italic; font-family: cursive; font-weight: normal; font-size: 15px; visibility: visible;"
													 popoverTitle="Expression" popoverPlacement="right" [popoverOnHover]="true" [popoverCloseOnMouseOutside]="true"
													 popover="{{condition.sFormula}} " *ngIf="condition.sFormula">
														<b>fx</b>
													</i>
													<i class="hand" [ngClass]="((!isViewOnly && !ruleObj.rule.editRule) || (isViewOnly))? 'padding-in-rule-view' : ''"   style="color: black; font-style: italic; font-family: cursive; font-weight: normal; font-size: 15px; visibility: visible;"
													 popoverTitle="Tolerance" popoverPlacement="right" [popoverOnHover]="true" [popoverCloseOnMouseOutside]="true"
													 popover="{{ condition.sToleranceOperatorFrom +condition.sToleranceValueFrom+ ' to '+condition.sToleranceOperatorTo +condition.sToleranceValueTo}} "
													 *ngIf="condition.sToleranceValueFrom && !condition.sPercentile">
														<b>T</b>
													</i>
													<i class="hand"  [ngClass]="((!isViewOnly && !ruleObj.rule.editRule) || (isViewOnly))? 'padding-in-rule-view' : ''" style="color: black; font-style: italic; font-family: cursive; font-weight: normal; font-size: 15px; visibility: visible;"
													 popoverTitle="Tolerance" popoverPlacement="right" [popoverOnHover]="true" [popoverCloseOnMouseOutside]="true"
													 popover="{{ condition.sToleranceOperatorFrom +condition.sToleranceValueFrom+ '% to '+condition.sToleranceOperatorTo +condition.sToleranceValueTo+'%'}} "
													 *ngIf="condition.sToleranceValueFrom && condition.sPercentile">
														<b>T</b>
													</i>
													<!-- End -->

													<popover-content #srcFilterPopover placement="right" [animation]="true" [closeOnClickOutside]="false" style="z-index: 999 !important;width:40px"
													 [popoverCloseOnMouseOutside]="false">
														<div class="row">

															<div class="display-PopOverActions col-md-12">
																<ul>
																	<li [class.highlight_stay]="filterAction=='srcFilter'">
																		<a class="hand " mdTooltip="Add Filter" (click)="addFilter(i,childIndex);filterAction='srcFilter' ">
																			<i class="fa fa-filter"></i>
																		</a>
																	</li>
																	<li [class.highlight_stay]="filterAction=='srcFormula'">
																		<a class="hand " mdTooltip="Add Formula" (click)="addFormula(i,childIndex);filterAction='srcFormula'">
																			<b>fx</b>
																		</a>
																	</li>
																	<li [class.highlight_stay]="filterAction=='srcTolerance'">
																		<a class="hand " mdTooltip="Add Tolerance" (click)="addTolerance(i,childIndex);filterAction='srcTolerance'">
																			<b>T</b>
																		</a>
																	</li>
																</ul>
															</div>

															<div class="col-md-10" *ngIf="(sFilter && sFilter[i] && sFilter[i][childIndex]) ||( sFormula && sFormula[i] && sFormula[i][childIndex])	|| (sTolerance && sTolerance[i] && sTolerance[i][childIndex])">

																<button md-icon-button class="pull-right" mdTooltip="Close" [disabled]="!recFiltersForm.valid" (click)="closeSrc(i,childIndex);srcFilterPopover.hide();">
																	<md-icon>clear</md-icon>
																</button>

																<form novalidate #recFiltersForm="ngForm">
																	<div *ngIf=" sFilter && sFilter[i] && sFilter[i][childIndex]" class="table-header-styles">
																		<table>
																			<thead class="text-nowrap">
																				<tr>
																					<th>Operator</th>
																					<th>Value</th>
																				</tr>
																			</thead>
																			<tbody class="text-nowrap">
																				<tr>
																					<td>
																						<md-select (change)="selectOperator();srcFilterPopover.show();" [(ngModel)]="condition.sOperator" name="sOperator{{i}}{{childIndex}}"
																						 class="md-no-placeholder" #sOperator{{i}}{{childIndex}}="ngModel">
																							<md-option size="50" *ngFor="let operator of operatorList" [value]="operator.lookUpCode">{{operator.meaning}}</md-option>
																						</md-select>
																					</td>
																					<td>
																						<md-input-container class="example-full-width">
																							<input mdInput [(ngModel)]="condition.sValue" name="value{{i}}{{childIndex}}" required #value{{i}}{{childIndex}}="ngModel"> </md-input-container>
																					</td>
																				</tr>

																			</tbody>
																		</table>
																		<button md-icon-button class="pull-right color-green ripple" [disabled]="!recFiltersForm.valid" aria-hidden="true" [disabled]="!recFiltersForm.valid"
																		 (click)="savesrcFilter(i,childIndex);srcFilterPopover.hide();" mdTooltip="Save">
																			<md-icon>done</md-icon>
																		</button>
																		<button md-icon-button class="pull-right color-red ripple" aria-hidden="true" (click)="cancelsrcFilter(i,childIndex)" mdTooltip="Clear">
																			<md-icon>delete</md-icon>
																		</button>
																	</div>
																	<div *ngIf="sFormula && sFormula[i] && sFormula[i][childIndex]">
																		<div>
																			<label class="control-label" style="font-size: 16px;">Select Function:
																			</label>
																			<md-select [(ngModel)]="condition.isSFormula" style="width:230px;z-index: 100 !important;" [ngClass]="{'color-black' : isViewOnly}"
																			 name="excelexpression{{i}}{{childIndex}}" #excelexpression{{i}}{{childIndex}}="ngModel">
																				<md-option *ngFor="let excelexpression of excelFunctions" [value]="excelexpression.lookUpCode" (click)="showExcelFunction(excelexpression.lookUpCode, i,childIndex,excelexpression.description);srcFilterPopover.show()">
																					{{ excelexpression.meaning }} </md-option>
																			</md-select>
																		</div>
																		<div *ngIf="condition.isSFormula" class="data-view-query-build">
																			<textarea mdInput [(ngModel)]="condition.sFormula" name="sFormula{{i}}{{childIndex}}" required mdTooltip=""></textarea>
																		</div>

																		<div *ngIf="condition.isSFormula" style="padding-top: 10px;">
																			<p>Eg: {{condition.sFormulaExpressionExample}}</p>
																			<button md-icon-button class="pull-right color-green ripple" [disabled]="!recFiltersForm.valid" aria-hidden="true" (click)="savesrcExpression(condition.sFormula,i,childIndex);srcFilterPopover.hide();"
																			 mdTooltip="Save">
																				<md-icon>done</md-icon>
																			</button>
																			<button md-icon-button class="pull-right color-red ripple" aria-hidden="true" (click)="cancelsrcFormula(i,childIndex)" mdTooltip="Clear">
																				<md-icon>delete</md-icon>
																			</button>
																		</div>
																	</div>
																	<div class="table-responsive table-header-styles" *ngIf="sTolerance && sTolerance[i] && sTolerance[i][childIndex]">
																		<table>
																			<thead class="text-nowrap">
																				<tr>
																					<th>Type</th>
																					<th>Range</th>
																					<th></th>
																				</tr>
																			</thead>
																			<tbody class="text-nowrap">
																				<tr>
																					<td>
																						<md-select placeholder="Type" class="example-full-width" #ruleType [(ngModel)]="condition.sToleranceType" name="stoleranceType{{i}}{{childIndex}}"
																						 required #stoleranceType{{i}{{childIndex}}="ngModel">
																							<md-option *ngFor="let toleranceType of toleranceTypeLOV" [value]="toleranceType.lookUpCode"> {{ toleranceType.meaning}} </md-option>
																						</md-select>
																					</td>
																					<td style="display: inline-flex;">
																						<md-input-container class="example-full-width">
																							<input mdInput [(ngModel)]="condition.sToleranceValueFrom" (blur)="splitsToleranceFrom(i,childIndex)" placeholder="From"
																							 name="sFromValue{{i}}{{childIndex}}" required #sFromValue{{i}}{{childIndex}}="ngModel"> </md-input-container>
																					</td>
																					<td>
																						<md-input-container class="example-full-width ">

																							<input mdInput [(ngModel)]="condition.sToleranceValueTo" (blur)="splitsToleranceTo(i,childIndex)" placeholder="To" name="sToValue{{i}}{{childIndex}}"
																							 required #sToValue{{i}}{{childIndex}}="ngModel"> </md-input-container>
																					</td>
																				</tr>
																			</tbody>
																		</table>
																		<button md-icon-button class="pull-right color-green ripple" [disabled]="!recFiltersForm.valid" aria-hidden="true" (click)="savesrcTolerance(i,childIndex);srcFilterPopover.hide()"
																		 mdTooltip="Save">
																			<md-icon>done</md-icon>
																		</button>
																		<button md-icon-button class="pull-right color-red ripple" aria-hidden="true" (click)="cancelsrcTolerance(i,childIndex)"
																		 mdTooltip="Clear">
																			<md-icon>delete</md-icon>
																		</button>
																	</div>
																</form>
															</div>
														</div>
													</popover-content>
												</td>
												<td style="width: 200px;">


													<md-select class="md-no-placeholder" style="width: 200px;" [disabled]="!ruleObj.rule.editRule || isViewOnly" (change)="selectedOperator()" [(ngModel)]="condition.operator"
													 name="operator{{i}}{{childIndex}}" #operator{{i}}{{childIndex}}="ngModel" *ngIf="!isViewOnly && ruleObj.rule.editRule ">
														<md-option size="50" *ngFor="let operator of condition.operatorBasedOnColumnLOV" [value]="operator.lookUpCode">{{operator.meaning}}</md-option>
														<md-option [value]=""></md-option>
													</md-select>

													<p class="linetext-input padding-in-rule-view" *ngIf="isViewOnly || !ruleObj.rule.editRule">{{condition.operatorMeaning}}</p>
												</td>

												<td style="width: 300px;">

													<md-select class="md-no-placeholder" style="width: 300px;" [disabled]="!ruleObj.rule.editRule || isViewOnly" (change)="selectedTargetColumn(i,childIndex,condition.tColumnId)"
													 [(ngModel)]="condition.tColumnId" name="tColumn{{i}}{{childIndex}}" #tColumn{{i}}{{childIndex}}="ngModel" *ngIf="!isViewOnly && ruleObj.rule.editRule && ruleObj.ruleConditions ">
														<md-option size="50" *ngFor="let targetCol of ruleObj.rule.targetColumnLOV" [value]="targetCol.id">{{targetCol.columnName}}</md-option>
														<md-option [value]=""></md-option>
													</md-select>

													<p class="linetext-input padding-in-rule-view" *ngIf="isViewOnly || !ruleObj.rule.editRule">{{condition.tColumnName}}</p>
												</td>
												<td style="width:50px;">
													<button md-icon-button (click)="openTargetFilters(i,childIndex)" *ngIf="!isViewOnly  && ruleObj.rule.editRule && condition.tColumnId"
													 mdTooltip="Add Filters">
														<md-icon>more_vert</md-icon>
													</button>
													<!-- display Target additional filter tagged -->
													<i class="fa fa-filter hand" [ngClass]="((!isViewOnly && !ruleObj.rule.editRule) || (isViewOnly))? 'padding-in-rule-view' : ''"  aria-hidden="true" popoverTitle="Filter" popoverPlacement="right" [popoverOnHover]="true" [popoverCloseOnMouseOutside]="true"
													 popover="{{condition.tColumnName + ' ' + condition.tOperator + ' ' + condition.tValue}} " *ngIf="condition.tOperator">
													</i>
													<i class="hand" [ngClass]="((!isViewOnly && !ruleObj.rule.editRule) || (isViewOnly))? 'padding-in-rule-view' : ''"  style="color: black; font-style: italic; font-family: cursive; font-weight: normal; font-size: 15px; visibility: visible;"
													 popoverTitle="Formula" popoverPlacement="right" [popoverOnHover]="true" [popoverCloseOnMouseOutside]="true"
													 popover="{{condition.tFormula}} " *ngIf="condition.tFormula">
														<b>fx</b>
													</i>

													<i class="hand" [ngClass]="((!isViewOnly && !ruleObj.rule.editRule) || (isViewOnly))? 'padding-in-rule-view' : ''"  style="color: black; font-style: italic; font-family: cursive; font-weight: normal; font-size: 15px; visibility: visible;"
													 popoverTitle="Tolerance" popoverPlacement="right" [popoverOnHover]="true" [popoverCloseOnMouseOutside]="true"
													 popover="{{condition.tToleranceOperatorFrom + condition.tToleranceValueFrom+' to '+condition.tToleranceOperatorTo + condition.tToleranceValueTo}} "
													 *ngIf="condition.tToleranceValueFrom && !condition.tPercentile">
														<b>T</b>
													</i>

													<i class="hand" [ngClass]="((!isViewOnly && !ruleObj.rule.editRule) || (isViewOnly))? 'padding-in-rule-view' : ''"  style="color: black; font-style: italic; font-family: cursive; font-weight: normal; font-size: 15px; visibility: visible;"
													 popoverTitle="Tolerance" popoverPlacement="right" [popoverOnHover]="true" [popoverCloseOnMouseOutside]="true"
													 popover="{{condition.tToleranceOperatorFrom + condition.tToleranceValueFrom+'% to '+condition.tToleranceOperatorTo + condition.tToleranceValueTo+'%'}} "
													 *ngIf="condition.tToleranceValueFrom && condition.tPercentile">
														<b>T</b>
													</i>
													<!-- End -->
													<popover-content #targetFilterPopover placement="right" [animation]="true" [closeOnClickOutside]="false" style="z-index: 999 !important;"
													 [popoverCloseOnMouseOutside]="false">
														<div class="row">
															<div class="display-PopOverActions col-md-12">
																<ul>
																	<li [class.highlight_stay]="filterAction=='targetFilter'">
																		<a class="hand" mdTooltip="Add Filter" (click)="addtFilter(i,childIndex);filterAction='targetFilter' ">
																			<i class="fa fa-filter"></i>
																		</a>
																	</li>
																	<li [class.highlight_stay]="filterAction=='targetFormula'">
																		<a class="hand" mdTooltip="Add Formula" (click)="addtFormula(i,childIndex);filterAction='targetFormula' ">
																			<b>fx</b>
																		</a>
																	</li>
																	<li [class.highlight_stay]="filterAction=='targetTolerance'">
																		<a class="hand" mdTooltip="Add Tolerance" (click)="addtTolerance(i,childIndex);filterAction='targetTolerance' ">
																			<b>T</b>
																		</a>
																	</li>
																</ul>
															</div>


															<div class="col-md-10">
																<i class="pull-right fa fa-times hand" aria-hidden="true" mdTooltip="Close" (click)="closeTarget(i,childIndex);targetFilterPopover.hide();"
																 *ngIf="(tFilter && tFilter[i] && tFilter[i][childIndex])|| 	(tFormula && tFormula[i] && tFormula[i][childIndex])|| (tTolerance && tTolerance[i] && tTolerance[i][childIndex])">
																</i>
																<div *ngIf="tFilter && tFilter[i] && tFilter[i][childIndex]" class="table-header-styles">
																	<table>
																		<thead class="text-nowrap">
																			<tr>
																				<th>Operator</th>
																				<th>Value</th>
																			</tr>
																		</thead>
																		<tbody class="text-nowrap">
																			<tr>
																				<td>
																					<md-select (change)="selecttOperator();targetFilterPopover.show();" [(ngModel)]="condition.tOperator" name="tOperator{{i}}{{childIndex}}"
																					 #tOperator{{i}}{{childIndex}}="ngModel">
																						<md-option size="50" *ngFor="let operator of operatorList" [value]="operator.lookUpCode">{{operator.meaning}}</md-option>
																					</md-select>
																				</td>
																				<td>
																					<md-input-container class="example-full-width ">
																						<input mdInput [(ngModel)]="condition.tValue" name="valuee{{i}}{{childIndex}}" required #valuee{{i}}{{childIndex}}="ngModel"> </md-input-container>
																				</td>
																			</tr>
																		</tbody>
																	</table>
																	<button md-icon-button class="pull-right color-green ripple" aria-hidden="true" (click)="savetargetFilter(i, childIndex);targetFilterPopover.hide();"
																	 mdTooltip="Save">
																		<md-icon>done</md-icon>
																	</button>
																	<button md-icon-button class="pull-right color-red ripple" aria-hidden="true" (click)="cancelTargetFilter(i,childIndex)"
																	 mdTooltip="Clear">
																		<md-icon>delete</md-icon>
																	</button>
																</div>

																<div *ngIf="tFormula && tFormula[i] && tFormula[i][childIndex]">
																	<div>
																		<label class="control-label" style="font-size: 16px;">Select Function:
																		</label>
																		<md-select [(ngModel)]="condition.isTFormula" style="width:230px;z-index: 100 !important;" [ngClass]="{'color-black' : isViewOnly}"
																		 name="excelexpression{{i}}{{childIndex}}" #excelexpression{{i}}{{childIndex}}="ngModel">
																			<md-option *ngFor="let excelexpression of excelFunctions" [value]="excelexpression.lookUpCode" (click)="showExcelFunction(excelexpression.lookUpCode, i,childIndex,excelexpression.description);srcFilterPopover.show()">
																				{{ excelexpression.meaning }} </md-option>
																		</md-select>
																	</div>
																	<div *ngIf="condition.isTFormula" class="data-view-query-build">
																		<textarea mdInput [(ngModel)]="condition.tFormula" name="sFormula{{i}}{{childIndex}}" mdTooltip=""></textarea>
																	</div>

																	<div *ngIf="condition.isTFormula" style="padding-top: 10px;">
																		<p>Eg: {{condition.sFormulaExpressionExample}}</p>
																		<button md-icon-button class="pull-right color-green ripple" aria-hidden="true" (click)="savetargetExpression(condition.tFormula,i, childIndex);targetFilterPopover.hide();"
																		 mdTooltip="Save">
																			<md-icon>done</md-icon>
																		</button>
																		<button md-icon-button class="pull-right color-red ripple" aria-hidden="true" (click)="canceltargetFormula(i,childIndex)"
																		 mdTooltip="Clear">
																			<md-icon>delete</md-icon>
																		</button>
																	</div>
																</div>
																<div class="table-responsive table-header-styles" *ngIf="tTolerance && tTolerance[i] && tTolerance[i][childIndex]">
																	<table>
																		<thead class="text-nowrap">
																			<tr>
																				<th>Type</th>
																				<th>Range</th>
																			</tr>
																		</thead>
																		<tbody class="text-nowrap">
																			<tr>
																				<td>
																					<md-select placeholder="Type" class="example-full-width " #ruleType [(ngModel)]="condition.tToleranceType" name="toleranceType{{i}}{{childIndex}}"
																					 required #toleranceType{{i}{{childIndex}}="ngModel">
																						<md-option *ngFor="let toleranceType of toleranceTypeLOV" [value]="toleranceType.lookUpCode"> {{ toleranceType.meaning}} </md-option>
																					</md-select>
																				</td>
																				<td style="display: inline-flex;">
																					<md-input-container class="example-full-width">
																						<input mdInput [(ngModel)]="condition.tToleranceValueFrom" (blur)="splittToleranceFrom(i,childIndex)" placeholder="From"
																						 name="tFromValue{{i}}{{childIndex}}" required #tFromValue{{i}}{{childIndex}}="ngModel"> </md-input-container>
																					<md-input-container class="example-full-width ">
																						<input mdInput [(ngModel)]="condition.tToleranceValueTo" (blur)="splittToleranceTo(i,childIndex)" placeholder="To" name="tToValue{{i}}{{childIndex}}"
																						 required #tToValue{{i}}{{childIndex}}="ngModel"> </md-input-container>
																				</td>
																			</tr>
																		</tbody>
																	</table>
																	<button md-icon-button class="pull-right color-green ripple" aria-hidden="true" (click)="savetargetTolerance(i,childIndex);targetFilterPopover.hide()"
																	 mdTooltip="Save">
																		<md-icon>done</md-icon>
																	</button>
																	<button md-icon-button class="pull-right color-red ripple" aria-hidden="true" (click)="canceltargetTolerance(i,childIndex)"
																	 mdTooltip="Clear">
																		<md-icon>delete</md-icon>
																	</button>
																</div>
															</div>
														</div>

													</popover-content>
												</td>
												<!-- <td>
													<md-select class="md-no-placeholder" [disabled]="isViewOnly  || !ruleObj.rule.editRule" (change)="selectCloseBracket(i,childIndex)"
													 [(ngModel)]="condition.closeBracket" name="closeBracket{{i}}{{childIndex}}" #closeBracket{{i}}{{childIndex}}="ngModel"
													  *ngIf="!isViewOnly && ruleObj.rule.editRule &&  ruleObj.ruleConditions">
														<md-option size="50"  [value]="')'"><span>{{closeBracket}}</span></md-option>
														<md-option [value]=""></md-option>
													</md-select>
													<p class="linetext-input padding-in-rule-view" *ngIf="isViewOnly || !ruleObj.rule.editRule">{{condition.closeBracket}}</p>
													
												</td> -->
												<td style="width: 9%;">
													<p class="linetext-input" *ngIf="!ruleObj.rule.editRule || isViewOnly " class="padding-in-rule-view">{{condition.logicalOperatorMeaning}}</p>
													<div class="display-flex " *ngIf="ruleObj.rule.editRule && !isViewOnly && condition.logicalOpLOVArray" style="padding-top: 14px;">

														<div *ngFor="let lOperator of condition.logicalOpLOVArray" class="occurnc-circle occurrance-shadow " style="font-size: 10px;width: 25px !important;height: 25px !important;" [ngClass]="lOperator.value ? 'occ-active' : ''"
														 [mdTooltip]="lOperator.name" (click)="selectedLogicalOperator(lOperator,i,childIndex);">
															<p style="font-weight: bold;margin:0px;" >{{lOperator.code}}</p>

														</div>
													</div>
												</td>
												<td style="width: 150px;" *ngIf="!isViewOnly && ruleObj.rule.editRule">
													<!-- <div class="display-flex"> -->
														<!-- <div  style="color: red; font-style: italic; font-family: cursive; font-weight: normal; font-size: 20px;"> -->
															<button md-icon-button class="color-dark-red pull-right" mdTooltip="Delete" (click)="deleteCondition(i,childIndex)" *ngIf="ruleObj.rule.editRule">
																<md-icon>delete</md-icon>
															</button>
														<!-- </div> -->

													<!-- </div> -->

												</td>
												<td  class="display-flex"  >
													<md-checkbox class="appGrpCheckBox accounting-def-checkBox"  (change)="checkQualifier($event,i,childIndex)"  [(ngModel)]="condition.amountQualifier"
													 [disabled]="(isViewOnly || (!isViewOnly && !ruleObj.rule.editRule ) || (!isViewOnly && ruleObj.rule.editRule && ruleObj.hasAmountQualifier && !condition.amountQualifier) )"
													[ngModelOptions]="{standalone: true}" *ngIf="(condition.dataType == 'DECIMAL' || condition.tDataType == 'DECIMAL') " >
												   </md-checkbox>
												   <p  class="padding-in-rule-view-checkbox-label" *ngIf="(condition.dataType == 'DECIMAL' || condition.tDataType == 'DECIMAL') "  >Recon Amount match</p>
												</td>

											</tr>
										</tbody>
									</table>
									</div>
									</div>
								</md-expansion-panel>
							</md-accordion>

							<!-- </div> -->

						</div>
						<span *ngIf="!ruleObj.rule.editRule && !isViewOnly" class="pull-right" style="color:red">*There are reconciled records with this rule. To edit please unreconcile and proceed..</span>

						<!-- </div> -->




						<!-- </div> -->
					</md-expansion-panel>
				</md-accordion>



		</ng-template>

		</div>
</form>

<!-- rules Block end -->